(()=>{"use strict";class e{value=0;setStartingValue(e){this.value=e}getID(){return this.value++}reset(){this.value=0}}function t(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function n(e){t(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}let i=0;class a{static LOW="low";static MEDIUM="medium";static HIGH="high";static DEFAULT="default"}function r(e){return t(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}function o(e){if(t(1,arguments),!r(e)&&"number"!=typeof e)return!1;var i=n(e);return!isNaN(Number(i))}var s={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function d(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,i=e.formats[n]||e.formats[e.defaultWidth];return i}}var c,l={date:d({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:d({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:d({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},u={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function m(e){return function(t,n){var i,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,o=a.width?String(a.width):r;i=e.formattingValues[o]||e.formattingValues[r]}else{var s=e.defaultWidth,d=a.width?String(a.width):e.defaultWidth;i=e.values[d]||e.values[s]}return i[e.argumentCallback?e.argumentCallback(t):t]}}function h(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=n.width,a=i&&e.matchPatterns[i]||e.matchPatterns[e.defaultMatchWidth],r=t.match(a);if(!r)return null;var o,s=r[0],d=i&&e.parsePatterns[i]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(d)?f(d,(function(e){return e.test(s)})):p(d,(function(e){return e.test(s)}));o=e.valueCallback?e.valueCallback(c):c,o=n.valueCallback?n.valueCallback(o):o;var l=t.slice(s.length);return{value:o,rest:l}}}function p(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function f(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}const g={code:"en-US",formatDistance:function(e,t,n){var i,a=s[e];return i="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+i:i+" ago":i},formatLong:l,formatRelative:function(e,t,n,i){return u[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),i=n%100;if(i>20||i<10)switch(i%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:m({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:m({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:m({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:m({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:m({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(c={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(c.matchPattern);if(!n)return null;var i=n[0],a=e.match(c.parsePattern);if(!a)return null;var r=c.valueCallback?c.valueCallback(a[0]):a[0];r=t.valueCallback?t.valueCallback(r):r;var o=e.slice(i.length);return{value:r,rest:o}}),era:h({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:h({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:h({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:h({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:h({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function v(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function w(e,i){t(2,arguments);var a=n(e).getTime(),r=v(i);return new Date(a+r)}function C(e,n){t(2,arguments);var i=v(n);return w(e,-i)}var k=864e5;function L(e){t(1,arguments);var i=1,a=n(e),r=a.getUTCDay(),o=(r<i?7:0)+r-i;return a.setUTCDate(a.getUTCDate()-o),a.setUTCHours(0,0,0,0),a}function y(e){t(1,arguments);var i=n(e),a=i.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(a+1,0,4),r.setUTCHours(0,0,0,0);var o=L(r),s=new Date(0);s.setUTCFullYear(a,0,4),s.setUTCHours(0,0,0,0);var d=L(s);return i.getTime()>=o.getTime()?a+1:i.getTime()>=d.getTime()?a:a-1}function T(e){t(1,arguments);var n=y(e),i=new Date(0);i.setUTCFullYear(n,0,4),i.setUTCHours(0,0,0,0);var a=L(i);return a}var b=6048e5;function E(e,i){t(1,arguments);var a=i||{},r=a.locale,o=r&&r.options&&r.options.weekStartsOn,s=null==o?0:v(o),d=null==a.weekStartsOn?s:v(a.weekStartsOn);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=n(e),l=c.getUTCDay(),u=(l<d?7:0)+l-d;return c.setUTCDate(c.getUTCDate()-u),c.setUTCHours(0,0,0,0),c}function D(e,i){t(1,arguments);var a=n(e),r=a.getUTCFullYear(),o=i||{},s=o.locale,d=s&&s.options&&s.options.firstWeekContainsDate,c=null==d?1:v(d),l=null==o.firstWeekContainsDate?c:v(o.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=new Date(0);u.setUTCFullYear(r+1,0,l),u.setUTCHours(0,0,0,0);var m=E(u,i),h=new Date(0);h.setUTCFullYear(r,0,l),h.setUTCHours(0,0,0,0);var p=E(h,i);return a.getTime()>=m.getTime()?r+1:a.getTime()>=p.getTime()?r:r-1}function j(e,n){t(1,arguments);var i=n||{},a=i.locale,r=a&&a.options&&a.options.firstWeekContainsDate,o=null==r?1:v(r),s=null==i.firstWeekContainsDate?o:v(i.firstWeekContainsDate),d=D(e,n),c=new Date(0);c.setUTCFullYear(d,0,s),c.setUTCHours(0,0,0,0);var l=E(c,n);return l}var M=6048e5;function P(e,t){for(var n=e<0?"-":"",i=Math.abs(e).toString();i.length<t;)i="0"+i;return n+i}const S=function(e,t){var n=e.getUTCFullYear(),i=n>0?n:1-n;return P("yy"===t?i%100:i,t.length)},x=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):P(n+1,2)},I=function(e,t){return P(e.getUTCDate(),t.length)},q=function(e,t){return P(e.getUTCHours()%12||12,t.length)},A=function(e,t){return P(e.getUTCHours(),t.length)},O=function(e,t){return P(e.getUTCMinutes(),t.length)},N=function(e,t){return P(e.getUTCSeconds(),t.length)},U=function(e,t){var n=t.length,i=e.getUTCMilliseconds();return P(Math.floor(i*Math.pow(10,n-3)),t.length)};function W(e,t){var n=e>0?"-":"+",i=Math.abs(e),a=Math.floor(i/60),r=i%60;if(0===r)return n+String(a);var o=t||"";return n+String(a)+o+P(r,2)}function F(e,t){return e%60==0?(e>0?"-":"+")+P(Math.abs(e)/60,2):H(e,t)}function H(e,t){var n=t||"",i=e>0?"-":"+",a=Math.abs(e);return i+P(Math.floor(a/60),2)+n+P(a%60,2)}const Y={G:function(e,t,n){var i=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(i,{width:"abbreviated"});case"GGGGG":return n.era(i,{width:"narrow"});default:return n.era(i,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var i=e.getUTCFullYear(),a=i>0?i:1-i;return n.ordinalNumber(a,{unit:"year"})}return S(e,t)},Y:function(e,t,n,i){var a=D(e,i),r=a>0?a:1-a;return"YY"===t?P(r%100,2):"Yo"===t?n.ordinalNumber(r,{unit:"year"}):P(r,t.length)},R:function(e,t){return P(y(e),t.length)},u:function(e,t){return P(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var i=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(i);case"QQ":return P(i,2);case"Qo":return n.ordinalNumber(i,{unit:"quarter"});case"QQQ":return n.quarter(i,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(i,{width:"narrow",context:"formatting"});default:return n.quarter(i,{width:"wide",context:"formatting"})}},q:function(e,t,n){var i=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(i);case"qq":return P(i,2);case"qo":return n.ordinalNumber(i,{unit:"quarter"});case"qqq":return n.quarter(i,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(i,{width:"narrow",context:"standalone"});default:return n.quarter(i,{width:"wide",context:"standalone"})}},M:function(e,t,n){var i=e.getUTCMonth();switch(t){case"M":case"MM":return x(e,t);case"Mo":return n.ordinalNumber(i+1,{unit:"month"});case"MMM":return n.month(i,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(i,{width:"narrow",context:"formatting"});default:return n.month(i,{width:"wide",context:"formatting"})}},L:function(e,t,n){var i=e.getUTCMonth();switch(t){case"L":return String(i+1);case"LL":return P(i+1,2);case"Lo":return n.ordinalNumber(i+1,{unit:"month"});case"LLL":return n.month(i,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(i,{width:"narrow",context:"standalone"});default:return n.month(i,{width:"wide",context:"standalone"})}},w:function(e,i,a,r){var o=function(e,i){t(1,arguments);var a=n(e),r=E(a,i).getTime()-j(a,i).getTime();return Math.round(r/M)+1}(e,r);return"wo"===i?a.ordinalNumber(o,{unit:"week"}):P(o,i.length)},I:function(e,i,a){var r=function(e){t(1,arguments);var i=n(e),a=L(i).getTime()-T(i).getTime();return Math.round(a/b)+1}(e);return"Io"===i?a.ordinalNumber(r,{unit:"week"}):P(r,i.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):I(e,t)},D:function(e,i,a){var r=function(e){t(1,arguments);var i=n(e),a=i.getTime();i.setUTCMonth(0,1),i.setUTCHours(0,0,0,0);var r=i.getTime(),o=a-r;return Math.floor(o/k)+1}(e);return"Do"===i?a.ordinalNumber(r,{unit:"dayOfYear"}):P(r,i.length)},E:function(e,t,n){var i=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(i,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(i,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(i,{width:"short",context:"formatting"});default:return n.day(i,{width:"wide",context:"formatting"})}},e:function(e,t,n,i){var a=e.getUTCDay(),r=(a-i.weekStartsOn+8)%7||7;switch(t){case"e":return String(r);case"ee":return P(r,2);case"eo":return n.ordinalNumber(r,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,i){var a=e.getUTCDay(),r=(a-i.weekStartsOn+8)%7||7;switch(t){case"c":return String(r);case"cc":return P(r,t.length);case"co":return n.ordinalNumber(r,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var i=e.getUTCDay(),a=0===i?7:i;switch(t){case"i":return String(a);case"ii":return P(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(i,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(i,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(i,{width:"short",context:"formatting"});default:return n.day(i,{width:"wide",context:"formatting"})}},a:function(e,t,n){var i=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(i,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(i,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(i,{width:"narrow",context:"formatting"});default:return n.dayPeriod(i,{width:"wide",context:"formatting"})}},b:function(e,t,n){var i,a=e.getUTCHours();switch(i=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(i,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(i,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(i,{width:"narrow",context:"formatting"});default:return n.dayPeriod(i,{width:"wide",context:"formatting"})}},B:function(e,t,n){var i,a=e.getUTCHours();switch(i=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(i,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(i,{width:"narrow",context:"formatting"});default:return n.dayPeriod(i,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var i=e.getUTCHours()%12;return 0===i&&(i=12),n.ordinalNumber(i,{unit:"hour"})}return q(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):A(e,t)},K:function(e,t,n){var i=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(i,{unit:"hour"}):P(i,t.length)},k:function(e,t,n){var i=e.getUTCHours();return 0===i&&(i=24),"ko"===t?n.ordinalNumber(i,{unit:"hour"}):P(i,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):O(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):N(e,t)},S:function(e,t){return U(e,t)},X:function(e,t,n,i){var a=(i._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return F(a);case"XXXX":case"XX":return H(a);default:return H(a,":")}},x:function(e,t,n,i){var a=(i._originalDate||e).getTimezoneOffset();switch(t){case"x":return F(a);case"xxxx":case"xx":return H(a);default:return H(a,":")}},O:function(e,t,n,i){var a=(i._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+W(a,":");default:return"GMT"+H(a,":")}},z:function(e,t,n,i){var a=(i._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+W(a,":");default:return"GMT"+H(a,":")}},t:function(e,t,n,i){var a=i._originalDate||e;return P(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,i){return P((i._originalDate||e).getTime(),t.length)}};function V(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function B(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}var _={p:B,P:function(e,t){var n,i=e.match(/(P+)(p+)?/)||[],a=i[1],r=i[2];if(!r)return V(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",V(a,t)).replace("{{time}}",B(r,t))}};const R=_;function G(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var z=["D","DD"],X=["YY","YYYY"];function $(e){return-1!==z.indexOf(e)}function Q(e){return-1!==X.indexOf(e)}function J(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var K=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Z=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ee=/^'([^]*?)'?$/,te=/''/g,ne=/[a-zA-Z]/;function ie(e){return e.match(ee)[1].replace(te,"'")}function ae(e,i){t(2,arguments);var a=n(e),r=n(i),o=a.getTime()-r.getTime();return o<0?-1:o>0?1:o}function re(e,i){t(2,arguments);var a=n(e),r=n(i),o=a.getFullYear()-r.getFullYear(),s=a.getMonth()-r.getMonth();return 12*o+s}function oe(e){t(1,arguments);var i=n(e);return i.setHours(23,59,59,999),i}function se(e){t(1,arguments);var i=n(e),a=i.getMonth();return i.setFullYear(i.getFullYear(),a+1,0),i.setHours(23,59,59,999),i}function de(e){t(1,arguments);var i=n(e);return oe(i).getTime()===se(i).getTime()}function ce(e,i){t(2,arguments);var a,r=n(e),o=n(i),s=ae(r,o),d=Math.abs(re(r,o));if(d<1)a=0;else{1===r.getMonth()&&r.getDate()>27&&r.setDate(30),r.setMonth(r.getMonth()-s*d);var c=ae(r,o)===-s;de(n(e))&&1===d&&1===ae(e,o)&&(c=!1),a=s*(d-Number(c))}return 0===a?0:a}function le(e,i){return t(2,arguments),n(e).getTime()-n(i).getTime()}var ue={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(e){return e<0?Math.ceil(e):Math.floor(e)}};function me(e){return e?ue[e]:ue.trunc}function he(e,n,i){t(2,arguments);var a=le(e,n)/1e3;return me(null==i?void 0:i.roundingMethod)(a)}function pe(e){return function(e,t){if(null==e)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in t=t||{})Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}({},e)}var fe=1440,ge=43200;function ve(e,i){t(2,arguments);var a=n(e),r=n(i);return a.getTime()>r.getTime()}class we{container;project;controller;model;menuView;allExpanded;constructor(e){this.wrapper=document.querySelector(".content-wrapper"),this.container=document.createElement("div"),this.container.classList.add("container"),e.menuView&&(this.menuView=e.menuView),this.allExpanded=!1,this.init()}init(){}setController(e){this.controller=e,this.setCurrentProject()}setCurrentProject(){this.project=this.controller.getCurrentProject()}setProject(e){this.project=e}setModel(e){this.model=e}updateProject(){this.project=this.model.getCurrentProject()}render(){this.updateProject(),this.renderMenu(),0===this.project.id?this.renderOverview():this.renderTasksList()}renderMenu(){this.menuView.render()}renderOverview(){this.clearContainer();const e=document.createElement("div");e.classList.add("flex-row");const t=document.createElement("h1");t.classList.add("list-title"),t.textContent="Overview",e.appendChild(t),this.container.appendChild(e);const n=document.createElement("p");n.classList.add("list-description"),n.textContent="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",this.container.appendChild(n);const i=document.createElement("div");i.classList.add("project-grid-wrapper");const a=document.createElement("div");a.classList.add("project-grid"),this.model.getProjectOverview().map((e=>{a.appendChild(this.getProjectGridItem(e))})),a.appendChild(this.getNewProjectGridButton()),i.appendChild(a),this.container.appendChild(i),this.wrapper.appendChild(this.container)}getProjectGridItem(e){const t=document.createElement("div");t.classList.add("project-grid-item"),t.setAttribute("data-project-index",e.id);const n=document.createElement("div");n.classList.add("bg"),t.appendChild(n);const i=document.createElement("div");i.classList.add("controls","project-delete-btn");const a=document.createElement("i");a.classList.add("far","fa-trash-alt","icon"),i.appendChild(a),t.appendChild(i);const r=document.createElement("div");r.classList.add("text");const o=document.createElement("h2");o.classList.add("project-title"),o.textContent=e.name,r.appendChild(o);const s=document.createElement("span");return s.classList.add("task-count"),s.textContent=`${e.tasks} ${1===e.tasks?"task":"tasks"}`,r.appendChild(s),t.appendChild(r),t}getNewProjectGridButton(){const e=document.createElement("div");e.classList.add("project-grid-item","new-project-btn");const t=document.createElement("div");t.classList.add("bg"),e.appendChild(t);const n=document.createElement("div");n.classList.add("text");const i=document.createElement("h2");i.classList.add("project-title"),i.innerHTML="<i class='fa fa-plus'></i>",n.appendChild(i);const a=document.createElement("span");return a.classList.add("task-count"),a.textContent="New project",n.appendChild(a),e.appendChild(n),e}renderTasksList(){this.clearContainer(),this.container.classList.add("fade-in-animation"),this.container.appendChild(this.createProjectTitleAndMenu()),this.container.appendChild(this.createProjectDescription()),this.container.appendChild(this.createTasks()),this.wrapper.removeChild(document.querySelector(".container")),this.wrapper.appendChild(this.container)}clearContainer(){this.container.textContent=""}createProjectTitleAndMenu(){const e=document.createElement("div");e.classList.add("flex-row");const t=document.createElement("h1");t.classList.add("list-title"),t.textContent=this.project.title;const n=document.createElement("div");n.classList.add("push-right","align-center");const i=document.createElement("i");i.classList.add("far","fa-edit","icon","project-edit-btn"),i.setAttribute("data-project-id",this.model.getCurrentProjectId()),n.appendChild(i);const a=document.createElement("i");return a.classList.add("far","fa-trash-alt","icon","project-delete-btn"),a.setAttribute("data-project-id",this.model.getCurrentProjectId()),n.appendChild(a),e.appendChild(t),e.appendChild(n),e}createProjectDescription(){const e=document.createElement("p");return e.classList.add("list-description"),e.textContent=this.project.description,e}createTasks(){const e=document.createElement("div");e.classList.add("tasks-wrapper");const t=document.createElement("div");t.classList.add("flex-row");const n=document.createElement("div");n.classList.add("tasks-title"),n.textContent="Todo",t.appendChild(n);const i=document.createElement("div");i.classList.add("push-right");const a=document.createElement("span");if(a.classList.add("font-sm"),a.id="expand-all-hide-all-span",this.allExpanded?a.textContent="Collapse all":a.textContent="Expand all",i.appendChild(a),t.appendChild(i),e.appendChild(t),this.project.tasks.length>0){const t=document.createElement("form");for(let e of this.project.tasks)t.appendChild(this.getTaskDOMElement(e));e.appendChild(t)}else{const t=document.createElement("h1");t.classList.add("no-tasks-message"),t.textContent="No tasks to do, enjoy your brake 😄",e.appendChild(t)}if(this.project.done&&this.project.done.length>0){const t=document.createElement("div");t.classList.add("tasks-title"),t.textContent="Done";const n=document.createElement("form");for(let e of this.project.done)n.appendChild(this.getTaskDOMElement(e));e.appendChild(t),e.appendChild(n)}return e}getTaskDOMElement(e){let i,r;switch(e.priority){case a.DEFAULT:i="bg-light",r="priority-default-border";break;case a.HIGH:i="bg-danger",r="priority-high-border";break;case a.MEDIUM:i="bg-medium",r="priority-medium-border";break;case a.LOW:i="bg-low",r="priority-low-border"}const s=document.createElement("div");s.classList.add("task",r),s.setAttribute("data-index",e.id);const d=document.createElement("div");d.classList.add("task-content");const c=document.createElement("input");c.setAttribute("type","checkbox"),e.isComplete&&c.setAttribute("checked",""),c.id=`task-${e.id}`,c.setAttribute("data-id",e.id),d.appendChild(c);const l=document.createElement("div");l.classList.add("checkbox-wrapper");const u=document.createElement("label");u.setAttribute("for",`task-${e.id}`);const m=document.createElement("span");m.classList.add("checkbox");const h=document.createElement("span");h.classList.add("check"),m.appendChild(h),u.appendChild(m),l.appendChild(u),d.appendChild(l);const p=document.createElement("div");p.classList.add("task-text");const f=document.createElement("div");f.classList.add("title"),f.textContent=e.title,p.appendChild(f);const w=document.createElement("span");w.classList.add("overdue-marker"),w.textContent="Overdue",e.isOverdue()&&f.appendChild(w);const k=document.createElement("div");k.classList.add("task-details"),e.isCollapsed?k.classList.add("hide"):k.classList.remove("hide");const L=document.createElement("div");L.classList.add("description","font-sm"),L.textContent=e.description;const y=document.createElement("div");y.classList.add("flex-row");const T=document.createElement("div");T.classList.add("priority",i,"font-sm"),T.textContent=class{static capitalize(e){return e.charAt(0).toUpperCase()+e.slice(1)}}.capitalize(e.priority);const b=document.createElement("div");b.classList.add("due-date","font-sm"),e.dueDate=new Date(e.dueDate);const E=function(e,i,a){t(2,arguments);var r=String(i),s=a||{},d=s.locale||g,c=d.options&&d.options.firstWeekContainsDate,l=null==c?1:v(c),u=null==s.firstWeekContainsDate?l:v(s.firstWeekContainsDate);if(!(u>=1&&u<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=d.options&&d.options.weekStartsOn,h=null==m?0:v(m),p=null==s.weekStartsOn?h:v(s.weekStartsOn);if(!(p>=0&&p<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!d.localize)throw new RangeError("locale must contain localize property");if(!d.formatLong)throw new RangeError("locale must contain formatLong property");var f=n(e);if(!o(f))throw new RangeError("Invalid time value");var w=G(f),k=C(f,w),L={firstWeekContainsDate:u,weekStartsOn:p,locale:d,_originalDate:f};return r.match(Z).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,R[t])(e,d.formatLong,L):e})).join("").match(K).map((function(t){if("''"===t)return"'";var n=t[0];if("'"===n)return ie(t);var a=Y[n];if(a)return!s.useAdditionalWeekYearTokens&&Q(t)&&J(t,i,e),!s.useAdditionalDayOfYearTokens&&$(t)&&J(t,i,e),a(k,t,d.localize,L);if(n.match(ne))throw new RangeError("Format string contains an unescaped latin alphabet character `"+n+"`");return t})).join("")}(e.dueDate,"EEEE d LLLL y");let D;const j=function(e,i){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};t(2,arguments);var r=a.locale||g;if(!r.formatDistance)throw new RangeError("locale must contain formatDistance property");var o=ae(e,i);if(isNaN(o))throw new RangeError("Invalid time value");var s,d,c=pe(a);c.addSuffix=Boolean(a.addSuffix),c.comparison=o,o>0?(s=n(i),d=n(e)):(s=n(e),d=n(i));var l,u=he(d,s),m=(G(d)-G(s))/1e3,h=Math.round((u-m)/60);if(h<2)return a.includeSeconds?u<5?r.formatDistance("lessThanXSeconds",5,c):u<10?r.formatDistance("lessThanXSeconds",10,c):u<20?r.formatDistance("lessThanXSeconds",20,c):u<40?r.formatDistance("halfAMinute",null,c):u<60?r.formatDistance("lessThanXMinutes",1,c):r.formatDistance("xMinutes",1,c):0===h?r.formatDistance("lessThanXMinutes",1,c):r.formatDistance("xMinutes",h,c);if(h<45)return r.formatDistance("xMinutes",h,c);if(h<90)return r.formatDistance("aboutXHours",1,c);if(h<fe){var p=Math.round(h/60);return r.formatDistance("aboutXHours",p,c)}if(h<2520)return r.formatDistance("xDays",1,c);if(h<ge){var f=Math.round(h/fe);return r.formatDistance("xDays",f,c)}if(h<86400)return l=Math.round(h/ge),r.formatDistance("aboutXMonths",l,c);if((l=ce(d,s))<12){var v=Math.round(h/ge);return r.formatDistance("xMonths",v,c)}var w=l%12,C=Math.floor(l/12);return w<3?r.formatDistance("aboutXYears",C,c):w<9?r.formatDistance("overXYears",C,c):r.formatDistance("almostXYears",C+1,c)}(e.dueDate,new Date);D=ve(new Date,e.dueDate)?`Overdue ${j}`:`Due in ${j}`,b.innerHTML=`${D} <span class='date'>(${E})</span>`,k.appendChild(L),y.appendChild(T),y.appendChild(b),k.appendChild(y),p.appendChild(k),d.appendChild(p),s.appendChild(d);const M=document.createElement("div");M.classList.add("task-menu");const P=document.createElement("i");P.classList.add("icon","chevron"),e.isCollapsed?P.classList.add("fas","fa-chevron-down"):P.classList.add("fas","fa-chevron-up"),M.appendChild(P);const S=document.createElement("i");S.classList.add("fas","fa-ellipsis-v","icon","more"),M.appendChild(S);const x=document.createElement("div");x.classList.add("more-menu","hide");const I=document.createElement("ul"),q=document.createElement("li");q.classList.add("more-menu-option","edit"),q.innerHTML="<i class='far fa-edit icon'></i> Edit";const A=document.createElement("li");return A.classList.add("more-menu-option","delete"),A.innerHTML="<i class='far fa-trash-alt icon'></i> Delete",I.appendChild(q),I.appendChild(A),x.appendChild(I),M.appendChild(x),s.appendChild(M),s}}class Ce{createdDate;title;description;dueDate;priority;isComplete;isCollapsed;log;notes;checklist;constructor(e,t,n,a){this.id=class{static nextIndex(){return i++}static reset(){i=0}}.nextIndex(),this.title=e,this.description=t,this.dueDate=n,this.priority=a,this.createdDate=new Date,this.isComplete=!1,this.isCollapsed=!0,this.notes=null,this.checklist=[],this.log=[]}isComplete(){return!0===isComplete}markAsComplete(){this.isComplete=!0}markAsNotComplete(){this.isComplete=!1}toggleComplete(){this.isComplete=!this.isComplete}setIsCollapsed(e){this.isCollapsed=e}toggleIsCollapsed(){this.isCollapsed=!this.isCollapsed}getDOMElement(){return(new we).getTaskDOMElement(this)}isOverdue(){return function(e,i){t(2,arguments);var a=n(e),r=n(i);return a.getTime()<r.getTime()}(this.dueDate,new Date)&&!this.isComplete}}const ke={projects:[{id:0,title:"Overview",description:"Look at all your projects and choose which one you want to check"},{id:1,title:"Website redesign",description:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ",tasks:[new Ce("Update about page header","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,1,20),a.DEFAULT),new Ce("Fix bug in deployment script","Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,19),a.MEDIUM),new Ce("Update contact page header","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,1,20),a.DEFAULT),new Ce("About page wording","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,22),a.HIGH),new Ce("New landing page layout","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,17),a.MEDIUM),new Ce("Update global iconset","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,1,27),a.LOW),new Ce("New case study thumbnails","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,28),a.DEFAULT)],done:[]},{id:2,title:"Groceries",description:"List of groceries to buy on the nearest trip to the shop. Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit.",tasks:[new Ce("Buy Pizza","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,30),a.HIGH),new Ce("Tomatoes","Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,30),a.DEFAULT)],done:[]},{id:3,title:"Workout",description:"Exercises to do to stay fit. Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit.",tasks:[new Ce("50 Brzuszków","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,30),a.DEFAULT),new Ce("50 Pompek","Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,30),a.DEFAULT)],done:[]},{id:4,title:"Reading",description:"List of books to read. Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit.",tasks:[new Ce("Lord of The Rings: The Fellowship of the Ring","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,30),a.MEDIUM),new Ce("Do Androids Dream of Electric Sheep","Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,30),a.LOW)],done:[]}],logs:[]};class Le{static DARK_MODE_DEFAULT=!1;static LOAD_WITH_SAMPLE_DATA=!0;static DEFAULT_PROJECT_ID=0;static LOCAL_STORAGE_KEY="todo-data";static NOTIFICATION_HIDE_ANIMATION_DURATION=500;static NOTIFICATION_SHOW_TIME=4e3}let ye={projects:[{id:0,title:"Overview",description:"Look at all your projects and choose which one you want to check"}]};class Te{currentProject;currentProjectId;projects;data;projectIDSupplier;constructor(){this.data=ke,this.projects=this.data.projects,this.currentProjectId=Le.DEFAULT_PROJECT_ID,this.projectIDSupplier=new e,this.init()}init(){if(this.retrieveFromLocalStorage()?console.log("Loaded data from LocalStorage"):(console.log("LocalStorage empty!"),Le.LOAD_WITH_SAMPLE_DATA?(this.data=ke,this.saveToLocalStorage()):this.data=ye),this.projects&&this.projects.length>0){const e=this.projects.length;this.projectIDSupplier.setStartingValue(e)}this.currentProject=this.getInitialProject()}setCurrentProject(e){this.currentProject=e}setCurrentProjectId(e){this.currentProject=this.projects.filter((t=>t.id===e))[0],this.currentProjectId=parseInt(e),this.setCurrentProject(this.getProjectById(this.currentProjectId))}getCurrentProject(){return this.currentProject}getCurrentProjectId(){return this.currentProject.id}getProjects(){return this.data.projects}getData(){return this.data}getProjectById(e){e=parseInt(e);return this.data.projects.filter((t=>t.id===e))[0]||-1}getProjectOverview(){let e=[];return this.data.projects.map((t=>{0!==t.id&&e.push({name:t.title,id:t.id,tasks:this.calculateTasks(t.tasks)})})),e}getProjectsCount(){return this.getProjectOverview().length}calculateTasks(e){return e.reduce(((e,t)=>e+(t.isComplete?0:1)),0)}getInitialProject(){return this.projects.filter((e=>e.id===Le.DEFAULT_PROJECT_ID))[0]}addProject(e){e.id=this.projectIDSupplier.getID(),this.projects.push(e),this.saveToLocalStorage()}deleteProjectById(e){e=parseInt(e),this.currentProject.id===e&&this.setCurrentProject(this.getProjectById(Le.DEFAULT_PROJECT_ID));const t=this.getProjectById(e);if(-1!==t){const e=this.projects.indexOf(t);return this.projects.splice(e,1),this.saveToLocalStorage(),!0}return console.error(`Project with id ${e} not found`),!1}updateProject(e){let t=this.getProjectById(e.id);t?(t.title=e.title,t.description=e.description,this.saveToLocalStorage()):console.error("Project not found")}getTaskById(e){e=parseInt(e);const t=this.currentProject.tasks.filter((t=>t.id===e))[0];if(t)return t;{const t=this.currentProject.done.filter((t=>t.id===e))[0];if(t)return t;console.error("Model.getTaskById(): Done task not found")}}setTaskAsComplete(e){e.isComplete=!0,this.saveToLocalStorage()}addTask(e){this.currentProject.tasks.unshift(e),this.saveToLocalStorage()}setTaskIsComplete(e,t){let n,i;!0===t?(n=this.currentProject.tasks,i=this.currentProject.done):(n=this.currentProject.done,i=this.currentProject.tasks);const a=n.filter((t=>t.id===e))[0];a.isComplete=t;const r=n.indexOf(a);n.splice(r,1),i.unshift(a),this.saveToLocalStorage()}deleteTaskById(e){const t=this.getTaskById(e);if(t){const e=this.currentProject.tasks.indexOf(t);if(-1!==e)this.currentProject.tasks.splice(e,1),console.log("task deleted");else{const e=this.currentProject.done.indexOf(t);-1!=e&&(this.currentProject.done.splice(e,1),console.log("done task deleted"))}this.saveToLocalStorage()}}updateTask(e){const t=e.id;if(t){let n=-1;for(let e=0;e<this.currentProject.tasks.length;e++)this.currentProject.tasks[e].id===t&&(n=e);if(-1!==n)this.currentProject.tasks.splice(n,1,e);else{for(let i=0;i<this.currentProject.done.length;i++)this.currentProject.done[i].id===t&&(n=i,e.isComplete=!0);this.currentProject.done.splice(n,1,e)}this.saveToLocalStorage()}}saveToLocalStorage(){localStorage.setItem(Le.LOCAL_STORAGE_KEY,JSON.stringify(this.data)),console.log("Saved to localStorage")}retrieveFromLocalStorage(){const e=localStorage.getItem(Le.LOCAL_STORAGE_KEY);if(e){const t=JSON.parse(e);return this.restoreTaskMethods(t),this.data=t,this.projects=this.data.projects,!0}return!1}clearLocalStorage(){localStorage.removeItem(Le.LOCAL_STORAGE_KEY)}restoreTaskMethods(e){for(let t of e.projects)if(0!==t.id){for(let e of t.tasks)e=Object.setPrototypeOf(e,Ce.prototype),e.dueDate=new Date(e.dueDate),e.createdDate=new Date(e.createdDate);for(let e of t.done)e=Object.setPrototypeOf(e,Ce.prototype),e.dueDate=new Date(e.dueDate),e.createdDate=new Date(e.createdDate)}}}class be{validationMessages;isFormEmpty;validTask;form=document.querySelector(".new-task-modal");action;constructor(){this.validTask={},this.isFormEmpty=!0,this.action="create"}init(){this.addBlurEventListeners(),this.resetValidationMessages()}reset(){this.resetValidationMessages()}resetValidationMessages(){this.validationMessages={title:[],description:[],dueDate:[]},this.clearValidationMessages()}isValid(){this.validateInputs();for(let e in this.validationMessages)if(0!==this.validationMessages[e].length)return!1;return!0}isValidEdit(){this.validateEdit();for(let e in this.validationMessages)if(0!==this.validationMessages[e].length)return!1;return!0}validateInputs(){this.validateTitleInput(),this.validateDescriptionInput(),this.validateDueDateInput()}validateEdit(){this.validateTitleInput(),this.validateDescriptionInput(),this.validatePastDueDateInput()}validateTitleInput(){const e=this.form.querySelector("#task-title").value,t=this.form.querySelector("#form-label-title .validation-msg");if(t.textContent="",e)this.validTask.title=e;else{const e="*  Please enter task title";this.validationMessages.title.includes(e)||this.validationMessages.title.push(e),t.textContent=e}}validateDescriptionInput(){const e=this.form.querySelector("#task-description").value,t=this.form.querySelector("#form-label-description .validation-msg");if(t.textContent="",e)this.validTask.description=e;else{const e="* Please enter task description";this.validationMessages.description.includes(e)||this.validationMessages.description.push(e),t.textContent=e}}validateDueDateInput(){const e=this.form.querySelector("#task-due-date").value,t=this.form.querySelector("#form-label-due-date .validation-msg");if(t.textContent="",e&&ve(new Date(e),new Date))this.validTask.dueDate=new Date(e);else{const e="* Please enter task due date that's in the future";this.validationMessages.dueDate.includes(e)||this.validationMessages.dueDate.push(e),t.textContent=e}}validatePastDueDateInput(){const e=this.form.querySelector("#task-due-date").value,t=this.form.querySelector("#form-label-due-date .validation-msg");if(t.textContent="",e)this.validTask.dueDate=new Date(e);else{const e="* Please enter task due date";this.validationMessages.dueDate.includes(e)||this.validationMessages.dueDate.push(e),t.textContent=e}}addBlurEventListeners(){this.form.querySelector("#task-title").addEventListener("blur",(e=>{this.validateTitleInput()})),this.form.querySelector("#task-description").addEventListener("blur",(e=>{this.validateDescriptionInput()})),this.form.querySelector("#task-due-date").addEventListener("input",(e=>{console.log(this.action),this.action.includes("create")?this.validateDueDateInput():this.action.includes("edit")&&this.validatePastDueDateInput()}))}clearValidationMessages(){const e=document.querySelectorAll(".validation-msg");for(let t of e)t.textContent=""}getTask(){const e=new Ce(this.validTask.title,this.validTask.description,this.validTask.dueDate);return e.priority=this.getPriorityValue(),e}getPriorityValue(){return this.form.querySelector('#new-task-form input[type="radio"]:checked').value}}class Ee{validationMessages;isFormEmpty;validProject;form=document.querySelector("#new-project-modal-wrapper .new-task-modal");constructor(){this.validProject={},this.isFormEmpty=!0,this.init()}init(){this.resetValidationMessages(),this.addBlurEventListeners()}resetValidationMessages(){this.validationMessages={title:[],description:[]},this.clearValidationMessages()}isValid(){this.validateInputs();for(let e in this.validationMessages)if(0!==this.validationMessages[e].length)return!1;return!0}validateInputs(){this.validateTitleInput(),this.validateDescriptionInput()}validateTitleInput(){const e=this.form.querySelector("#project-title").value,t=this.form.querySelector("#form-label-project-title .validation-msg");if(t.textContent="",e)this.validProject.title=e;else{const e="*  Please enter project title";this.validationMessages.title.includes(e)||this.validationMessages.title.push(e),t.textContent=e}}validateDescriptionInput(){const e=this.form.querySelector("#project-description").value,t=this.form.querySelector("#form-label-project-description .validation-msg");if(t.textContent="",e)this.validProject.description=e;else{const e="* Please enter project description";this.validationMessages.description.includes(e)||this.validationMessages.description.push(e),t.textContent=e}}addBlurEventListeners(){this.form.querySelector("#project-title").addEventListener("blur",(e=>{this.validateTitleInput()})),this.form.querySelector("#project-description").addEventListener("blur",(e=>{this.validateDescriptionInput()}))}clearValidationMessages(){const e=document.querySelectorAll("#new-project-modal-wrapper .validation-msg");for(let t of e)t.textContent=""}getProject(){const e={title:this.validProject.title,description:this.validProject.description,tasks:[],done:[]},t=document.querySelector("#new-project-modal-wrapper #new-project-submit");return t.getAttribute("data-action").includes("edit")&&(e.id=parseInt(t.getAttribute("data-id"))),e}}class De{content;taskController;view;model;formValidation;constructor(e){this.content=document.querySelector(".wrapper"),this.formValidation=new be,this.formValidation.init(),this.projectFormValidation=new Ee,e.view&&(this.view=e.view),e.model&&(this.model=e.model)}init(){this.attachEventListeners(),this.chooseTheme(),this.render()}getCurrentProject(){return this.model.getCurrentProject()}changeCurrentProject(e){this.model.setCurrentProjectId(e),this.render()}chooseTheme(){const e=document.querySelector("body");Le.DARK_MODE_DEFAULT?e.classList.add("dark-mode"):e.classList.remove("dark-mode")}render(){this.view.render();const e=document.querySelector(".new-task-btn");setTimeout((()=>{0!==this.model.getCurrentProjectId()?(this.addNewListElementsEventListeners(),e.classList.remove("hide")):(this.addOverviewPageEventListeners(),e.classList.add("hide"))}),100)}attachEventListeners(){this.addShowNewTaskModalEventListener(),this.addHideNewTaskModalEventListener(),this.addNewTaskSubmitListener(),this.addToggleDarkModeClickListener(),this.addHideNewProjectModalEventListener(),this.addNewProjectSubmitListener(),this.addHideDeleteTaskModalEventListener(),this.addConfirmDeleteTaskButtonClickListener(),this.addConfirmDeleteProjectButtonClickListener()}addNewListElementsEventListeners(){this.addToggleCompleteEventListener(),this.addTaskDetailsToggleEventListeners(),this.addExpandHideAllEventListener(),this.addToggleMoreMenuListener(),this.addDeleteTaskClickListener(),this.addEditTaskClickListener(),this.addDeleteProjectClickListener(),this.addEditProjectClickListener()}addOverviewPageEventListeners(){this.addProjectTileClickListener(),this.addNewProjectButtonListener()}addToggleCompleteEventListener(){const e=document.querySelectorAll('input[type="checkbox"]');for(let t of e)t.addEventListener("change",(e=>{const t=e.target.getAttribute("data-id");this.toggleTaskComplete(t,e.target.checked)}))}toggleTaskComplete(e,t){this.model.setTaskIsComplete(parseInt(e),t),this.render()}addTaskDetailsToggleEventListeners(){const e=document.querySelectorAll(".task-menu .icon.chevron");for(let t of e)t.addEventListener("click",(e=>{const t=e.target.parentNode.parentNode;this.toggleTaskDetails(t)}))}toggleTaskDetails(e){if(e){e.querySelector(".task-details").classList.toggle("hide");const t=e.querySelector(".icon");t.classList.toggle("fa-chevron-up"),t.classList.toggle("fa-chevron-down"),this.model.getTaskById(e.getAttribute("data-index")).toggleIsCollapsed()}}addExpandHideAllEventListener(){const e=document.querySelector("#expand-all-hide-all-span");e.addEventListener("click",(t=>{const n=document.querySelectorAll(".task");if(n){if(new String(e.innerText.trim()).includes("Expand all")){this.view.allExpanded=!0;for(let e of n)this.showTaskDetails(e)}else{this.view.allExpanded=!1;for(let e of n)this.hideTaskDetails(e)}this.render()}}))}showTaskDetails(e){this.model.getTaskById(e.getAttribute("data-index")).setIsCollapsed(!1);const t=e.querySelector(".task-menu .icon");t.classList.remove("fa-chevron-down"),t.classList.add("fa-chevron-up")}hideTaskDetails(e){this.model.getTaskById(e.getAttribute("data-index")).setIsCollapsed(!0);const t=e.querySelector(".task-menu .icon");t.classList.remove("fa-chevron-up"),t.classList.add("fa-chevron-down")}addShowNewTaskModalEventListener(){const e=document.querySelector(".new-task-btn"),t=document.querySelector("#new-task-modal-wrapper");e.addEventListener("click",(e=>{this.showNewTaskModal(t)}))}showNewTaskModal(e){this.resetModalForm(),this.formValidation.reset(),e.classList.remove("hide")}resetModalForm(){const e=document.querySelector("#new-task-modal-wrapper");e.querySelector(".title").textContent="Add new task";const t=e.querySelector("#new-task-submit");t.textContent="Create",t.setAttribute("data-action","create"),t.setAttribute("data-index",-1),e.querySelector("#task-due-date").value="",document.querySelector("#new-task-form").reset()}addHideNewTaskModalEventListener(){document.querySelector("#new-task-modal-wrapper").addEventListener("click",(e=>{e.stopPropagation(),e.target.classList.contains("modal-wrapper")&&this.animateModalClosing()})),document.querySelector(".modal-wrapper .close-btn").addEventListener("click",(e=>{this.animateModalClosing()}))}animateModalClosing(){const e=document.querySelector("#new-task-modal-wrapper"),t=e.querySelector(".new-task-modal");t.classList.add("modal-dissmis-animation"),e.classList.remove("wrapper-fade-in-animation"),e.classList.add("wrapper-fade-out-animation"),setTimeout((()=>{e.classList.add("hide"),t.classList.remove("modal-dissmis-animation"),e.classList.remove("wrapper-fade-out-animation"),e.classList.add("wrapper-fade-in-animation")}),600)}addNewTaskSubmitListener(){document.querySelector("#new-task-submit").addEventListener("click",(e=>{e.preventDefault();const t=e.target.getAttribute("data-action");if(t.includes("create")){if(this.formValidation.action=t,this.formValidation.isValid()){const e=this.formValidation.getTask();this.submitNewTaskModal(e),this.animateModalClosing(),this.formValidation.reset()}}else if(t.includes("edit")){this.formValidation.action=t;const n=e.target.getAttribute("data-index");if(this.formValidation.isValidEdit()){const e=this.formValidation.getTask();e.id=parseInt(n),this.submitEditTask(e),this.animateModalClosing(),this.formValidation.reset()}}}))}submitNewTaskModal(e){this.model.addTask(e),this.render()}submitEditTask(e){this.model.updateTask(e),this.render()}addToggleMoreMenuListener(){const e=document.querySelectorAll(".task-menu .more");for(let t of e)t.addEventListener("click",(e=>{const n=t.nextElementSibling;setTimeout((()=>{n.classList.toggle("hide")}),50)}));document.addEventListener("click",(e=>{if(!e.target.classList.contains("more-menu")&&!e.target.classList.contains("more-menu-option")){const e=document.querySelectorAll(".more-menu:not(.hide)");for(let t of e)t.classList.add("hide")}}))}addDeleteTaskClickListener(){const e=document.querySelectorAll(".more-menu-option.delete");for(let t of e){const e=t.parentElement.parentElement.parentElement.parentElement.getAttribute("data-index");t.addEventListener("click",this.handleDeleteTask.bind(this,e))}}handleDeleteTask(e){document.querySelectorAll(".task-menu .more-menu").forEach((e=>{e.classList.add("hide")})),this.confirmDeletingTask(parseInt(e))&&this.model.deleteTask(e)}confirmDeletingTask(e){return this.fillDeleteModalWithTaskData(e),this.showConfirmDeleteModal(),!1}fillDeleteModalWithTaskData(e){const t=this.model.getTaskById(e),n=document.querySelector("#confirm-task-delete-modal");n.querySelector(".task-title").textContent=t.title,n.querySelector("#delete-confirm").setAttribute("data-id",e),n.querySelector("#delete-confirm").setAttribute("data-delete-type","task")}showConfirmDeleteModal(){document.querySelector("#confirm-task-delete-modal").classList.remove("hide")}addConfirmDeleteTaskButtonClickListener(){const e=document.querySelector("#confirm-task-delete-modal #delete-confirm");e.addEventListener("click",(t=>{const n=e.getAttribute("data-delete-type");if(n.includes("project"));else if(n.includes("task")){const t=e.getAttribute("data-id");this.model.deleteTaskById(t)}this.animateDeleteTaskModalClosing(),this.render()}))}addHideDeleteTaskModalEventListener(){const e=document.querySelector("#confirm-task-delete-modal");e.addEventListener("click",(e=>{e.stopPropagation(),e.target.classList.contains("modal-wrapper")&&this.animateDeleteTaskModalClosing()})),document.querySelector("#confirm-task-delete-modal .close-btn").addEventListener("click",(e=>{this.animateDeleteTaskModalClosing()})),e.querySelector("#delete-cancel").addEventListener("click",(e=>{this.animateDeleteTaskModalClosing()}))}animateDeleteTaskModalClosing(){const e=document.querySelector("#confirm-task-delete-modal"),t=e.querySelector(".new-task-modal");t.classList.add("modal-dissmis-animation"),e.classList.remove("wrapper-fade-in-animation"),e.classList.add("wrapper-fade-out-animation"),setTimeout((()=>{e.classList.add("hide"),t.classList.remove("modal-dissmis-animation"),e.classList.remove("wrapper-fade-out-animation"),e.classList.add("wrapper-fade-in-animation")}),600)}addEditTaskClickListener(){const e=document.querySelectorAll(".more-menu-option.edit");for(let t of e){const e=t.parentElement.parentElement.parentElement.parentElement.getAttribute("data-index");t.addEventListener("click",this.handleEditTask.bind(this,e))}}handleEditTask(e){const t=document.querySelector("#new-task-modal-wrapper");this.formValidation.reset(),this.fillFormWithTaskData(e),t.classList.remove("hide")}fillFormWithTaskData(e){const i=this.model.getTaskById(e),r=document.querySelector("#new-task-modal-wrapper");r.querySelector(".title").textContent="Edit task",r.querySelector("#task-title").value=i.title,r.querySelector("#task-description").value=i.description;const o=r.querySelectorAll('input[type="radio"]');switch(i.priority){case a.DEFAULT:o[0].checked=!0;break;case a.LOW:o[1].checked=!0;break;case a.MEDIUM:o[2].checked=!0;break;case a.HIGH:o[3].checked=!0}const s=r.querySelector("#task-due-date"),d=function(e,i){t(1,arguments);var a=n(e);if(isNaN(a.getTime()))throw new RangeError("Invalid time value");var r=null!=i&&i.format?String(i.format):"extended",o=null!=i&&i.representation?String(i.representation):"complete";if("extended"!==r&&"basic"!==r)throw new RangeError("format must be 'extended' or 'basic'");if("date"!==o&&"time"!==o&&"complete"!==o)throw new RangeError("representation must be 'date', 'time', or 'complete'");var s="",d="",c="extended"===r?"-":"",l="extended"===r?":":"";if("time"!==o){var u=P(a.getDate(),2),m=P(a.getMonth()+1,2),h=P(a.getFullYear(),4);s="".concat(h).concat(c).concat(m).concat(c).concat(u)}if("date"!==o){var p=a.getTimezoneOffset();if(0!==p){var f=Math.abs(p),g=P(Math.floor(f/60),2),v=P(f%60,2);d="".concat(p<0?"+":"-").concat(g,":").concat(v)}else d="Z";var w=""===s?"":"T",C=[P(a.getHours(),2),P(a.getMinutes(),2),P(a.getSeconds(),2)].join(l);s="".concat(s).concat(w).concat(C).concat(d)}return s}(i.dueDate,{representation:"date"});s.value=d;const c=r.querySelector("#new-task-submit");c.textContent="Edit",c.setAttribute("data-action","edit"),c.setAttribute("data-index",i.id)}addToggleDarkModeClickListener(){const e=document.querySelector(".dark-mode-icon");e?e.addEventListener("click",(e=>{document.querySelector("body").classList.toggle("dark-mode")})):console.error("Dark-mode switch button not found")}addProjectTileClickListener(){document.querySelectorAll(".project-grid-item:not(.new-project-btn)").forEach((e=>{e.addEventListener("click",(e=>{e.stopPropagation();const t=e.target;if(t.classList.contains("bg")){const e=t.parentElement.getAttribute("data-project-index");this.changeCurrentProject(e)}else{const e=t.parentElement.parentElement.getAttribute("data-project-index");this.showConfirmDeleteProjectModal(e)}}))}))}addNewProjectButtonListener(){document.querySelectorAll(".new-project-btn").forEach((e=>{e.addEventListener("click",(e=>{this.openNewProjectModal()}))}))}openNewProjectModal(){this.resetNewProjectModalForm(),this.showProjectModal()}showProjectModal(){document.querySelector("#new-project-modal-wrapper").classList.remove("hide")}resetNewProjectModalForm(){document.querySelector("#new-project-form").reset();const e=document.querySelector("#new-project-modal-wrapper");e.querySelector(".title").textContent="Add new project";const t=e.querySelector("#new-project-submit");t.textContent="Create",t.setAttribute("data-action","create")}addHideNewProjectModalEventListener(){document.querySelector("#new-project-modal-wrapper").addEventListener("click",(e=>{e.stopPropagation(),e.target.classList.contains("modal-wrapper")&&this.animateNewProjectModalClosing()})),document.querySelector("#new-project-modal-wrapper .close-btn").addEventListener("click",(e=>{this.animateNewProjectModalClosing()}))}animateNewProjectModalClosing(){const e=document.querySelector("#new-project-modal-wrapper"),t=e.querySelector(".new-task-modal");t.classList.add("modal-dissmis-animation"),e.classList.remove("wrapper-fade-in-animation"),e.classList.add("wrapper-fade-out-animation"),setTimeout((()=>{e.classList.add("hide"),t.classList.remove("modal-dissmis-animation"),e.classList.remove("wrapper-fade-out-animation"),e.classList.add("wrapper-fade-in-animation")}),600)}addNewProjectSubmitListener(){document.querySelector("#new-project-submit").addEventListener("click",(e=>{if(e.preventDefault(),this.projectFormValidation.init(),this.projectFormValidation.isValid()){const t=this.projectFormValidation.getProject();e.target.getAttribute("data-action").includes("create")?this.submitNewProjectModal(t):e.target.getAttribute("data-action").includes("edit")&&this.editProjectDetails(t),this.animateNewProjectModalClosing()}}))}submitNewProjectModal(e){this.model.addProject(e),this.render()}showConfirmDeleteProjectModal(e){this.fillDeleteModalWithProjectData(e),this.showConfirmDeleteModal()}fillDeleteModalWithProjectData(e){const t=document.querySelector("#confirm-task-delete-modal");t.querySelector(".title").textContent="Delete project?";const n=this.model.getProjectById(e).title;t.querySelector("p").innerHTML=`Delete project <span class="task-title">${n}</span>?`;const i=t.querySelector("#delete-confirm");i.setAttribute("data-id",e),i.setAttribute("data-delete-type","project")}addConfirmDeleteProjectButtonClickListener(){document.querySelector("#delete-confirm").addEventListener("click",(e=>{if(e.target.getAttribute("data-delete-type").includes("project")){const t=e.target.getAttribute("data-id");this.model.deleteProjectById(t)?(this.animateDeleteTaskModalClosing(),this.render()):console.error("Error while deleting project")}else console.error("Deleting project but task id given")}))}addDeleteProjectClickListener(){document.querySelector(".project-delete-btn").addEventListener("click",(e=>{const t=e.target.getAttribute("data-project-id");this.showConfirmDeleteProjectModal(t)}))}addEditProjectClickListener(){document.querySelector(".push-right .fa-edit").addEventListener("click",(e=>{this.openEditProjectModal(e.target.getAttribute("data-project-id"))}))}openEditProjectModal(e){this.fillFormWithProjectData(e),this.showProjectModal()}fillFormWithProjectData(e){const t=this.model.getProjectById(e),n=document.querySelector("#new-project-modal-wrapper");n.querySelector(".title").textContent="Edit project",n.querySelector("#project-title").value=t.title,n.querySelector("#project-description").value=t.description;const i=n.querySelector("#new-project-submit");i.textContent="Edit",i.setAttribute("data-action","edit"),i.setAttribute("data-id",t.id)}editProjectDetails(e){this.model.updateProject(e),this.render()}}class je{model;controller;constructor(e){e.model&&(this.model=e.model)}setController(e){this.controller=e}render(){const e=document.querySelector(".menu-left"),t=document.querySelector(".menu");e.replaceChild(this.getMenuDOM(),t)}getMenuDOM(){const e=["fas","fa-tasks"],t=document.createElement("div");t.classList.add("menu");const n=document.createElement("ul");n.classList.add("flex-grow","menu-items"),this.model.getProjects();for(let t of this.model.getProjects())0===t.id?n.appendChild(this.getOverviewMenuItem(t)):n.appendChild(this.getMenuItem(t,e));const i=document.createElement("div");i.classList.add("line"),n.appendChild(i);const a=this.getMenuItem({title:"Done",tasks:[]},["far","fa-calendar-check"]);n.appendChild(a),t.appendChild(n);const r=document.createElement("ul");r.classList.add("push-bottom");const o=document.createElement("a");o.href="#",o.classList.add("menu-item");const s=document.createElement("li");s.innerHTML="<i class='fa fa-cog'></i> Logs",o.appendChild(s),r.appendChild(o);const d=document.createElement("a");d.href="#",d.classList.add("menu-item");const c=document.createElement("li");return c.innerHTML="<i class='fa fa-sign-out-alt'></i> Log out",d.appendChild(c),r.appendChild(d),t.appendChild(r),t}calculateProjectTasksAmount(e){return e.tasks.reduce(((e,t,n)=>e+(t.isComplete?0:1)),0)}getOverviewMenuItem(e){const t=document.createElement("a");t.href="#",t.setAttribute("data-menu-index",e.id),t.classList.add("menu-item"),this.model.getCurrentProjectId()===e.id&&t.classList.add("active");const n=document.createElement("li"),i=document.createElement("div");i.classList.toggle("flex-row");const a=document.createElement("i");a.classList.add("fa","fa-home");const r=document.createElement("div");r.classList.toggle("menu-item-text");const o=this.model.getProjectsCount();return r.innerHTML=`${e.title} <p class='tasks-amount'>${o} \n    ${1===o?"project":"projects"}</p>`,i.appendChild(a),i.appendChild(r),n.appendChild(i),t.appendChild(n),t.addEventListener("click",(t=>{t.preventDefault(),this.controller.changeCurrentProject(e.id)})),t}getMenuItem(e,t){const n=document.createElement("a");n.href="#",n.setAttribute("data-menu-index",e.id),n.classList.add("menu-item"),this.model.getCurrentProjectId()===e.id&&n.classList.add("active");const i=document.createElement("li"),a=document.createElement("div");a.classList.toggle("flex-row");const r=document.createElement("i");r.classList.add(...t);const o=document.createElement("div");if(o.classList.toggle("menu-item-text"),e.tasks){const t=this.calculateProjectTasksAmount(e);o.innerHTML=`${e.title} <p class='tasks-amount'>${t} ${1===t?"Task":"Tasks"}</p>`}return a.appendChild(r),a.appendChild(o),i.appendChild(a),n.appendChild(i),n.addEventListener("click",(t=>{t.preventDefault(),this.controller.changeCurrentProject(e.id)})),n}}class Me{title;description;level;constructor(e,t,n){this.title=e,this.description=t,this.level=n}}class Pe{wrapper;constructor(){this.wrapper=document.querySelector(".notification-wrapper"),this.init()}init(){const e=new Me("Welcome","Welcome to our app, we hope you will find it useful!",a.MEDIUM);setTimeout((()=>{this.showNotification(e)}),1e3)}addCloseEventListeners(){this.wrapper.querySelectorAll(".notification-icon .close").forEach((e=>{e.addEventListener("click",(e=>{this.animateNotificationClosing(e.target.parentElement.parentElement)}))}))}animateNotificationClosing(e){e.classList.add("notification-animate-hide"),setTimeout((()=>{e.classList.remove("notification-animate-hide"),e.classList.add("hide"),this.wrapper.removeChild(e)}),Le.NOTIFICATION_HIDE_ANIMATION_DURATION)}showNotification(e){const t=this.createNotificationElement(e);this.wrapper.appendChild(t),this.addCloseEventListeners(),setTimeout((()=>{this.animateNotificationClosing(t)}),Le.NOTIFICATION_SHOW_TIME)}createNotificationElement(e){const t=document.createElement("div");let n;switch(t.classList.add("notification"),e.level){case a.HIGH:n="bg-danger";break;case a.MEDIUM:n="bg-medium";break;case a.LOW:n="bg-low";break;case a.DEFAULT:n="bg-default"}t.classList.add(n);const i=document.createElement("div");i.classList.add("notification-icon");const r=document.createElement("i");r.classList.add("fa-solid","fa-bell"),i.appendChild(r),t.appendChild(i);const o=document.createElement("div");o.classList.add("notification-body");const s=document.createElement("div");s.classList.add("notification-title"),s.textContent=e.title,o.appendChild(s);const d=document.createElement("div");d.classList.add("notification-text"),d.textContent=e.description,o.appendChild(d),t.appendChild(o);const c=document.createElement("div");c.classList.add("notification-icon");const l=document.createElement("i");return l.classList.add("fa-solid","fa-xmark","close"),c.appendChild(l),t.appendChild(c),t}}(new class{model;controller;view;menuView;notificationController;constructor(){this.model=new Te,this.menuView=new je({model:this.model}),this.view=new we({menuView:this.menuView}),this.view.setModel(this.model),this.controller=new De({view:this.view,model:this.model}),this.view.setController(this.controller),this.menuView.setController(this.controller),this.notificationController=new Pe}init(){this.controller.init()}}).init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
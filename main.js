(()=>{"use strict";class e{createdDate;title;description;dueDate;priority;isComplete;log;notes;checklist;constructor(e,t,n,a){this.id=class{static startingIndex=0;static nextIndex(){return this.startingIndex++}static reset(){this.startingIndex=0}}.nextIndex(),this.title=e,this.description=t,this.dueDate=n,this.priority=a,this.createdDate=new Date,this.isComplete=!1,this.notes=null,this.checklist=[],this.log=[]}isComplete(){return!0===isComplete}markAsComplete(){this.isComplete=!0}markAsNotComplete(){this.isComplete=!1}getDOMElement(){let e,t;switch(this.priority){case PriorityType.DEFAULT:e="bg-light",t="priority-default-border";break;case PriorityType.HIGH:e="bg-danger",t="priority-high-border";break;case PriorityType.MEDIUM:e="bg-medium",t="priority-medium-border";break;case PriorityType.LOW:e="bg-low",t="priority-low-border"}const n=document.createElement("div");n.classList.add("task",t),n.setAttribute("data-index",this.id);const a=document.createElement("div");a.classList.add("task-content");const i=document.createElement("input");i.setAttribute("type","checkbox"),this.isComplete&&i.setAttribute("checked",""),i.id=`task-${this.id}`,a.appendChild(i);const r=document.createElement("div");r.classList.add("checkbox-wrapper");const o=document.createElement("label");o.setAttribute("for",`task-${this.id}`);const s=document.createElement("span");s.classList.add("checkbox");const d=document.createElement("span");d.classList.add("check"),s.appendChild(d),o.appendChild(s),r.appendChild(o),a.appendChild(r);const c=document.createElement("div");c.classList.add("task-text");const l=document.createElement("div");l.classList.add("title"),l.textContent=this.title,c.appendChild(l);const u=document.createElement("div");u.classList.add("task-details","hide");const m=document.createElement("div");m.classList.add("description","font-sm"),m.textContent=this.description;const h=document.createElement("div");h.classList.add("flex-row");const f=document.createElement("div");f.classList.add("priority",e,"font-sm"),f.textContent=Utils.capitalize(this.priority);const p=document.createElement("div");p.classList.add("due-date","font-sm"),p.innerHTML=`Due date <span class='date'>${this.dueDate}</span>`,u.appendChild(m),h.appendChild(f),h.appendChild(p),u.appendChild(h),c.appendChild(u),a.appendChild(c),n.appendChild(a);const g=document.createElement("div");g.classList.add("task-menu");const w=document.createElement("i");w.classList.add("fas","fa-chevron-down","icon","chevron"),g.appendChild(w);const v=document.createElement("i");v.classList.add("fas","fa-ellipsis-v","icon","more"),g.appendChild(v);const b=document.createElement("more-menu");b.classList.add("more-menu","hide");const y=document.createElement("ul"),C=document.createElement("li");C.classList.add("more-menu-option","edit"),C.innerHTML="<i class='far fa-edit icon'></i> Edit";const k=document.createElement("li");return k.classList.add("more-menu-option","delete"),k.innerHTML="<i class='far fa-trash-alt icon'></i> Delete",y.appendChild(C),y.appendChild(k),b.appendChild(y),g.appendChild(b),n.appendChild(g),n}}class t{static LOW="low";static MEDIUM="medium";static HIGH="high";static DEFAULT="default"}const n={projects:[{id:0,title:"Overview",description:"Look at all your projects and choose which one you want to check",tasks:[]},{id:1,title:"Website development",description:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ",tasks:[new e("Update about page header","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,1,20),t.DEFAULT),new e("Fix bug in deployment script","Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,19),t.MEDIUM),new e("Update about page header","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,1,20),t.DEFAULT),new e("About page wording","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,22),t.HIGH),new e("New landing page layout","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,17),t.MEDIUM),new e("Update global iconset","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,1,27),t.LOW),new e("New case study thumbnails","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,28),t.DEFAULT)],done:[],todoCount:0},{id:2,title:"Groceries",description:"List of groceries to buy on the nearest trip to the shop. Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit.",tasks:[new e("Buy Pizza","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,30),t.HIGH),new e("Tomatoes","Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,30),t.DEFAULT)]}]};class a{currentProject;projects;data;constructor(){this.data=n,this.projects=this.data.projects,this.currentProject=this.getInitialProject()}setCurrentProject(e){this.currentProject=e}setCurrentProjectId(e){this.currentProject=this.projects.filter((t=>t.id===e))[0]}getCurrentProject(){return this.currentProject}getCurrentProjectId(){return this.currentProject.id}getProjects(){return this.data.projects}getData(){return this.data}getInitialProject(){return this.projects.filter((e=>1===e.id))[0]}getTaskById(e){}setTaskAsComplete(e){e.isComplete=!0}addTask(e){this.currentProject.tasks.unshift(e)}}function i(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function r(e){i(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function o(e,t){i(2,arguments);var n=r(e),a=r(t);return n.getTime()>a.getTime()}class s{validationMessages;isFormEmpty;validTask;form=document.querySelector(".new-task-modal");constructor(){this.validTask={},this.isFormEmpty=!0,this.init()}init(){this.resetValidationMessages(),this.addBlurEventListeners()}resetValidationMessages(){this.validationMessages={title:[],description:[],dueDate:[]},this.clearValidationMessages()}isValid(){this.validateInputs();for(let e in this.validationMessages)if(0!==this.validationMessages[e].length)return!1;return!0}validateInputs(){this.validateTitleInput(),this.validateDescriptionInput(),this.validateDueDateInput()}validateTitleInput(){const e=this.form.querySelector("#task-title").value,t=this.form.querySelector("#form-label-title .validation-msg");if(t.textContent="",e)this.validTask.title=e;else{const e="*  Please enter task title";this.validationMessages.title.includes(e)||this.validationMessages.title.push(e),t.textContent=e}}validateDescriptionInput(){const e=this.form.querySelector("#task-description").value,t=this.form.querySelector("#form-label-description .validation-msg");if(t.textContent="",e)this.validTask.description=e;else{const e="* Please enter task description";this.validationMessages.description.includes(e)||this.validationMessages.description.push(e),t.textContent=e}}validateDueDateInput(){const e=this.form.querySelector("#task-due-date").value,t=this.form.querySelector("#form-label-due-date .validation-msg");if(t.textContent="",e&&o(new Date(e),new Date))this.validTask.dueDate=new Date(e);else{const e="* Please enter task due date that's in the future";this.validationMessages.dueDate.includes(e)||this.validationMessages.dueDate.push(e),t.textContent=e}}addBlurEventListeners(){this.form.querySelector("#task-title").addEventListener("blur",(e=>{this.validateTitleInput()})),this.form.querySelector("#task-description").addEventListener("blur",(e=>{this.validateDescriptionInput()})),this.form.querySelector("#task-due-date").addEventListener("input",(e=>{this.validateDueDateInput()}))}clearValidationMessages(){const e=document.querySelectorAll(".validation-msg");for(let t of e)t.textContent=""}getTask(){const t=new e(this.validTask.title,this.validTask.description,this.validTask.dueDate);return t.priority=this.getPriorityValue(),t}getPriorityValue(){return this.form.querySelector('#new-task-form input[type="radio"]:checked').value}}class d{content;taskController;view;model;formValidation;constructor(e){this.content=document.querySelector(".wrapper"),this.formValidation=new s,e.view&&(this.view=e.view),e.model&&(this.model=e.model),this.attachEventListeners()}init(){this.view.render()}getCurrentProject(){return this.model.getCurrentProject()}changeCurrentProject(e){this.model.setCurrentProjectId(e),this.view.render(),this.addEventListenersToNewListElements()}attachEventListeners(){this.addEventListenersToNewListElements(),this.addShowNewTaskModalEventListener(),this.addHideNewTaskModalEventListener(),this.addNewTaskSubmitListener(),this.addToggleDarkModeClickListener()}addEventListenersToNewListElements(){this.addTaskDetailsToggleEventListeners(),this.addExpandHideAllEventListener(),this.addToggleMoreMenuListener(),this.addDeleteTaskClickListener(),this.addEditTaskClickListener()}addTaskDetailsToggleEventListeners(){const e=document.querySelectorAll(".task-menu .fa-chevron-down");for(let t of e)t.addEventListener("click",(e=>{const t=e.target.parentNode.parentNode;this.toggleTaskDetails(t)}))}toggleTaskDetails(e){if(e){e.querySelector(".task-details").classList.toggle("hide");const t=e.querySelector(".icon");t.classList.toggle("fa-chevron-up"),t.classList.toggle("fa-chevron-down")}}addExpandHideAllEventListener(){const e="Expand all",t=document.querySelector("#expand-all-hide-all-span");t.addEventListener("click",(n=>{const a=document.querySelectorAll(".task");if(a)if(new String(t.innerText.trim()).includes(e)){for(let e of a)this.showTaskDetails(e);t.textContent="Collapse all"}else{for(let e of a)this.hideTaskDetails(e);t.textContent=e}}))}showTaskDetails(e){e.querySelector(".task-details").classList.remove("hide");const t=e.querySelector(".task-menu .icon");t.classList.remove("fa-chevron-down"),t.classList.add("fa-chevron-up")}hideTaskDetails(e){e.querySelector(".task-details").classList.add("hide");const t=e.querySelector(".task-menu .icon");t.classList.remove("fa-chevron-up"),t.classList.add("fa-chevron-down")}addShowNewTaskModalEventListener(){const e=document.querySelector(".new-task-btn"),t=document.querySelector("#new-task-modal-wrapper");e.addEventListener("click",(e=>{this.showNewTaskModal(t)}))}showNewTaskModal(e){this.resetModalForm(),window.scrollTo(0,0),e.classList.remove("hide")}resetModalForm(){document.querySelector("#new-task-form").reset()}addHideNewTaskModalEventListener(){document.querySelector("#new-task-modal-wrapper").addEventListener("click",(e=>{e.stopPropagation(),e.target.classList.contains("modal-wrapper")&&this.animateModalClosing()})),document.querySelector(".modal-wrapper .close-btn").addEventListener("click",(e=>{this.animateModalClosing()}))}animateModalClosing(){const e=document.querySelector("#new-task-modal-wrapper"),t=e.querySelector(".new-task-modal");t.classList.add("modal-dissmis-animation"),e.classList.remove("wrapper-fade-in-animation"),e.classList.add("wrapper-fade-out-animation"),setTimeout((()=>{e.classList.add("hide"),t.classList.remove("modal-dissmis-animation"),e.classList.remove("wrapper-fade-out-animation"),e.classList.add("wrapper-fade-in-animation")}),600)}addNewTaskSubmitListener(){document.querySelector("#new-task-submit").addEventListener("click",(e=>{if(e.preventDefault(),this.formValidation.init(),this.formValidation.isValid()){const e=this.formValidation.getTask();console.log(e),this.submitNewTaskModal(e),this.animateModalClosing()}}))}submitNewTaskModal(e){console.log("New task submited! "),this.model.addTask(e),this.view.render(),this.addEventListenersToNewListElements(),console.log(this.model.getCurrentProject().tasks.length)}addToggleMoreMenuListener(){const e=document.querySelectorAll(".task-menu .more");for(let t of e)t.addEventListener("click",(e=>{const n=t.nextElementSibling;setTimeout((()=>{n.classList.toggle("hide")}),50)}));document.addEventListener("click",(e=>{if(!e.target.classList.contains("more-menu")&&!e.target.classList.contains("more-menu-option")){const e=document.querySelectorAll(".more-menu:not(.hide)");for(let t of e)t.classList.add("hide")}}))}addDeleteTaskClickListener(){const e=document.querySelectorAll(".more-menu-option.delete");for(let t of e){const e=t.parentElement.parentElement.parentElement.parentElement.parentElement.getAttribute("data-index");t.addEventListener("click",this.handleDeleteTask.bind(this,e))}}handleDeleteTask(e){console.log("Deleting task with id "+e)}addEditTaskClickListener(){const e=document.querySelectorAll(".more-menu-option.edit");for(let t of e){const e=t.parentElement.parentElement.parentElement.parentElement.parentElement.getAttribute("data-index");t.addEventListener("click",this.handleEditTask.bind(this,e))}}handleEditTask(e){console.log("Editing task with id "+e)}addToggleDarkModeClickListener(){const e=document.querySelector(".dark-mode-icon");e?e.addEventListener("click",(e=>{document.querySelector("body").classList.toggle("dark-mode")})):console.log("Dark-mode switch button not found")}}function c(e){return i(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}function l(e){if(i(1,arguments),!c(e)&&"number"!=typeof e)return!1;var t=r(e);return!isNaN(Number(t))}var u={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function m(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,a=e.formats[n]||e.formats[e.defaultWidth];return a}}var h,f={date:m({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:m({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:m({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},p={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function g(e){return function(t,n){var a,i=n||{};if("formatting"===(i.context?String(i.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,o=i.width?String(i.width):r;a=e.formattingValues[o]||e.formattingValues[r]}else{var s=e.defaultWidth,d=i.width?String(i.width):e.defaultWidth;a=e.values[d]||e.values[s]}return a[e.argumentCallback?e.argumentCallback(t):t]}}function w(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=n.width,i=a&&e.matchPatterns[a]||e.matchPatterns[e.defaultMatchWidth],r=t.match(i);if(!r)return null;var o,s=r[0],d=a&&e.parsePatterns[a]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(d)?b(d,(function(e){return e.test(s)})):v(d,(function(e){return e.test(s)}));o=e.valueCallback?e.valueCallback(c):c,o=n.valueCallback?n.valueCallback(o):o;var l=t.slice(s.length);return{value:o,rest:l}}}function v(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function b(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}const y={code:"en-US",formatDistance:function(e,t,n){var a,i=u[e];return a="string"==typeof i?i:1===t?i.one:i.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:f,formatRelative:function(e,t,n,a){return p[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:g({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:g({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:g({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:g({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:g({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(h={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(h.matchPattern);if(!n)return null;var a=n[0],i=e.match(h.parsePattern);if(!i)return null;var r=h.valueCallback?h.valueCallback(i[0]):i[0];r=t.valueCallback?t.valueCallback(r):r;var o=e.slice(a.length);return{value:r,rest:o}}),era:w({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:w({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:w({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:w({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:w({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function C(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function k(e,t){i(2,arguments);var n=r(e).getTime(),a=C(t);return new Date(n+a)}function T(e,t){i(2,arguments);var n=C(t);return k(e,-n)}var L=864e5;function E(e){i(1,arguments);var t=1,n=r(e),a=n.getUTCDay(),o=(a<t?7:0)+a-t;return n.setUTCDate(n.getUTCDate()-o),n.setUTCHours(0,0,0,0),n}function M(e){i(1,arguments);var t=r(e),n=t.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(n+1,0,4),a.setUTCHours(0,0,0,0);var o=E(a),s=new Date(0);s.setUTCFullYear(n,0,4),s.setUTCHours(0,0,0,0);var d=E(s);return t.getTime()>=o.getTime()?n+1:t.getTime()>=d.getTime()?n:n-1}function D(e){i(1,arguments);var t=M(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var a=E(n);return a}var x=6048e5;function P(e,t){i(1,arguments);var n=t||{},a=n.locale,o=a&&a.options&&a.options.weekStartsOn,s=null==o?0:C(o),d=null==n.weekStartsOn?s:C(n.weekStartsOn);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=r(e),l=c.getUTCDay(),u=(l<d?7:0)+l-d;return c.setUTCDate(c.getUTCDate()-u),c.setUTCHours(0,0,0,0),c}function S(e,t){i(1,arguments);var n=r(e),a=n.getUTCFullYear(),o=t||{},s=o.locale,d=s&&s.options&&s.options.firstWeekContainsDate,c=null==d?1:C(d),l=null==o.firstWeekContainsDate?c:C(o.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=new Date(0);u.setUTCFullYear(a+1,0,l),u.setUTCHours(0,0,0,0);var m=P(u,t),h=new Date(0);h.setUTCFullYear(a,0,l),h.setUTCHours(0,0,0,0);var f=P(h,t);return n.getTime()>=m.getTime()?a+1:n.getTime()>=f.getTime()?a:a-1}function j(e,t){i(1,arguments);var n=t||{},a=n.locale,r=a&&a.options&&a.options.firstWeekContainsDate,o=null==r?1:C(r),s=null==n.firstWeekContainsDate?o:C(n.firstWeekContainsDate),d=S(e,t),c=new Date(0);c.setUTCFullYear(d,0,s),c.setUTCHours(0,0,0,0);var l=P(c,t);return l}var U=6048e5;function q(e,t){for(var n=e<0?"-":"",a=Math.abs(e).toString();a.length<t;)a="0"+a;return n+a}const N=function(e,t){var n=e.getUTCFullYear(),a=n>0?n:1-n;return q("yy"===t?a%100:a,t.length)},A=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):q(n+1,2)},W=function(e,t){return q(e.getUTCDate(),t.length)},Y=function(e,t){return q(e.getUTCHours()%12||12,t.length)},H=function(e,t){return q(e.getUTCHours(),t.length)},O=function(e,t){return q(e.getUTCMinutes(),t.length)},I=function(e,t){return q(e.getUTCSeconds(),t.length)},F=function(e,t){var n=t.length,a=e.getUTCMilliseconds();return q(Math.floor(a*Math.pow(10,n-3)),t.length)};function V(e,t){var n=e>0?"-":"+",a=Math.abs(e),i=Math.floor(a/60),r=a%60;if(0===r)return n+String(i);var o=t||"";return n+String(i)+o+q(r,2)}function X(e,t){return e%60==0?(e>0?"-":"+")+q(Math.abs(e)/60,2):z(e,t)}function z(e,t){var n=t||"",a=e>0?"-":"+",i=Math.abs(e);return a+q(Math.floor(i/60),2)+n+q(i%60,2)}const G={G:function(e,t,n){var a=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var a=e.getUTCFullYear(),i=a>0?a:1-a;return n.ordinalNumber(i,{unit:"year"})}return N(e,t)},Y:function(e,t,n,a){var i=S(e,a),r=i>0?i:1-i;return"YY"===t?q(r%100,2):"Yo"===t?n.ordinalNumber(r,{unit:"year"}):q(r,t.length)},R:function(e,t){return q(M(e),t.length)},u:function(e,t){return q(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(a);case"QQ":return q(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(a);case"qq":return q(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(e,t,n){var a=e.getUTCMonth();switch(t){case"M":case"MM":return A(e,t);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(e,t,n){var a=e.getUTCMonth();switch(t){case"L":return String(a+1);case"LL":return q(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(e,t,n,a){var o=function(e,t){i(1,arguments);var n=r(e),a=P(n,t).getTime()-j(n,t).getTime();return Math.round(a/U)+1}(e,a);return"wo"===t?n.ordinalNumber(o,{unit:"week"}):q(o,t.length)},I:function(e,t,n){var a=function(e){i(1,arguments);var t=r(e),n=E(t).getTime()-D(t).getTime();return Math.round(n/x)+1}(e);return"Io"===t?n.ordinalNumber(a,{unit:"week"}):q(a,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):W(e,t)},D:function(e,t,n){var a=function(e){i(1,arguments);var t=r(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var a=t.getTime(),o=n-a;return Math.floor(o/L)+1}(e);return"Do"===t?n.ordinalNumber(a,{unit:"dayOfYear"}):q(a,t.length)},E:function(e,t,n){var a=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(e,t,n,a){var i=e.getUTCDay(),r=(i-a.weekStartsOn+8)%7||7;switch(t){case"e":return String(r);case"ee":return q(r,2);case"eo":return n.ordinalNumber(r,{unit:"day"});case"eee":return n.day(i,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(i,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(i,{width:"short",context:"formatting"});default:return n.day(i,{width:"wide",context:"formatting"})}},c:function(e,t,n,a){var i=e.getUTCDay(),r=(i-a.weekStartsOn+8)%7||7;switch(t){case"c":return String(r);case"cc":return q(r,t.length);case"co":return n.ordinalNumber(r,{unit:"day"});case"ccc":return n.day(i,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(i,{width:"narrow",context:"standalone"});case"cccccc":return n.day(i,{width:"short",context:"standalone"});default:return n.day(i,{width:"wide",context:"standalone"})}},i:function(e,t,n){var a=e.getUTCDay(),i=0===a?7:a;switch(t){case"i":return String(i);case"ii":return q(i,t.length);case"io":return n.ordinalNumber(i,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(e,t,n){var a=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(e,t,n){var a,i=e.getUTCHours();switch(a=12===i?"noon":0===i?"midnight":i/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(e,t,n){var a,i=e.getUTCHours();switch(a=i>=17?"evening":i>=12?"afternoon":i>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var a=e.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return Y(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):H(e,t)},K:function(e,t,n){var a=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(a,{unit:"hour"}):q(a,t.length)},k:function(e,t,n){var a=e.getUTCHours();return 0===a&&(a=24),"ko"===t?n.ordinalNumber(a,{unit:"hour"}):q(a,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):O(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):I(e,t)},S:function(e,t){return F(e,t)},X:function(e,t,n,a){var i=(a._originalDate||e).getTimezoneOffset();if(0===i)return"Z";switch(t){case"X":return X(i);case"XXXX":case"XX":return z(i);default:return z(i,":")}},x:function(e,t,n,a){var i=(a._originalDate||e).getTimezoneOffset();switch(t){case"x":return X(i);case"xxxx":case"xx":return z(i);default:return z(i,":")}},O:function(e,t,n,a){var i=(a._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+V(i,":");default:return"GMT"+z(i,":")}},z:function(e,t,n,a){var i=(a._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+V(i,":");default:return"GMT"+z(i,":")}},t:function(e,t,n,a){var i=a._originalDate||e;return q(Math.floor(i.getTime()/1e3),t.length)},T:function(e,t,n,a){return q((a._originalDate||e).getTime(),t.length)}};function B(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function Q(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}var R={p:Q,P:function(e,t){var n,a=e.match(/(P+)(p+)?/)||[],i=a[1],r=a[2];if(!r)return B(e,t);switch(i){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",B(i,t)).replace("{{time}}",Q(r,t))}};const $=R;function J(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var _=["D","DD"],K=["YY","YYYY"];function Z(e){return-1!==_.indexOf(e)}function ee(e){return-1!==K.indexOf(e)}function te(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var ne=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ae=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ie=/^'([^]*?)'?$/,re=/''/g,oe=/[a-zA-Z]/;function se(e){return e.match(ie)[1].replace(re,"'")}function de(e,t){i(2,arguments);var n=r(e),a=r(t),o=n.getTime()-a.getTime();return o<0?-1:o>0?1:o}function ce(e,t){i(2,arguments);var n=r(e),a=r(t),o=n.getFullYear()-a.getFullYear(),s=n.getMonth()-a.getMonth();return 12*o+s}function le(e){i(1,arguments);var t=r(e);return t.setHours(23,59,59,999),t}function ue(e){i(1,arguments);var t=r(e),n=t.getMonth();return t.setFullYear(t.getFullYear(),n+1,0),t.setHours(23,59,59,999),t}function me(e){i(1,arguments);var t=r(e);return le(t).getTime()===ue(t).getTime()}function he(e,t){i(2,arguments);var n,a=r(e),o=r(t),s=de(a,o),d=Math.abs(ce(a,o));if(d<1)n=0;else{1===a.getMonth()&&a.getDate()>27&&a.setDate(30),a.setMonth(a.getMonth()-s*d);var c=de(a,o)===-s;me(r(e))&&1===d&&1===de(e,o)&&(c=!1),n=s*(d-Number(c))}return 0===n?0:n}function fe(e,t){return i(2,arguments),r(e).getTime()-r(t).getTime()}var pe={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(e){return e<0?Math.ceil(e):Math.floor(e)}};function ge(e){return e?pe[e]:pe.trunc}function we(e,t,n){i(2,arguments);var a=fe(e,t)/1e3;return ge(null==n?void 0:n.roundingMethod)(a)}function ve(e){return function(e,t){if(null==e)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in t=t||{})Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}({},e)}var be=1440,ye=43200;class Ce{container;project;controller;model;menuView;constructor(e){this.wrapper=document.querySelector(".content-right"),this.container=document.createElement("div"),this.container.classList.add("container"),e.menuView&&(this.menuView=e.menuView),this.init()}init(){}setController(e){this.controller=e,this.setCurrentProject(),this.project.tasks[0].isComplete=!0,this.project.tasks[2].isComplete=!0}setCurrentProject(){this.project=this.controller.getCurrentProject()}setProject(e){this.project=e}setModel(e){this.model=e}updateProject(){this.project=this.model.getCurrentProject()}render(){this.updateProject(),this.renderMenu(),this.renderTasksList()}renderMenu(){const e=document.querySelector(".menu-left"),t=document.querySelector(".menu");e.replaceChild(this.menuView.getMenuDOM(),t)}renderTasksList(){this.clearContainer(),this.container.classList.add("fade-in-animation"),this.container.appendChild(this.createProjectTitleAndMenu()),this.container.appendChild(this.createProjectDescription()),this.container.appendChild(this.createTasks()),this.wrapper.removeChild(document.querySelector(".container")),this.wrapper.appendChild(this.container)}clearContainer(){this.container.textContent=""}createProjectTitleAndMenu(){const e=document.createElement("div");e.classList.add("flex-row");const t=document.createElement("h1");t.classList.add("list-title"),t.textContent=this.project.title;const n=document.createElement("div");n.classList.add("push-right","align-center");const a=document.createElement("i");return a.classList.add("fas","fa-ellipsis-v"),n.appendChild(a),e.appendChild(t),e.appendChild(n),e}createProjectDescription(){const e=document.createElement("p");return e.classList.add("list-description"),e.textContent=this.project.description,e}createTasks(){const e=document.createElement("div");e.classList.add("tasks-wrapper");const t=document.createElement("div");t.classList.add("flex-row");const n=document.createElement("div");n.classList.add("tasks-title"),n.textContent="Todo",t.appendChild(n);const a=document.createElement("div");a.classList.add("push-right");const i=document.createElement("span");i.classList.add("font-sm"),i.id="expand-all-hide-all-span",i.textContent="Expand all",a.appendChild(i),t.appendChild(a),e.appendChild(t);const r=document.createElement("form");for(let e of this.project.tasks)r.appendChild(this.getTaskDOMElement(e));return e.appendChild(r),e}getTaskDOMElement(e){let n,a;switch(e.priority){case t.DEFAULT:n="bg-light",a="priority-default-border";break;case t.HIGH:n="bg-danger",a="priority-high-border";break;case t.MEDIUM:n="bg-medium",a="priority-medium-border";break;case t.LOW:n="bg-low",a="priority-low-border"}const s=document.createElement("div");s.classList.add("task",a),s.setAttribute("data-index",e.id);const d=document.createElement("div");d.classList.add("task-content");const c=document.createElement("input");c.setAttribute("type","checkbox"),e.isComplete&&c.setAttribute("checked",""),c.id=`task-${e.id}`,d.appendChild(c);const u=document.createElement("div");u.classList.add("checkbox-wrapper");const m=document.createElement("label");m.setAttribute("for",`task-${e.id}`);const h=document.createElement("span");h.classList.add("checkbox");const f=document.createElement("span");f.classList.add("check"),h.appendChild(f),m.appendChild(h),u.appendChild(m),d.appendChild(u);const p=document.createElement("div");p.classList.add("task-text");const g=document.createElement("div");g.classList.add("title"),g.textContent=e.title,p.appendChild(g);const w=document.createElement("div");w.classList.add("task-details","hide");const v=document.createElement("div");v.classList.add("description","font-sm"),v.textContent=e.description;const b=document.createElement("div");b.classList.add("flex-row");const k=document.createElement("div");k.classList.add("priority",n,"font-sm"),k.textContent=class{static capitalize(e){return e.charAt(0).toUpperCase()+e.slice(1)}}.capitalize(e.priority);const L=document.createElement("div");L.classList.add("due-date","font-sm");const E=function(e,t,n){i(2,arguments);var a=String(t),o=n||{},s=o.locale||y,d=s.options&&s.options.firstWeekContainsDate,c=null==d?1:C(d),u=null==o.firstWeekContainsDate?c:C(o.firstWeekContainsDate);if(!(u>=1&&u<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=s.options&&s.options.weekStartsOn,h=null==m?0:C(m),f=null==o.weekStartsOn?h:C(o.weekStartsOn);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!s.localize)throw new RangeError("locale must contain localize property");if(!s.formatLong)throw new RangeError("locale must contain formatLong property");var p=r(e);if(!l(p))throw new RangeError("Invalid time value");var g=J(p),w=T(p,g),v={firstWeekContainsDate:u,weekStartsOn:f,locale:s,_originalDate:p};return a.match(ae).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,$[t])(e,s.formatLong,v):e})).join("").match(ne).map((function(n){if("''"===n)return"'";var a=n[0];if("'"===a)return se(n);var i=G[a];if(i)return!o.useAdditionalWeekYearTokens&&ee(n)&&te(n,t,e),!o.useAdditionalDayOfYearTokens&&Z(n)&&te(n,t,e),i(w,n,s.localize,v);if(a.match(oe))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return n})).join("")}(e.dueDate,"EEEE d LLLL y");let M;const D=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};i(2,arguments);var a=n.locale||y;if(!a.formatDistance)throw new RangeError("locale must contain formatDistance property");var o=de(e,t);if(isNaN(o))throw new RangeError("Invalid time value");var s,d,c=ve(n);c.addSuffix=Boolean(n.addSuffix),c.comparison=o,o>0?(s=r(t),d=r(e)):(s=r(e),d=r(t));var l,u=we(d,s),m=(J(d)-J(s))/1e3,h=Math.round((u-m)/60);if(h<2)return n.includeSeconds?u<5?a.formatDistance("lessThanXSeconds",5,c):u<10?a.formatDistance("lessThanXSeconds",10,c):u<20?a.formatDistance("lessThanXSeconds",20,c):u<40?a.formatDistance("halfAMinute",null,c):u<60?a.formatDistance("lessThanXMinutes",1,c):a.formatDistance("xMinutes",1,c):0===h?a.formatDistance("lessThanXMinutes",1,c):a.formatDistance("xMinutes",h,c);if(h<45)return a.formatDistance("xMinutes",h,c);if(h<90)return a.formatDistance("aboutXHours",1,c);if(h<be){var f=Math.round(h/60);return a.formatDistance("aboutXHours",f,c)}if(h<2520)return a.formatDistance("xDays",1,c);if(h<ye){var p=Math.round(h/be);return a.formatDistance("xDays",p,c)}if(h<86400)return l=Math.round(h/ye),a.formatDistance("aboutXMonths",l,c);if((l=he(d,s))<12){var g=Math.round(h/ye);return a.formatDistance("xMonths",g,c)}var w=l%12,v=Math.floor(l/12);return w<3?a.formatDistance("aboutXYears",v,c):w<9?a.formatDistance("overXYears",v,c):a.formatDistance("almostXYears",v+1,c)}(e.dueDate,new Date);M=o(new Date,e.dueDate)?`Overdue ${D}`:`Due in ${D}`,L.innerHTML=`${M} <span class='date'>(${E})</span>`,w.appendChild(v),b.appendChild(k),b.appendChild(L),w.appendChild(b),p.appendChild(w),d.appendChild(p),s.appendChild(d);const x=document.createElement("div");x.classList.add("task-menu");const P=document.createElement("i");P.classList.add("fas","fa-chevron-down","icon","chevron"),x.appendChild(P);const S=document.createElement("i");S.classList.add("fas","fa-ellipsis-v","icon","more"),x.appendChild(S);const j=document.createElement("more-menu");j.classList.add("more-menu","hide");const U=document.createElement("ul"),q=document.createElement("li");q.classList.add("more-menu-option","edit"),q.innerHTML="<i class='far fa-edit icon'></i> Edit";const N=document.createElement("li");return N.classList.add("more-menu-option","delete"),N.innerHTML="<i class='far fa-trash-alt icon'></i> Delete",U.appendChild(q),U.appendChild(N),j.appendChild(U),x.appendChild(j),s.appendChild(x),s}}class ke{model;controller;constructor(e){e.model&&(this.model=e.model)}setController(e){this.controller=e}getMenuDOM(){const e=["fas","fa-tasks"],t=document.createElement("div");t.classList.add("menu");const n=document.createElement("ul");n.classList.add("flex-grow"),this.model.getProjects();for(let t of this.model.getProjects())this.calculateProjectTasksAmount(t),0===t.id?n.appendChild(this.getMenuItem(t,["fa","fa-home"])):n.appendChild(this.getMenuItem(t,e));const a=document.createElement("div");a.classList.add("line"),n.appendChild(a);const i=this.getMenuItem({title:"Done",tasks:[]},["far","fa-calendar-check"]);n.appendChild(i),t.appendChild(n);const r=document.createElement("ul");r.classList.add("push-bottom");const o=document.createElement("a");o.href="#",o.classList.add("menu-item");const s=document.createElement("li");s.innerHTML="<i class='fa fa-cog'></i> Logs",o.appendChild(s),r.appendChild(o);const d=document.createElement("a");d.href="#",d.classList.add("menu-item");const c=document.createElement("li");return c.innerHTML="<i class='fa fa-sign-out-alt'></i> Log out",d.appendChild(c),r.appendChild(d),t.appendChild(r),t}calculateProjectTasksAmount(e){return e.tasks.reduce(((e,t,n)=>e+(t.isComplete?0:1)),0)}getMenuItem(e,t){const n=document.createElement("a");n.href="#",n.setAttribute("data-menu-index",e.id),n.classList.add("menu-item"),this.model.getCurrentProjectId()===e.id&&n.classList.add("active");const a=document.createElement("li"),i=document.createElement("div");i.classList.toggle("flex-row");const r=document.createElement("i");r.classList.add(...t);const o=document.createElement("div");if(o.classList.toggle("menu-item-text"),e.tasks){const t=this.calculateProjectTasksAmount(e);o.innerHTML=`${e.title} <p class='tasks-amount'>${t} ${1===t?"Task":"Tasks"}</p>`}return i.appendChild(r),i.appendChild(o),a.appendChild(i),n.appendChild(a),n.addEventListener("click",(t=>{t.preventDefault(),this.controller.changeCurrentProject(e.id)})),n}}let Te=new class{model;controller;view;menuView;constructor(){this.model=new a,this.menuView=new ke({model:this.model}),this.view=new Ce({menuView:this.menuView}),this.controller=new d({view:this.view,model:this.model}),this.view.setController(this.controller),this.view.setModel(this.model),this.menuView.setController(this.controller)}init(){this.controller.init()}start(){}};Te.init(),Te.start()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
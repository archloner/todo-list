(()=>{"use strict";class e{value=0;setStartingValue(e){this.value=e}getID(){return this.value++}reset(){this.value=0}}let t=0;class n{createdDate;title;description;dueDate;priority;isComplete;isCollapsed;log;notes;checklist;constructor(e,n,i,a){this.id=class{static nextIndex(){return t++}static reset(){t=0}}.nextIndex(),this.title=e,this.description=n,this.dueDate=i,this.priority=a,this.createdDate=new Date,this.isComplete=!1,this.isCollapsed=!0,this.notes=null,this.checklist=[],this.log=[]}isComplete(){return!0===isComplete}markAsComplete(){this.isComplete=!0}markAsNotComplete(){this.isComplete=!1}toggleComplete(){this.isComplete=!this.isComplete}setIsCollapsed(e){this.isCollapsed=e}toggleIsCollapsed(){this.isCollapsed=!this.isCollapsed}getDOMElement(){let e,t;switch(this.priority){case PriorityType.DEFAULT:e="bg-light",t="priority-default-border";break;case PriorityType.HIGH:e="bg-danger",t="priority-high-border";break;case PriorityType.MEDIUM:e="bg-medium",t="priority-medium-border";break;case PriorityType.LOW:e="bg-low",t="priority-low-border"}const n=document.createElement("div");n.classList.add("task",t),n.setAttribute("data-index",this.id);const i=document.createElement("div");i.classList.add("task-content");const a=document.createElement("input");a.setAttribute("type","checkbox"),this.isComplete&&a.setAttribute("checked",""),a.id=`task-${this.id}`,i.appendChild(a);const r=document.createElement("div");r.classList.add("checkbox-wrapper");const o=document.createElement("label");o.setAttribute("for",`task-${this.id}`);const s=document.createElement("span");s.classList.add("checkbox");const d=document.createElement("span");d.classList.add("check"),s.appendChild(d),o.appendChild(s),r.appendChild(o),i.appendChild(r);const c=document.createElement("div");c.classList.add("task-text");const l=document.createElement("div");l.classList.add("title"),l.textContent=this.title,c.appendChild(l);const u=document.createElement("div");u.classList.add("task-details","hide");const m=document.createElement("div");m.classList.add("description","font-sm"),m.textContent=this.description;const h=document.createElement("div");h.classList.add("flex-row");const p=document.createElement("div");p.classList.add("priority",e,"font-sm"),p.textContent=Utils.capitalize(this.priority);const g=document.createElement("div");g.classList.add("due-date","font-sm"),g.innerHTML=`Due date <span class='date'>${this.dueDate}</span>`,u.appendChild(m),h.appendChild(p),h.appendChild(g),u.appendChild(h),c.appendChild(u),i.appendChild(c),n.appendChild(i);const f=document.createElement("div");f.classList.add("task-menu");const v=document.createElement("i");v.classList.add("fas","fa-chevron-down","icon","chevron"),f.appendChild(v);const w=document.createElement("i");w.classList.add("fas","fa-ellipsis-v","icon","more"),f.appendChild(w);const C=document.createElement("more-menu");C.classList.add("more-menu","hide");const k=document.createElement("ul"),y=document.createElement("li");y.classList.add("more-menu-option","edit"),y.innerHTML="<i class='far fa-edit icon'></i> Edit";const b=document.createElement("li");return b.classList.add("more-menu-option","delete"),b.innerHTML="<i class='far fa-trash-alt icon'></i> Delete",k.appendChild(y),k.appendChild(b),C.appendChild(k),f.appendChild(C),n.appendChild(f),n}}class i{static LOW="low";static MEDIUM="medium";static HIGH="high";static DEFAULT="default"}const a={projects:[{id:0,title:"Overview",description:"Look at all your projects and choose which one you want to check"},{id:1,title:"Website redesign",description:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ",tasks:[new n("Update about page header","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,1,20),i.DEFAULT),new n("Fix bug in deployment script","Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,19),i.MEDIUM),new n("Update contact page header","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,1,20),i.DEFAULT),new n("About page wording","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,22),i.HIGH),new n("New landing page layout","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,17),i.MEDIUM),new n("Update global iconset","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,1,27),i.LOW),new n("New case study thumbnails","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,28),i.DEFAULT)],done:[]},{id:2,title:"Groceries",description:"List of groceries to buy on the nearest trip to the shop. Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit.",tasks:[new n("Buy Pizza","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,30),i.HIGH),new n("Tomatoes","Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,30),i.DEFAULT)],done:[]},{id:3,title:"Workout",description:"Exercises to do to stay fit. Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit.",tasks:[new n("50 BrzuszkÃ³w","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,30),i.DEFAULT),new n("50 Pompek","Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,30),i.DEFAULT)],done:[]},{id:4,title:"Reading",description:"List of books to read. Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit.",tasks:[new n("Lord of The Rings: The Fellowship of the Ring","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,30),i.MEDIUM),new n("Do Androids Dream of Electric Sheep","Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,30),i.LOW)],done:[]}],logs:[]};class r{currentProject;currentProjectId;projects;data;projectIDSupplier;constructor(){this.data=a,this.projects=this.data.projects,this.currentProjectId=0,this.projectIDSupplier=new e,this.init()}init(){if(this.projects&&this.projects.length>0){const e=this.projects.length;this.projectIDSupplier.setStartingValue(e)}this.currentProject=this.getInitialProject()}setCurrentProject(e){this.currentProject=e}setCurrentProjectId(e){this.currentProject=this.projects.filter((t=>t.id===e))[0],this.currentProjectId=parseInt(e),this.setCurrentProject(this.getProjectById(this.currentProjectId))}getCurrentProject(){return this.currentProject}getCurrentProjectId(){return this.currentProject.id}getProjects(){return this.data.projects}getData(){return this.data}getProjectById(e){e=parseInt(e);return this.data.projects.filter((t=>t.id===e))[0]||-1}getProjectOverview(){let e=[];return this.data.projects.map((t=>{0!==t.id&&e.push({name:t.title,id:t.id,tasks:this.calculateTasks(t.tasks)})})),e}getProjectsCount(){return this.getProjectOverview().length}calculateTasks(e){return e.reduce(((e,t)=>e+(t.isComplete?0:1)),0)}getInitialProject(){return this.projects.filter((e=>0===e.id))[0]}getTaskById(e){e=parseInt(e);const t=this.currentProject.tasks.filter((t=>t.id===e))[0];if(t)return t;{const t=this.currentProject.done.filter((t=>t.id===e))[0];if(t)return t;console.error("Model.getTaskById(): Done task not found")}}setTaskAsComplete(e){e.isComplete=!0}addTask(e){this.currentProject.tasks.unshift(e)}setTaskIsComplete(e,t){let n,i;!0===t?(n=this.currentProject.tasks,i=this.currentProject.done):(n=this.currentProject.done,i=this.currentProject.tasks);const a=n.filter((t=>t.id===e))[0];a.isComplete=t;const r=n.indexOf(a);n.splice(r,1),i.unshift(a)}deleteTaskById(e){const t=this.getTaskById(e);if(t){const e=this.currentProject.tasks.indexOf(t);if(-1!==e)this.currentProject.tasks.splice(e,1),console.log("task deleted");else{const e=this.currentProject.done.indexOf(t);-1!=e&&(this.currentProject.done.splice(e,1),console.log("done task deleted"))}}}updateTask(e){const t=e.id;if(t){let n=-1;for(let e=0;e<this.currentProject.tasks.length;e++)this.currentProject.tasks[e].id===t&&(n=e);if(-1!==n)this.currentProject.tasks.splice(n,1,e);else{for(let i=0;i<this.currentProject.done.length;i++)this.currentProject.done[i].id===t&&(n=i,e.isComplete=!0);this.currentProject.done.splice(n,1,e)}}}addProject(e){e.id=this.projectIDSupplier.getID(),this.projects.push(e)}deleteProjectById(e){e=parseInt(e),this.currentProject.id===e&&this.setCurrentProject(this.getProjectById(0));const t=this.getProjectById(e);if(-1!==t){const e=this.projects.indexOf(t);return this.projects.splice(e,1),!0}return console.error(`Project with id ${e} not found`),!1}updateProject(e){console.log(e.id);let t=this.getProjectById(e.id);console.log(t),t?(t.title=e.title,t.description=e.description):console.error("Project not found")}}function o(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function s(e){o(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function d(e,t){o(2,arguments);var n=s(e),i=s(t);return n.getTime()>i.getTime()}class c{validationMessages;isFormEmpty;validTask;form=document.querySelector(".new-task-modal");action;constructor(){this.validTask={},this.isFormEmpty=!0,this.action="create"}init(){this.addBlurEventListeners(),this.resetValidationMessages()}reset(){this.resetValidationMessages()}resetValidationMessages(){this.validationMessages={title:[],description:[],dueDate:[]},this.clearValidationMessages()}isValid(){this.validateInputs();for(let e in this.validationMessages)if(0!==this.validationMessages[e].length)return!1;return!0}isValidEdit(){this.validateEdit();for(let e in this.validationMessages)if(0!==this.validationMessages[e].length)return!1;return!0}validateInputs(){this.validateTitleInput(),this.validateDescriptionInput(),this.validateDueDateInput()}validateEdit(){this.validateTitleInput(),this.validateDescriptionInput(),this.validatePastDueDateInput()}validateTitleInput(){const e=this.form.querySelector("#task-title").value,t=this.form.querySelector("#form-label-title .validation-msg");if(t.textContent="",e)this.validTask.title=e;else{const e="*  Please enter task title";this.validationMessages.title.includes(e)||this.validationMessages.title.push(e),t.textContent=e}}validateDescriptionInput(){const e=this.form.querySelector("#task-description").value,t=this.form.querySelector("#form-label-description .validation-msg");if(t.textContent="",e)this.validTask.description=e;else{const e="* Please enter task description";this.validationMessages.description.includes(e)||this.validationMessages.description.push(e),t.textContent=e}}validateDueDateInput(){const e=this.form.querySelector("#task-due-date").value,t=this.form.querySelector("#form-label-due-date .validation-msg");if(t.textContent="",e&&d(new Date(e),new Date))this.validTask.dueDate=new Date(e);else{const e="* Please enter task due date that's in the future";this.validationMessages.dueDate.includes(e)||this.validationMessages.dueDate.push(e),t.textContent=e}}validatePastDueDateInput(){const e=this.form.querySelector("#task-due-date").value,t=this.form.querySelector("#form-label-due-date .validation-msg");if(t.textContent="",e)this.validTask.dueDate=new Date(e);else{const e="* Please enter task due date";this.validationMessages.dueDate.includes(e)||this.validationMessages.dueDate.push(e),t.textContent=e}}addBlurEventListeners(){this.form.querySelector("#task-title").addEventListener("blur",(e=>{this.validateTitleInput()})),this.form.querySelector("#task-description").addEventListener("blur",(e=>{this.validateDescriptionInput()})),this.form.querySelector("#task-due-date").addEventListener("input",(e=>{console.log(this.action),this.action.includes("create")?this.validateDueDateInput():this.action.includes("edit")&&this.validatePastDueDateInput()}))}clearValidationMessages(){const e=document.querySelectorAll(".validation-msg");for(let t of e)t.textContent=""}getTask(){const e=new n(this.validTask.title,this.validTask.description,this.validTask.dueDate);return e.priority=this.getPriorityValue(),e}getPriorityValue(){return this.form.querySelector('#new-task-form input[type="radio"]:checked').value}}class l{validationMessages;isFormEmpty;validProject;form=document.querySelector("#new-project-modal-wrapper .new-task-modal");constructor(){this.validProject={},this.isFormEmpty=!0,this.init()}init(){this.resetValidationMessages(),this.addBlurEventListeners()}resetValidationMessages(){this.validationMessages={title:[],description:[]},this.clearValidationMessages()}isValid(){this.validateInputs();for(let e in this.validationMessages)if(0!==this.validationMessages[e].length)return!1;return!0}validateInputs(){this.validateTitleInput(),this.validateDescriptionInput()}validateTitleInput(){const e=this.form.querySelector("#project-title").value,t=this.form.querySelector("#form-label-project-title .validation-msg");if(t.textContent="",e)this.validProject.title=e;else{const e="*  Please enter project title";this.validationMessages.title.includes(e)||this.validationMessages.title.push(e),t.textContent=e}}validateDescriptionInput(){const e=this.form.querySelector("#project-description").value,t=this.form.querySelector("#form-label-project-description .validation-msg");if(t.textContent="",e)this.validProject.description=e;else{const e="* Please enter project description";this.validationMessages.description.includes(e)||this.validationMessages.description.push(e),t.textContent=e}}addBlurEventListeners(){this.form.querySelector("#project-title").addEventListener("blur",(e=>{this.validateTitleInput()})),this.form.querySelector("#project-description").addEventListener("blur",(e=>{this.validateDescriptionInput()}))}clearValidationMessages(){const e=document.querySelectorAll("#new-project-modal-wrapper .validation-msg");for(let t of e)t.textContent=""}getProject(){const e={title:this.validProject.title,description:this.validProject.description,tasks:[],done:[]},t=document.querySelector("#new-project-modal-wrapper #new-project-submit");return t.getAttribute("data-action").includes("edit")&&(e.id=parseInt(t.getAttribute("data-id"))),e}}function u(e,t){for(var n=e<0?"-":"",i=Math.abs(e).toString();i.length<t;)i="0"+i;return n+i}class m{content;taskController;view;model;formValidation;constructor(e){this.content=document.querySelector(".wrapper"),this.formValidation=new c,this.formValidation.init(),this.projectFormValidation=new l,e.view&&(this.view=e.view),e.model&&(this.model=e.model)}init(){this.attachEventListeners(),this.render()}getCurrentProject(){return this.model.getCurrentProject()}changeCurrentProject(e){this.model.setCurrentProjectId(e),this.render()}render(){this.view.render();const e=document.querySelector(".new-task-btn");setTimeout((()=>{0!==this.model.getCurrentProjectId()?(this.addNewListElementsEventListeners(),e.classList.remove("hide")):(this.addOverviewPageEventListeners(),e.classList.add("hide"))}),100)}attachEventListeners(){this.addShowNewTaskModalEventListener(),this.addHideNewTaskModalEventListener(),this.addNewTaskSubmitListener(),this.addToggleDarkModeClickListener(),this.addHideNewProjectModalEventListener(),this.addNewProjectSubmitListener(),this.addHideDeleteTaskModalEventListener(),this.addConfirmDeleteTaskButtonClickListener()}addNewListElementsEventListeners(){this.addToggleCompleteEventListener(),this.addTaskDetailsToggleEventListeners(),this.addExpandHideAllEventListener(),this.addToggleMoreMenuListener(),this.addDeleteTaskClickListener(),this.addEditTaskClickListener(),this.addDeleteProjectClickListener(),this.addEditProjectClickListener()}addOverviewPageEventListeners(){this.addProjectTileClickListener(),this.addNewProjectButtonListener(),this.addHideDeleteTaskModalEventListener(),this.addConfirmDeleteProjectButtonClickListener()}addToggleCompleteEventListener(){const e=document.querySelectorAll('input[type="checkbox"]');for(let t of e)t.addEventListener("change",(e=>{const t=e.target.getAttribute("data-id");this.toggleTaskComplete(t,e.target.checked)}))}toggleTaskComplete(e,t){console.log("toggle task complete"),this.model.setTaskIsComplete(parseInt(e),t),this.render()}addTaskDetailsToggleEventListeners(){const e=document.querySelectorAll(".task-menu .icon.chevron");for(let t of e)t.addEventListener("click",(e=>{const t=e.target.parentNode.parentNode;this.toggleTaskDetails(t)}))}toggleTaskDetails(e){if(e){e.querySelector(".task-details").classList.toggle("hide");const t=e.querySelector(".icon");t.classList.toggle("fa-chevron-up"),t.classList.toggle("fa-chevron-down");const n=this.model.getTaskById(e.getAttribute("data-index"));n.toggleIsCollapsed(),console.log(n.isCollapsed)}}addExpandHideAllEventListener(){const e=document.querySelector("#expand-all-hide-all-span");e.addEventListener("click",(t=>{const n=document.querySelectorAll(".task");if(n){if(new String(e.innerText.trim()).includes("Expand all")){this.view.allExpanded=!0;for(let e of n)this.showTaskDetails(e)}else{this.view.allExpanded=!1;for(let e of n)this.hideTaskDetails(e)}this.render()}}))}showTaskDetails(e){this.model.getTaskById(e.getAttribute("data-index")).setIsCollapsed(!1);const t=e.querySelector(".task-menu .icon");t.classList.remove("fa-chevron-down"),t.classList.add("fa-chevron-up")}hideTaskDetails(e){this.model.getTaskById(e.getAttribute("data-index")).setIsCollapsed(!0);const t=e.querySelector(".task-menu .icon");t.classList.remove("fa-chevron-up"),t.classList.add("fa-chevron-down")}addShowNewTaskModalEventListener(){const e=document.querySelector(".new-task-btn"),t=document.querySelector("#new-task-modal-wrapper");e.addEventListener("click",(e=>{this.showNewTaskModal(t)}))}showNewTaskModal(e){this.resetModalForm(),this.formValidation.reset(),e.classList.remove("hide")}resetModalForm(){const e=document.querySelector("#new-task-modal-wrapper");e.querySelector(".title").textContent="Add new task";const t=e.querySelector("#new-task-submit");t.textContent="Create",t.setAttribute("data-action","create"),t.setAttribute("data-index",-1),e.querySelector("#task-due-date").value="",document.querySelector("#new-task-form").reset()}addHideNewTaskModalEventListener(){document.querySelector("#new-task-modal-wrapper").addEventListener("click",(e=>{e.stopPropagation(),e.target.classList.contains("modal-wrapper")&&this.animateModalClosing()})),document.querySelector(".modal-wrapper .close-btn").addEventListener("click",(e=>{this.animateModalClosing()}))}animateModalClosing(){const e=document.querySelector("#new-task-modal-wrapper"),t=e.querySelector(".new-task-modal");t.classList.add("modal-dissmis-animation"),e.classList.remove("wrapper-fade-in-animation"),e.classList.add("wrapper-fade-out-animation"),setTimeout((()=>{e.classList.add("hide"),t.classList.remove("modal-dissmis-animation"),e.classList.remove("wrapper-fade-out-animation"),e.classList.add("wrapper-fade-in-animation")}),600)}addNewTaskSubmitListener(){document.querySelector("#new-task-submit").addEventListener("click",(e=>{e.preventDefault();const t=e.target.getAttribute("data-action");if(console.log(t),t.includes("create")){if(this.formValidation.action=t,this.formValidation.isValid()){const e=this.formValidation.getTask();console.log(e),this.submitNewTaskModal(e),this.animateModalClosing(),this.formValidation.reset()}}else if(t.includes("edit")){this.formValidation.action=t;const n=e.target.getAttribute("data-index");if(this.formValidation.isValidEdit()){const e=this.formValidation.getTask();e.id=parseInt(n),this.submitEditTask(e),this.animateModalClosing(),this.formValidation.reset()}}}))}submitNewTaskModal(e){this.model.addTask(e),this.render()}submitEditTask(e){this.model.updateTask(e),this.render()}addToggleMoreMenuListener(){const e=document.querySelectorAll(".task-menu .more");for(let t of e)t.addEventListener("click",(e=>{const n=t.nextElementSibling;setTimeout((()=>{n.classList.toggle("hide")}),50)}));document.addEventListener("click",(e=>{if(!e.target.classList.contains("more-menu")&&!e.target.classList.contains("more-menu-option")){const e=document.querySelectorAll(".more-menu:not(.hide)");for(let t of e)t.classList.add("hide")}}))}addDeleteTaskClickListener(){const e=document.querySelectorAll(".more-menu-option.delete");for(let t of e){const e=t.parentElement.parentElement.parentElement.parentElement.getAttribute("data-index");t.addEventListener("click",this.handleDeleteTask.bind(this,e))}}handleDeleteTask(e){console.log("Deleting task with id "+e),document.querySelectorAll(".task-menu .more-menu").forEach((e=>{e.classList.add("hide")})),this.confirmDeletingTask(parseInt(e))&&this.model.deleteTask(e)}confirmDeletingTask(e){return this.fillDeleteModalWithTaskData(e),this.showConfirmDeleteModal(),!1}fillDeleteModalWithTaskData(e){const t=this.model.getTaskById(e),n=document.querySelector("#confirm-task-delete-modal");n.querySelector(".task-title").textContent=t.title,n.querySelector("#delete-confirm").setAttribute("data-id",e),n.querySelector("#delete-confirm").setAttribute("data-delete-type","task")}showConfirmDeleteModal(){document.querySelector("#confirm-task-delete-modal").classList.remove("hide")}addConfirmDeleteTaskButtonClickListener(){const e=document.querySelector("#confirm-task-delete-modal #delete-confirm");e.addEventListener("click",(t=>{const n=e.getAttribute("data-delete-type");if(n.includes("project"));else if(n.includes("task")){const t=e.getAttribute("data-id");this.model.deleteTaskById(t)}this.animateDeleteTaskModalClosing(),this.render()}))}addHideDeleteTaskModalEventListener(){const e=document.querySelector("#confirm-task-delete-modal");e.addEventListener("click",(e=>{e.stopPropagation(),e.target.classList.contains("modal-wrapper")&&this.animateDeleteTaskModalClosing()})),document.querySelector("#confirm-task-delete-modal .close-btn").addEventListener("click",(e=>{this.animateDeleteTaskModalClosing()})),e.querySelector("#delete-cancel").addEventListener("click",(e=>{this.animateDeleteTaskModalClosing()}))}animateDeleteTaskModalClosing(){const e=document.querySelector("#confirm-task-delete-modal"),t=e.querySelector(".new-task-modal");t.classList.add("modal-dissmis-animation"),e.classList.remove("wrapper-fade-in-animation"),e.classList.add("wrapper-fade-out-animation"),setTimeout((()=>{e.classList.add("hide"),t.classList.remove("modal-dissmis-animation"),e.classList.remove("wrapper-fade-out-animation"),e.classList.add("wrapper-fade-in-animation")}),600)}addEditTaskClickListener(){const e=document.querySelectorAll(".more-menu-option.edit");for(let t of e){const e=t.parentElement.parentElement.parentElement.parentElement.getAttribute("data-index");t.addEventListener("click",this.handleEditTask.bind(this,e))}}handleEditTask(e){const t=document.querySelector("#new-task-modal-wrapper");this.formValidation.reset(),this.fillFormWithTaskData(e),t.classList.remove("hide")}fillFormWithTaskData(e){const t=this.model.getTaskById(e),n=document.querySelector("#new-task-modal-wrapper");n.querySelector(".title").textContent="Edit task",n.querySelector("#task-title").value=t.title,n.querySelector("#task-description").value=t.description;const a=n.querySelectorAll('input[type="radio"]');switch(t.priority){case i.DEFAULT:a[0].checked=!0;break;case i.LOW:a[1].checked=!0;break;case i.MEDIUM:a[2].checked=!0;break;case i.HIGH:a[3].checked=!0}const r=n.querySelector("#task-due-date"),d=function(e,t){o(1,arguments);var n=s(e);if(isNaN(n.getTime()))throw new RangeError("Invalid time value");var i=null!=t&&t.format?String(t.format):"extended",a=null!=t&&t.representation?String(t.representation):"complete";if("extended"!==i&&"basic"!==i)throw new RangeError("format must be 'extended' or 'basic'");if("date"!==a&&"time"!==a&&"complete"!==a)throw new RangeError("representation must be 'date', 'time', or 'complete'");var r="",d="",c="extended"===i?"-":"",l="extended"===i?":":"";if("time"!==a){var m=u(n.getDate(),2),h=u(n.getMonth()+1,2),p=u(n.getFullYear(),4);r="".concat(p).concat(c).concat(h).concat(c).concat(m)}if("date"!==a){var g=n.getTimezoneOffset();if(0!==g){var f=Math.abs(g),v=u(Math.floor(f/60),2),w=u(f%60,2);d="".concat(g<0?"+":"-").concat(v,":").concat(w)}else d="Z";var C=""===r?"":"T",k=[u(n.getHours(),2),u(n.getMinutes(),2),u(n.getSeconds(),2)].join(l);r="".concat(r).concat(C).concat(k).concat(d)}return r}(t.dueDate,{representation:"date"});r.value=d;const c=n.querySelector("#new-task-submit");c.textContent="Edit",c.setAttribute("data-action","edit"),c.setAttribute("data-index",t.id)}addToggleDarkModeClickListener(){console.log("Darkmode toggle listener attached");const e=document.querySelector(".dark-mode-icon");e?e.addEventListener("click",(e=>{document.querySelector("body").classList.toggle("dark-mode")})):console.log("Dark-mode switch button not found")}addProjectTileClickListener(){document.querySelectorAll(".project-grid-item:not(.new-project-btn)").forEach((e=>{e.addEventListener("click",(e=>{e.stopPropagation();const t=e.target;if(console.log(e.target),t.classList.contains("bg")){const e=t.parentElement.getAttribute("data-project-index");this.changeCurrentProject(e)}else{const e=t.parentElement.parentElement.getAttribute("data-project-index");this.showConfirmDeleteProjectModal(e)}}))}))}addNewProjectButtonListener(){document.querySelectorAll(".new-project-btn").forEach((e=>{e.addEventListener("click",(e=>{this.openNewProjectModal()}))}))}openNewProjectModal(){this.resetNewProjectModalForm(),this.showProjectModal()}showProjectModal(){document.querySelector("#new-project-modal-wrapper").classList.remove("hide")}resetNewProjectModalForm(){document.querySelector("#new-project-form").reset();const e=document.querySelector("#new-project-modal-wrapper");e.querySelector(".title").textContent="Add new project";const t=e.querySelector("#new-project-submit");t.textContent="Create",t.setAttribute("data-action","create")}addHideNewProjectModalEventListener(){document.querySelector("#new-project-modal-wrapper").addEventListener("click",(e=>{e.stopPropagation(),e.target.classList.contains("modal-wrapper")&&this.animateNewProjectModalClosing()})),document.querySelector("#new-project-modal-wrapper .close-btn").addEventListener("click",(e=>{this.animateNewProjectModalClosing()}))}animateNewProjectModalClosing(){const e=document.querySelector("#new-project-modal-wrapper"),t=e.querySelector(".new-task-modal");t.classList.add("modal-dissmis-animation"),e.classList.remove("wrapper-fade-in-animation"),e.classList.add("wrapper-fade-out-animation"),setTimeout((()=>{e.classList.add("hide"),t.classList.remove("modal-dissmis-animation"),e.classList.remove("wrapper-fade-out-animation"),e.classList.add("wrapper-fade-in-animation")}),600)}addNewProjectSubmitListener(){document.querySelector("#new-project-submit").addEventListener("click",(e=>{if(e.preventDefault(),this.projectFormValidation.init(),this.projectFormValidation.isValid()){const t=this.projectFormValidation.getProject();e.target.getAttribute("data-action").includes("create")?this.submitNewProjectModal(t):e.target.getAttribute("data-action").includes("edit")&&this.editProjectDetails(t),this.animateNewProjectModalClosing()}}))}submitNewProjectModal(e){console.log("Submitting new project"),this.model.addProject(e),this.render()}showConfirmDeleteProjectModal(e){this.fillDeleteModalWithProjectData(e),this.showConfirmDeleteModal()}fillDeleteModalWithProjectData(e){const t=document.querySelector("#confirm-task-delete-modal");t.querySelector(".title").textContent="Delete project?";const n=this.model.getProjectById(e).title;t.querySelector("p").innerHTML=`Delete project <span class="task-title">${n}</span>?`;const i=t.querySelector("#delete-confirm");i.setAttribute("data-id",e),i.setAttribute("data-delete-type","project")}addConfirmDeleteProjectButtonClickListener(){document.querySelector("#delete-confirm").addEventListener("click",(e=>{if(e.target.getAttribute("data-delete-type").includes("project")){const t=e.target.getAttribute("data-id");this.model.deleteProjectById(t)?(this.animateDeleteTaskModalClosing(),this.render()):console.error("Error while deleting project")}else console.error("Deleting project but task id given")}))}addDeleteProjectClickListener(){document.querySelector(".project-delete-btn").addEventListener("click",(e=>{console.log(e.target);const t=e.target.getAttribute("data-project-id");this.showConfirmDeleteProjectModal(t)}))}addEditProjectClickListener(){document.querySelector(".push-right .fa-edit").addEventListener("click",(e=>{this.openEditProjectModal(e.target.getAttribute("data-project-id"))}))}openEditProjectModal(e){this.fillFormWithProjectData(e),this.showProjectModal()}fillFormWithProjectData(e){const t=this.model.getProjectById(e),n=document.querySelector("#new-project-modal-wrapper");n.querySelector(".title").textContent="Edit project",n.querySelector("#project-title").value=t.title,n.querySelector("#project-description").value=t.description;const i=n.querySelector("#new-project-submit");i.textContent="Edit",i.setAttribute("data-action","edit"),i.setAttribute("data-id",t.id)}editProjectDetails(e){this.model.updateProject(e),this.render()}}function h(e){return o(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}function p(e){if(o(1,arguments),!h(e)&&"number"!=typeof e)return!1;var t=s(e);return!isNaN(Number(t))}var g={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function f(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,i=e.formats[n]||e.formats[e.defaultWidth];return i}}var v,w={date:f({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:f({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:f({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},C={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function k(e){return function(t,n){var i,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,o=a.width?String(a.width):r;i=e.formattingValues[o]||e.formattingValues[r]}else{var s=e.defaultWidth,d=a.width?String(a.width):e.defaultWidth;i=e.values[d]||e.values[s]}return i[e.argumentCallback?e.argumentCallback(t):t]}}function y(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=n.width,a=i&&e.matchPatterns[i]||e.matchPatterns[e.defaultMatchWidth],r=t.match(a);if(!r)return null;var o,s=r[0],d=i&&e.parsePatterns[i]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(d)?L(d,(function(e){return e.test(s)})):b(d,(function(e){return e.test(s)}));o=e.valueCallback?e.valueCallback(c):c,o=n.valueCallback?n.valueCallback(o):o;var l=t.slice(s.length);return{value:o,rest:l}}}function b(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function L(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}const E={code:"en-US",formatDistance:function(e,t,n){var i,a=g[e];return i="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+i:i+" ago":i},formatLong:w,formatRelative:function(e,t,n,i){return C[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),i=n%100;if(i>20||i<10)switch(i%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:k({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:k({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:k({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:k({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:k({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(v={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(v.matchPattern);if(!n)return null;var i=n[0],a=e.match(v.parsePattern);if(!a)return null;var r=v.valueCallback?v.valueCallback(a[0]):a[0];r=t.valueCallback?t.valueCallback(r):r;var o=e.slice(i.length);return{value:r,rest:o}}),era:y({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:y({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:y({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:y({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:y({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function T(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function j(e,t){o(2,arguments);var n=s(e).getTime(),i=T(t);return new Date(n+i)}function D(e,t){o(2,arguments);var n=T(t);return j(e,-n)}var M=864e5;function P(e){o(1,arguments);var t=1,n=s(e),i=n.getUTCDay(),a=(i<t?7:0)+i-t;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function x(e){o(1,arguments);var t=s(e),n=t.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(n+1,0,4),i.setUTCHours(0,0,0,0);var a=P(i),r=new Date(0);r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0);var d=P(r);return t.getTime()>=a.getTime()?n+1:t.getTime()>=d.getTime()?n:n-1}function S(e){o(1,arguments);var t=x(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var i=P(n);return i}var q=6048e5;function I(e,t){o(1,arguments);var n=t||{},i=n.locale,a=i&&i.options&&i.options.weekStartsOn,r=null==a?0:T(a),d=null==n.weekStartsOn?r:T(n.weekStartsOn);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=s(e),l=c.getUTCDay(),u=(l<d?7:0)+l-d;return c.setUTCDate(c.getUTCDate()-u),c.setUTCHours(0,0,0,0),c}function A(e,t){o(1,arguments);var n=s(e),i=n.getUTCFullYear(),a=t||{},r=a.locale,d=r&&r.options&&r.options.firstWeekContainsDate,c=null==d?1:T(d),l=null==a.firstWeekContainsDate?c:T(a.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=new Date(0);u.setUTCFullYear(i+1,0,l),u.setUTCHours(0,0,0,0);var m=I(u,t),h=new Date(0);h.setUTCFullYear(i,0,l),h.setUTCHours(0,0,0,0);var p=I(h,t);return n.getTime()>=m.getTime()?i+1:n.getTime()>=p.getTime()?i:i-1}function U(e,t){o(1,arguments);var n=t||{},i=n.locale,a=i&&i.options&&i.options.firstWeekContainsDate,r=null==a?1:T(a),s=null==n.firstWeekContainsDate?r:T(n.firstWeekContainsDate),d=A(e,t),c=new Date(0);c.setUTCFullYear(d,0,s),c.setUTCHours(0,0,0,0);var l=I(c,t);return l}var N=6048e5;const O=function(e,t){var n=e.getUTCFullYear(),i=n>0?n:1-n;return u("yy"===t?i%100:i,t.length)},W=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):u(n+1,2)},H=function(e,t){return u(e.getUTCDate(),t.length)},F=function(e,t){return u(e.getUTCHours()%12||12,t.length)},Y=function(e,t){return u(e.getUTCHours(),t.length)},V=function(e,t){return u(e.getUTCMinutes(),t.length)},B=function(e,t){return u(e.getUTCSeconds(),t.length)},z=function(e,t){var n=t.length,i=e.getUTCMilliseconds();return u(Math.floor(i*Math.pow(10,n-3)),t.length)};function G(e,t){var n=e>0?"-":"+",i=Math.abs(e),a=Math.floor(i/60),r=i%60;if(0===r)return n+String(a);var o=t||"";return n+String(a)+o+u(r,2)}function X(e,t){return e%60==0?(e>0?"-":"+")+u(Math.abs(e)/60,2):R(e,t)}function R(e,t){var n=t||"",i=e>0?"-":"+",a=Math.abs(e);return i+u(Math.floor(a/60),2)+n+u(a%60,2)}const $={G:function(e,t,n){var i=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(i,{width:"abbreviated"});case"GGGGG":return n.era(i,{width:"narrow"});default:return n.era(i,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var i=e.getUTCFullYear(),a=i>0?i:1-i;return n.ordinalNumber(a,{unit:"year"})}return O(e,t)},Y:function(e,t,n,i){var a=A(e,i),r=a>0?a:1-a;return"YY"===t?u(r%100,2):"Yo"===t?n.ordinalNumber(r,{unit:"year"}):u(r,t.length)},R:function(e,t){return u(x(e),t.length)},u:function(e,t){return u(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var i=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(i);case"QQ":return u(i,2);case"Qo":return n.ordinalNumber(i,{unit:"quarter"});case"QQQ":return n.quarter(i,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(i,{width:"narrow",context:"formatting"});default:return n.quarter(i,{width:"wide",context:"formatting"})}},q:function(e,t,n){var i=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(i);case"qq":return u(i,2);case"qo":return n.ordinalNumber(i,{unit:"quarter"});case"qqq":return n.quarter(i,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(i,{width:"narrow",context:"standalone"});default:return n.quarter(i,{width:"wide",context:"standalone"})}},M:function(e,t,n){var i=e.getUTCMonth();switch(t){case"M":case"MM":return W(e,t);case"Mo":return n.ordinalNumber(i+1,{unit:"month"});case"MMM":return n.month(i,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(i,{width:"narrow",context:"formatting"});default:return n.month(i,{width:"wide",context:"formatting"})}},L:function(e,t,n){var i=e.getUTCMonth();switch(t){case"L":return String(i+1);case"LL":return u(i+1,2);case"Lo":return n.ordinalNumber(i+1,{unit:"month"});case"LLL":return n.month(i,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(i,{width:"narrow",context:"standalone"});default:return n.month(i,{width:"wide",context:"standalone"})}},w:function(e,t,n,i){var a=function(e,t){o(1,arguments);var n=s(e),i=I(n,t).getTime()-U(n,t).getTime();return Math.round(i/N)+1}(e,i);return"wo"===t?n.ordinalNumber(a,{unit:"week"}):u(a,t.length)},I:function(e,t,n){var i=function(e){o(1,arguments);var t=s(e),n=P(t).getTime()-S(t).getTime();return Math.round(n/q)+1}(e);return"Io"===t?n.ordinalNumber(i,{unit:"week"}):u(i,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):H(e,t)},D:function(e,t,n){var i=function(e){o(1,arguments);var t=s(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var i=t.getTime(),a=n-i;return Math.floor(a/M)+1}(e);return"Do"===t?n.ordinalNumber(i,{unit:"dayOfYear"}):u(i,t.length)},E:function(e,t,n){var i=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(i,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(i,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(i,{width:"short",context:"formatting"});default:return n.day(i,{width:"wide",context:"formatting"})}},e:function(e,t,n,i){var a=e.getUTCDay(),r=(a-i.weekStartsOn+8)%7||7;switch(t){case"e":return String(r);case"ee":return u(r,2);case"eo":return n.ordinalNumber(r,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,i){var a=e.getUTCDay(),r=(a-i.weekStartsOn+8)%7||7;switch(t){case"c":return String(r);case"cc":return u(r,t.length);case"co":return n.ordinalNumber(r,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var i=e.getUTCDay(),a=0===i?7:i;switch(t){case"i":return String(a);case"ii":return u(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(i,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(i,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(i,{width:"short",context:"formatting"});default:return n.day(i,{width:"wide",context:"formatting"})}},a:function(e,t,n){var i=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(i,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(i,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(i,{width:"narrow",context:"formatting"});default:return n.dayPeriod(i,{width:"wide",context:"formatting"})}},b:function(e,t,n){var i,a=e.getUTCHours();switch(i=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(i,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(i,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(i,{width:"narrow",context:"formatting"});default:return n.dayPeriod(i,{width:"wide",context:"formatting"})}},B:function(e,t,n){var i,a=e.getUTCHours();switch(i=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(i,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(i,{width:"narrow",context:"formatting"});default:return n.dayPeriod(i,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var i=e.getUTCHours()%12;return 0===i&&(i=12),n.ordinalNumber(i,{unit:"hour"})}return F(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):Y(e,t)},K:function(e,t,n){var i=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(i,{unit:"hour"}):u(i,t.length)},k:function(e,t,n){var i=e.getUTCHours();return 0===i&&(i=24),"ko"===t?n.ordinalNumber(i,{unit:"hour"}):u(i,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):V(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):B(e,t)},S:function(e,t){return z(e,t)},X:function(e,t,n,i){var a=(i._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return X(a);case"XXXX":case"XX":return R(a);default:return R(a,":")}},x:function(e,t,n,i){var a=(i._originalDate||e).getTimezoneOffset();switch(t){case"x":return X(a);case"xxxx":case"xx":return R(a);default:return R(a,":")}},O:function(e,t,n,i){var a=(i._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+G(a,":");default:return"GMT"+R(a,":")}},z:function(e,t,n,i){var a=(i._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+G(a,":");default:return"GMT"+R(a,":")}},t:function(e,t,n,i){var a=i._originalDate||e;return u(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,i){return u((i._originalDate||e).getTime(),t.length)}};function Q(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function J(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}var _={p:J,P:function(e,t){var n,i=e.match(/(P+)(p+)?/)||[],a=i[1],r=i[2];if(!r)return Q(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",Q(a,t)).replace("{{time}}",J(r,t))}};const K=_;function Z(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var ee=["D","DD"],te=["YY","YYYY"];function ne(e){return-1!==ee.indexOf(e)}function ie(e){return-1!==te.indexOf(e)}function ae(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var re=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,oe=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,se=/^'([^]*?)'?$/,de=/''/g,ce=/[a-zA-Z]/;function le(e){return e.match(se)[1].replace(de,"'")}function ue(e,t){o(2,arguments);var n=s(e),i=s(t),a=n.getTime()-i.getTime();return a<0?-1:a>0?1:a}function me(e,t){o(2,arguments);var n=s(e),i=s(t),a=n.getFullYear()-i.getFullYear(),r=n.getMonth()-i.getMonth();return 12*a+r}function he(e){o(1,arguments);var t=s(e);return t.setHours(23,59,59,999),t}function pe(e){o(1,arguments);var t=s(e),n=t.getMonth();return t.setFullYear(t.getFullYear(),n+1,0),t.setHours(23,59,59,999),t}function ge(e){o(1,arguments);var t=s(e);return he(t).getTime()===pe(t).getTime()}function fe(e,t){o(2,arguments);var n,i=s(e),a=s(t),r=ue(i,a),d=Math.abs(me(i,a));if(d<1)n=0;else{1===i.getMonth()&&i.getDate()>27&&i.setDate(30),i.setMonth(i.getMonth()-r*d);var c=ue(i,a)===-r;ge(s(e))&&1===d&&1===ue(e,a)&&(c=!1),n=r*(d-Number(c))}return 0===n?0:n}function ve(e,t){return o(2,arguments),s(e).getTime()-s(t).getTime()}var we={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(e){return e<0?Math.ceil(e):Math.floor(e)}};function Ce(e){return e?we[e]:we.trunc}function ke(e,t,n){o(2,arguments);var i=ve(e,t)/1e3;return Ce(null==n?void 0:n.roundingMethod)(i)}function ye(e){return function(e,t){if(null==e)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in t=t||{})Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}({},e)}var be=1440,Le=43200;class Ee{container;project;controller;model;menuView;allExpanded;constructor(e){this.wrapper=document.querySelector(".content-wrapper"),this.container=document.createElement("div"),this.container.classList.add("container"),e.menuView&&(this.menuView=e.menuView),this.allExpanded=!1,this.init()}init(){}setController(e){this.controller=e,this.setCurrentProject()}setCurrentProject(){this.project=this.controller.getCurrentProject()}setProject(e){this.project=e}setModel(e){this.model=e}updateProject(){this.project=this.model.getCurrentProject()}render(){this.updateProject(),this.renderMenu(),0===this.project.id?this.renderOverview():this.renderTasksList()}renderMenu(){this.menuView.render()}renderOverview(){this.clearContainer();const e=document.createElement("div");e.classList.add("flex-row");const t=document.createElement("h1");t.classList.add("list-title"),t.textContent="Overview",e.appendChild(t),this.container.appendChild(e);const n=document.createElement("p");n.classList.add("list-description"),n.textContent="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",this.container.appendChild(n);const i=document.createElement("div");i.classList.add("project-grid-wrapper");const a=document.createElement("div");a.classList.add("project-grid"),this.model.getProjectOverview().map((e=>{a.appendChild(this.getProjectGridItem(e))})),a.appendChild(this.getNewProjectGridButton()),i.appendChild(a),this.container.appendChild(i),this.wrapper.appendChild(this.container)}getProjectGridItem(e){const t=document.createElement("div");t.classList.add("project-grid-item"),t.setAttribute("data-project-index",e.id);const n=document.createElement("div");n.classList.add("bg"),t.appendChild(n);const i=document.createElement("div");i.classList.add("controls","project-delete-btn");const a=document.createElement("i");a.classList.add("far","fa-trash-alt","icon"),i.appendChild(a),t.appendChild(i);const r=document.createElement("div");r.classList.add("text");const o=document.createElement("h2");o.classList.add("project-title"),o.textContent=e.name,r.appendChild(o);const s=document.createElement("span");return s.classList.add("task-count"),s.textContent=`${e.tasks} ${1===e.tasks?"task":"tasks"}`,r.appendChild(s),t.appendChild(r),t}getNewProjectGridButton(){const e=document.createElement("div");e.classList.add("project-grid-item","new-project-btn");const t=document.createElement("div");t.classList.add("bg"),e.appendChild(t);const n=document.createElement("div");n.classList.add("text");const i=document.createElement("h2");i.classList.add("project-title"),i.innerHTML="<i class='fa fa-plus'></i>",n.appendChild(i);const a=document.createElement("span");return a.classList.add("task-count"),a.textContent="New project",n.appendChild(a),e.appendChild(n),e}renderTasksList(){this.clearContainer(),this.container.classList.add("fade-in-animation"),this.container.appendChild(this.createProjectTitleAndMenu()),this.container.appendChild(this.createProjectDescription()),this.container.appendChild(this.createTasks()),this.wrapper.removeChild(document.querySelector(".container")),this.wrapper.appendChild(this.container)}clearContainer(){this.container.textContent=""}createProjectTitleAndMenu(){const e=document.createElement("div");e.classList.add("flex-row");const t=document.createElement("h1");t.classList.add("list-title"),t.textContent=this.project.title;const n=document.createElement("div");n.classList.add("push-right","align-center");const i=document.createElement("i");i.classList.add("far","fa-edit","icon","project-edit-btn"),i.setAttribute("data-project-id",this.model.getCurrentProjectId()),n.appendChild(i);const a=document.createElement("i");return a.classList.add("far","fa-trash-alt","icon","project-delete-btn"),a.setAttribute("data-project-id",this.model.getCurrentProjectId()),n.appendChild(a),e.appendChild(t),e.appendChild(n),e}createProjectDescription(){const e=document.createElement("p");return e.classList.add("list-description"),e.textContent=this.project.description,e}createTasks(){const e=document.createElement("div");e.classList.add("tasks-wrapper");const t=document.createElement("div");t.classList.add("flex-row");const n=document.createElement("div");n.classList.add("tasks-title"),n.textContent="Todo",t.appendChild(n);const i=document.createElement("div");i.classList.add("push-right");const a=document.createElement("span");if(a.classList.add("font-sm"),a.id="expand-all-hide-all-span",this.allExpanded?(console.log("all expanded"),a.textContent="Collapse all"):(console.log("all collapsed"),a.textContent="Expand all"),i.appendChild(a),t.appendChild(i),e.appendChild(t),this.project.tasks.length>0){const t=document.createElement("form");for(let e of this.project.tasks)t.appendChild(this.getTaskDOMElement(e));e.appendChild(t)}else{const t=document.createElement("h1");t.classList.add("no-tasks-message"),t.textContent="No tasks to do, enjoy your brake ð",e.appendChild(t)}if(this.project.done&&this.project.done.length>0){const t=document.createElement("div");t.classList.add("tasks-title"),t.textContent="Done";const n=document.createElement("form");for(let e of this.project.done)n.appendChild(this.getTaskDOMElement(e));e.appendChild(t),e.appendChild(n)}return e}getTaskDOMElement(e){let t,n;switch(e.priority){case i.DEFAULT:t="bg-light",n="priority-default-border";break;case i.HIGH:t="bg-danger",n="priority-high-border";break;case i.MEDIUM:t="bg-medium",n="priority-medium-border";break;case i.LOW:t="bg-low",n="priority-low-border"}const a=document.createElement("div");a.classList.add("task",n),a.setAttribute("data-index",e.id);const r=document.createElement("div");r.classList.add("task-content");const c=document.createElement("input");c.setAttribute("type","checkbox"),e.isComplete&&c.setAttribute("checked",""),c.id=`task-${e.id}`,c.setAttribute("data-id",e.id),r.appendChild(c);const l=document.createElement("div");l.classList.add("checkbox-wrapper");const u=document.createElement("label");u.setAttribute("for",`task-${e.id}`);const m=document.createElement("span");m.classList.add("checkbox");const h=document.createElement("span");h.classList.add("check"),m.appendChild(h),u.appendChild(m),l.appendChild(u),r.appendChild(l);const g=document.createElement("div");g.classList.add("task-text");const f=document.createElement("div");f.classList.add("title"),f.textContent=e.title,g.appendChild(f);const v=document.createElement("div");v.classList.add("task-details"),e.isCollapsed?v.classList.add("hide"):v.classList.remove("hide");const w=document.createElement("div");w.classList.add("description","font-sm"),w.textContent=e.description;const C=document.createElement("div");C.classList.add("flex-row");const k=document.createElement("div");k.classList.add("priority",t,"font-sm"),k.textContent=class{static capitalize(e){return e.charAt(0).toUpperCase()+e.slice(1)}}.capitalize(e.priority);const y=document.createElement("div");y.classList.add("due-date","font-sm");const b=function(e,t,n){o(2,arguments);var i=String(t),a=n||{},r=a.locale||E,d=r.options&&r.options.firstWeekContainsDate,c=null==d?1:T(d),l=null==a.firstWeekContainsDate?c:T(a.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=r.options&&r.options.weekStartsOn,m=null==u?0:T(u),h=null==a.weekStartsOn?m:T(a.weekStartsOn);if(!(h>=0&&h<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!r.localize)throw new RangeError("locale must contain localize property");if(!r.formatLong)throw new RangeError("locale must contain formatLong property");var g=s(e);if(!p(g))throw new RangeError("Invalid time value");var f=Z(g),v=D(g,f),w={firstWeekContainsDate:l,weekStartsOn:h,locale:r,_originalDate:g};return i.match(oe).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,K[t])(e,r.formatLong,w):e})).join("").match(re).map((function(n){if("''"===n)return"'";var i=n[0];if("'"===i)return le(n);var o=$[i];if(o)return!a.useAdditionalWeekYearTokens&&ie(n)&&ae(n,t,e),!a.useAdditionalDayOfYearTokens&&ne(n)&&ae(n,t,e),o(v,n,r.localize,w);if(i.match(ce))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return n})).join("")}(e.dueDate,"EEEE d LLLL y");let L;const j=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};o(2,arguments);var i=n.locale||E;if(!i.formatDistance)throw new RangeError("locale must contain formatDistance property");var a=ue(e,t);if(isNaN(a))throw new RangeError("Invalid time value");var r,d,c=ye(n);c.addSuffix=Boolean(n.addSuffix),c.comparison=a,a>0?(r=s(t),d=s(e)):(r=s(e),d=s(t));var l,u=ke(d,r),m=(Z(d)-Z(r))/1e3,h=Math.round((u-m)/60);if(h<2)return n.includeSeconds?u<5?i.formatDistance("lessThanXSeconds",5,c):u<10?i.formatDistance("lessThanXSeconds",10,c):u<20?i.formatDistance("lessThanXSeconds",20,c):u<40?i.formatDistance("halfAMinute",null,c):u<60?i.formatDistance("lessThanXMinutes",1,c):i.formatDistance("xMinutes",1,c):0===h?i.formatDistance("lessThanXMinutes",1,c):i.formatDistance("xMinutes",h,c);if(h<45)return i.formatDistance("xMinutes",h,c);if(h<90)return i.formatDistance("aboutXHours",1,c);if(h<be){var p=Math.round(h/60);return i.formatDistance("aboutXHours",p,c)}if(h<2520)return i.formatDistance("xDays",1,c);if(h<Le){var g=Math.round(h/be);return i.formatDistance("xDays",g,c)}if(h<86400)return l=Math.round(h/Le),i.formatDistance("aboutXMonths",l,c);if((l=fe(d,r))<12){var f=Math.round(h/Le);return i.formatDistance("xMonths",f,c)}var v=l%12,w=Math.floor(l/12);return v<3?i.formatDistance("aboutXYears",w,c):v<9?i.formatDistance("overXYears",w,c):i.formatDistance("almostXYears",w+1,c)}(e.dueDate,new Date);L=d(new Date,e.dueDate)?`Overdue ${j}`:`Due in ${j}`,y.innerHTML=`${L} <span class='date'>(${b})</span>`,v.appendChild(w),C.appendChild(k),C.appendChild(y),v.appendChild(C),g.appendChild(v),r.appendChild(g),a.appendChild(r);const M=document.createElement("div");M.classList.add("task-menu");const P=document.createElement("i");P.classList.add("icon","chevron"),e.isCollapsed?P.classList.add("fas","fa-chevron-down"):P.classList.add("fas","fa-chevron-up"),M.appendChild(P);const x=document.createElement("i");x.classList.add("fas","fa-ellipsis-v","icon","more"),M.appendChild(x);const S=document.createElement("div");S.classList.add("more-menu","hide");const q=document.createElement("ul"),I=document.createElement("li");I.classList.add("more-menu-option","edit"),I.innerHTML="<i class='far fa-edit icon'></i> Edit";const A=document.createElement("li");return A.classList.add("more-menu-option","delete"),A.innerHTML="<i class='far fa-trash-alt icon'></i> Delete",q.appendChild(I),q.appendChild(A),S.appendChild(q),M.appendChild(S),a.appendChild(M),a}}class Te{model;controller;constructor(e){e.model&&(this.model=e.model)}setController(e){this.controller=e}render(){const e=document.querySelector(".menu-left"),t=document.querySelector(".menu");e.replaceChild(this.getMenuDOM(),t)}getMenuDOM(){const e=["fas","fa-tasks"],t=document.createElement("div");t.classList.add("menu");const n=document.createElement("ul");n.classList.add("flex-grow","menu-items"),this.model.getProjects();for(let t of this.model.getProjects())0===t.id?n.appendChild(this.getOverviewMenuItem(t)):n.appendChild(this.getMenuItem(t,e));const i=document.createElement("div");i.classList.add("line"),n.appendChild(i);const a=this.getMenuItem({title:"Done",tasks:[]},["far","fa-calendar-check"]);n.appendChild(a),t.appendChild(n);const r=document.createElement("ul");r.classList.add("push-bottom");const o=document.createElement("a");o.href="#",o.classList.add("menu-item");const s=document.createElement("li");s.innerHTML="<i class='fa fa-cog'></i> Logs",o.appendChild(s),r.appendChild(o);const d=document.createElement("a");d.href="#",d.classList.add("menu-item");const c=document.createElement("li");return c.innerHTML="<i class='fa fa-sign-out-alt'></i> Log out",d.appendChild(c),r.appendChild(d),t.appendChild(r),t}calculateProjectTasksAmount(e){return e.tasks.reduce(((e,t,n)=>e+(t.isComplete?0:1)),0)}getOverviewMenuItem(e){const t=document.createElement("a");t.href="#",t.setAttribute("data-menu-index",e.id),t.classList.add("menu-item"),this.model.getCurrentProjectId()===e.id&&t.classList.add("active");const n=document.createElement("li"),i=document.createElement("div");i.classList.toggle("flex-row");const a=document.createElement("i");a.classList.add("fa","fa-home");const r=document.createElement("div");r.classList.toggle("menu-item-text");const o=this.model.getProjectsCount();return r.innerHTML=`${e.title} <p class='tasks-amount'>${o} \n    ${1===o?"project":"projects"}</p>`,i.appendChild(a),i.appendChild(r),n.appendChild(i),t.appendChild(n),t.addEventListener("click",(t=>{t.preventDefault(),this.controller.changeCurrentProject(e.id)})),t}getMenuItem(e,t){const n=document.createElement("a");n.href="#",n.setAttribute("data-menu-index",e.id),n.classList.add("menu-item"),this.model.getCurrentProjectId()===e.id&&n.classList.add("active");const i=document.createElement("li"),a=document.createElement("div");a.classList.toggle("flex-row");const r=document.createElement("i");r.classList.add(...t);const o=document.createElement("div");if(o.classList.toggle("menu-item-text"),e.tasks){const t=this.calculateProjectTasksAmount(e);o.innerHTML=`${e.title} <p class='tasks-amount'>${t} ${1===t?"Task":"Tasks"}</p>`}return a.appendChild(r),a.appendChild(o),i.appendChild(a),n.appendChild(i),n.addEventListener("click",(t=>{t.preventDefault(),this.controller.changeCurrentProject(e.id)})),n}}(new class{model;controller;view;menuView;constructor(){this.model=new r,this.menuView=new Te({model:this.model}),this.view=new Ee({menuView:this.menuView}),this.view.setModel(this.model),this.controller=new m({view:this.view,model:this.model}),this.view.setController(this.controller),this.menuView.setController(this.controller)}init(){this.controller.init()}}).init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
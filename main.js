(()=>{"use strict";class e{createdDate;title;description;dueDate;priority;isComplete;log;notes;checklist;constructor(e,t,s,a){this.id=class{static startingIndex=0;static nextIndex(){return this.startingIndex++}static reset(){this.startingIndex=0}}.nextIndex(),this.title=e,this.description=t,this.dueDate=s,this.priority=a,this.createdDate=new Date,this.isComplete=!1,this.notes=null,this.checklist=[],this.log=[]}isComplete(){return!0===isComplete}markAsComplete(){this.isComplete=!0}markAsNotComplete(){this.isComplete=!1}}class t{static LOW="low";static MEDIUM="medium";static HIGH="high";static DEFAULT="default"}const s={projects:[{id:1,title:"Website development",tasks:[new e("Update about page header","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,1,20),t.DEFAULT),new e("About page wording","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,1,22),t.HIGH),new e("New landing page layout","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,1,17),t.MEDIUM),new e("Update global iconset","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,1,27),t.LOW),new e("New case study thumbnails","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,1,28),t.DEFAULT)]},{id:2,title:"Groceries",tasks:[]}]};class a{currentProject;projects;data;constructor(){this.currentProject=null,this.projects=[],this.data=s,this.projects=this.data.projects}setCurrentProject(e){this.currentProject=e}getData(){return this.data.projects}}class i{constructor(){this.model=new a,this.projects=this.model.getData()}getProjectTasks(e){return this.projects.filter((t=>t.id===e))[0].tasks}}class o{projectController;tasks;projects;constructor(){this.tasks=[],this.projectController=new i}createTask(e,t,s,a){console.log("Creating new task",e,t,s,a)}getProjectTasks(e){return this.projectController.getProjectTasks(e)}setProjectTasks(e){this.tasks=this.getProjectTasks(e)}markTaskAsComplete(e){this.tasks.filter((t=>t.id===e)).markComplete()}}class n{content;taskController;constructor(){this.content=document.querySelector(".wrapper"),this.taskController=new o}init(){this.attachEventListeners(),console.log(this.taskController.getProjectTasks(1))}attachEventListeners(){this.addTaskDetailsToggleEventListeners(),this.addExpandHideAllEventListener(),this.addToggleMoreMenuListener(),this.addDeleteTaskClickListener(),this.addEditTaskClickListener(),this.addShowNewTaskModalEventListener(),this.addHideNewTaskModalEventListener(),this.addNewTaskSubmitListener()}addTaskDetailsToggleEventListeners(){const e=document.querySelectorAll(".task-menu .fa-chevron-down");for(let t of e)t.addEventListener("click",(e=>{const t=e.target.parentNode.parentNode;this.toggleTaskDetails(t)}))}toggleTaskDetails(e){if(e){e.querySelector(".task-details").classList.toggle("hide");const t=e.querySelector(".icon");t.classList.toggle("fa-chevron-up"),t.classList.toggle("fa-chevron-down")}}addExpandHideAllEventListener(){const e="Expand all",t=document.querySelector("#expand-all-hide-all-span");t.addEventListener("click",(s=>{const a=document.querySelectorAll(".task");if(a)if(new String(t.innerText.trim()).includes(e)){for(let e of a)this.showTaskDetails(e);t.textContent="Collapse all"}else{for(let e of a)this.hideTaskDetails(e);t.textContent=e}}))}showTaskDetails(e){e.querySelector(".task-details").classList.remove("hide");const t=e.querySelector(".task-menu .icon");t.classList.remove("fa-chevron-down"),t.classList.add("fa-chevron-up")}hideTaskDetails(e){e.querySelector(".task-details").classList.add("hide");const t=e.querySelector(".task-menu .icon");t.classList.remove("fa-chevron-up"),t.classList.add("fa-chevron-down")}addShowNewTaskModalEventListener(){const e=document.querySelector(".new-task-btn"),t=document.querySelector("#new-task-modal-wrapper");e.addEventListener("click",(e=>{this.showNewTaskModal(t)}))}showNewTaskModal(e){this.resetModalForm(),e.classList.remove("hide")}resetModalForm(){document.querySelector(".new-task-modal .form-row form").reset()}addHideNewTaskModalEventListener(){document.querySelector("#new-task-modal-wrapper").addEventListener("click",(e=>{e.stopPropagation(),e.target.classList.contains("modal-wrapper")&&this.animateModalClosing()})),document.querySelector(".modal-wrapper .close-btn").addEventListener("click",(e=>{this.animateModalClosing()}))}animateModalClosing(){const e=document.querySelector("#new-task-modal-wrapper"),t=e.querySelector(".new-task-modal");t.classList.add("modal-dissmis-animation"),e.classList.remove("wrapper-fade-in-animation"),e.classList.add("wrapper-fade-out-animation"),setTimeout((()=>{e.classList.add("hide"),t.classList.remove("modal-dissmis-animation"),e.classList.remove("wrapper-fade-out-animation"),e.classList.add("wrapper-fade-in-animation")}),600)}addNewTaskSubmitListener(){document.querySelector("#new-task-submit").addEventListener("click",(e=>{this.submitNewTaskModal(),this.animateModalClosing()}))}submitNewTaskModal(){console.log("New task submited!")}addToggleMoreMenuListener(){const e=document.querySelectorAll(".task-menu .more");for(let t of e)t.addEventListener("click",(e=>{const s=t.nextElementSibling;setTimeout((()=>{s.classList.toggle("hide")}),50)}));document.addEventListener("click",(e=>{if(!e.target.classList.contains("more-menu")&&!e.target.classList.contains("more-menu-option")){const e=document.querySelectorAll(".more-menu:not(.hide)");for(let t of e)t.classList.add("hide")}}))}addDeleteTaskClickListener(){const e=document.querySelectorAll(".more-menu-option.delete");console.log(e);for(let t of e){const e=t.parentElement.parentElement.parentElement.parentElement.parentElement.getAttribute("data-index");t.addEventListener("click",this.handleDeleteTask.bind(this,e))}}handleDeleteTask(e){console.log("Deleting task with id "+e)}addEditTaskClickListener(){const e=document.querySelectorAll(".more-menu-option.edit");for(let t of e){const e=t.parentElement.parentElement.parentElement.parentElement.parentElement.getAttribute("data-index");t.addEventListener("click",this.handleEditTask.bind(this,e))}}handleEditTask(e){console.log("Editing task with id "+e)}}class r{constructor(){}}let l=new class{model;controller;view;constructor(){this.model=new a,this.controller=new n,this.view=new r}init(){this.controller.init()}start(){}};l.init(),l.start()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
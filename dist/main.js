(()=>{"use strict";class e{value=0;setStartingValue(e){this.value=e}getID(){return this.value++}reset(){this.value=0}}let t=0;class n{createdDate;title;description;dueDate;priority;isComplete;isCollapsed;log;notes;checklist;constructor(e,n,i,a){this.id=class{static nextIndex(){return t++}static reset(){t=0}}.nextIndex(),this.title=e,this.description=n,this.dueDate=i,this.priority=a,this.createdDate=new Date,this.isComplete=!1,this.isCollapsed=!0,this.notes=null,this.checklist=[],this.log=[]}isComplete(){return!0===isComplete}markAsComplete(){this.isComplete=!0}markAsNotComplete(){this.isComplete=!1}toggleComplete(){this.isComplete=!this.isComplete}setIsCollapsed(e){this.isCollapsed=e}toggleIsCollapsed(){this.isCollapsed=!this.isCollapsed}getDOMElement(){let e,t;switch(this.priority){case PriorityType.DEFAULT:e="bg-light",t="priority-default-border";break;case PriorityType.HIGH:e="bg-danger",t="priority-high-border";break;case PriorityType.MEDIUM:e="bg-medium",t="priority-medium-border";break;case PriorityType.LOW:e="bg-low",t="priority-low-border"}const n=document.createElement("div");n.classList.add("task",t),n.setAttribute("data-index",this.id);const i=document.createElement("div");i.classList.add("task-content");const a=document.createElement("input");a.setAttribute("type","checkbox"),this.isComplete&&a.setAttribute("checked",""),a.id=`task-${this.id}`,i.appendChild(a);const r=document.createElement("div");r.classList.add("checkbox-wrapper");const s=document.createElement("label");s.setAttribute("for",`task-${this.id}`);const o=document.createElement("span");o.classList.add("checkbox");const d=document.createElement("span");d.classList.add("check"),o.appendChild(d),s.appendChild(o),r.appendChild(s),i.appendChild(r);const c=document.createElement("div");c.classList.add("task-text");const l=document.createElement("div");l.classList.add("title"),l.textContent=this.title,c.appendChild(l);const u=document.createElement("div");u.classList.add("task-details","hide");const m=document.createElement("div");m.classList.add("description","font-sm"),m.textContent=this.description;const h=document.createElement("div");h.classList.add("flex-row");const p=document.createElement("div");p.classList.add("priority",e,"font-sm"),p.textContent=Utils.capitalize(this.priority);const g=document.createElement("div");g.classList.add("due-date","font-sm"),g.innerHTML=`Due date <span class='date'>${this.dueDate}</span>`,u.appendChild(m),h.appendChild(p),h.appendChild(g),u.appendChild(h),c.appendChild(u),i.appendChild(c),n.appendChild(i);const f=document.createElement("div");f.classList.add("task-menu");const v=document.createElement("i");v.classList.add("fas","fa-chevron-down","icon","chevron"),f.appendChild(v);const w=document.createElement("i");w.classList.add("fas","fa-ellipsis-v","icon","more"),f.appendChild(w);const C=document.createElement("more-menu");C.classList.add("more-menu","hide");const k=document.createElement("ul"),y=document.createElement("li");y.classList.add("more-menu-option","edit"),y.innerHTML="<i class='far fa-edit icon'></i> Edit";const L=document.createElement("li");return L.classList.add("more-menu-option","delete"),L.innerHTML="<i class='far fa-trash-alt icon'></i> Delete",k.appendChild(y),k.appendChild(L),C.appendChild(k),f.appendChild(C),n.appendChild(f),n}}class i{static LOW="low";static MEDIUM="medium";static HIGH="high";static DEFAULT="default"}const a={projects:[{id:0,title:"Overview",description:"Look at all your projects and choose which one you want to check"},{id:1,title:"Website redesign",description:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ",tasks:[new n("Update about page header","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,1,20),i.DEFAULT),new n("Fix bug in deployment script","Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,19),i.MEDIUM),new n("Update contact page header","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,1,20),i.DEFAULT),new n("About page wording","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,22),i.HIGH),new n("New landing page layout","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,17),i.MEDIUM),new n("Update global iconset","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,1,27),i.LOW),new n("New case study thumbnails","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,28),i.DEFAULT)],done:[]},{id:2,title:"Groceries",description:"List of groceries to buy on the nearest trip to the shop. Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit.",tasks:[new n("Buy Pizza","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,30),i.HIGH),new n("Tomatoes","Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,30),i.DEFAULT)],done:[]},{id:3,title:"Workout",description:"Exercises to do to stay fit. Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit.",tasks:[new n("50 BrzuszkÃ³w","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,30),i.DEFAULT),new n("50 Pompek","Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,30),i.DEFAULT)],done:[]},{id:4,title:"Reading",description:"List of books to read. Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit.",tasks:[new n("Lord of The Rings: The Fellowship of the Ring","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,30),i.MEDIUM),new n("Do Androids Dream of Electric Sheep","Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,30),i.LOW)],done:[]}],logs:[]};class r{currentProject;currentProjectId;projects;data;projectIDSupplier;constructor(){this.data=a,this.projects=this.data.projects,this.currentProjectId=0,this.projectIDSupplier=new e,this.init()}init(){if(this.projects&&this.projects.length>0){const e=this.projects.length;this.projectIDSupplier.setStartingValue(e)}this.currentProject=this.getInitialProject()}setCurrentProject(e){this.currentProject=e}setCurrentProjectId(e){this.currentProject=this.projects.filter((t=>t.id===e))[0],this.currentProjectId=parseInt(e),this.setCurrentProject(this.getProjectById(this.currentProjectId))}getCurrentProject(){return this.currentProject}getCurrentProjectId(){return this.currentProjectId}getProjects(){return this.data.projects}getData(){return this.data}getProjectById(e){return this.data.projects.filter((t=>t.id===e))[0]}getProjectOverview(){let e=[];return this.data.projects.map((t=>{0!==t.id&&e.push({name:t.title,id:t.id,tasks:this.calculateTasks(t.tasks)})})),e}getProjectsCount(){return this.getProjectOverview().length}calculateTasks(e){return e.reduce(((e,t)=>e+(t.isComplete?0:1)),0)}getInitialProject(){return this.projects.filter((e=>0===e.id))[0]}getTaskById(e){e=parseInt(e);const t=this.currentProject.tasks.filter((t=>t.id===e))[0];if(t)return t;{const t=this.currentProject.done.filter((t=>t.id===e))[0];if(t)return t;console.error("Model.getTaskById(): Done task not found")}}setTaskAsComplete(e){e.isComplete=!0}addTask(e){this.currentProject.tasks.unshift(e)}setTaskIsComplete(e,t){let n,i;!0===t?(n=this.currentProject.tasks,i=this.currentProject.done):(n=this.currentProject.done,i=this.currentProject.tasks);const a=n.filter((t=>t.id===e))[0];a.isComplete=t;const r=n.indexOf(a);n.splice(r,1),i.unshift(a)}deleteTaskById(e){const t=this.getTaskById(e);if(t){const e=this.currentProject.tasks.indexOf(t);if(-1!==e)this.currentProject.tasks.splice(e,1),console.log("task deleted");else{const e=this.currentProject.done.indexOf(t);-1!=e&&(this.currentProject.done.splice(e,1),console.log("done task deleted"))}}}addProject(e){e.id=this.projectIDSupplier.getID(),this.projects.push(e)}}function s(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function o(e){s(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function d(e,t){s(2,arguments);var n=o(e),i=o(t);return n.getTime()>i.getTime()}class c{validationMessages;isFormEmpty;validTask;form=document.querySelector(".new-task-modal");constructor(){this.validTask={},this.isFormEmpty=!0,this.init()}init(){this.resetValidationMessages(),this.addBlurEventListeners()}resetValidationMessages(){this.validationMessages={title:[],description:[],dueDate:[]},this.clearValidationMessages()}isValid(){this.validateInputs();for(let e in this.validationMessages)if(0!==this.validationMessages[e].length)return!1;return!0}validateInputs(){this.validateTitleInput(),this.validateDescriptionInput(),this.validateDueDateInput()}validateTitleInput(){const e=this.form.querySelector("#task-title").value,t=this.form.querySelector("#form-label-title .validation-msg");if(t.textContent="",e)this.validTask.title=e;else{const e="*  Please enter task title";this.validationMessages.title.includes(e)||this.validationMessages.title.push(e),t.textContent=e}}validateDescriptionInput(){const e=this.form.querySelector("#task-description").value,t=this.form.querySelector("#form-label-description .validation-msg");if(t.textContent="",e)this.validTask.description=e;else{const e="* Please enter task description";this.validationMessages.description.includes(e)||this.validationMessages.description.push(e),t.textContent=e}}validateDueDateInput(){const e=this.form.querySelector("#task-due-date").value,t=this.form.querySelector("#form-label-due-date .validation-msg");if(t.textContent="",e&&d(new Date(e),new Date))this.validTask.dueDate=new Date(e);else{const e="* Please enter task due date that's in the future";this.validationMessages.dueDate.includes(e)||this.validationMessages.dueDate.push(e),t.textContent=e}}addBlurEventListeners(){this.form.querySelector("#task-title").addEventListener("blur",(e=>{this.validateTitleInput()})),this.form.querySelector("#task-description").addEventListener("blur",(e=>{this.validateDescriptionInput()})),this.form.querySelector("#task-due-date").addEventListener("input",(e=>{this.validateDueDateInput()}))}clearValidationMessages(){const e=document.querySelectorAll(".validation-msg");for(let t of e)t.textContent=""}getTask(){const e=new n(this.validTask.title,this.validTask.description,this.validTask.dueDate);return e.priority=this.getPriorityValue(),e}getPriorityValue(){return this.form.querySelector('#new-task-form input[type="radio"]:checked').value}}class l{validationMessages;isFormEmpty;validProject;form=document.querySelector("#new-project-modal-wrapper .new-task-modal");constructor(){this.validProject={},this.isFormEmpty=!0,this.init()}init(){this.resetValidationMessages(),this.addBlurEventListeners()}resetValidationMessages(){this.validationMessages={title:[],description:[]},this.clearValidationMessages()}isValid(){this.validateInputs();for(let e in this.validationMessages)if(0!==this.validationMessages[e].length)return!1;return!0}validateInputs(){this.validateTitleInput(),this.validateDescriptionInput()}validateTitleInput(){const e=this.form.querySelector("#project-title").value,t=this.form.querySelector("#form-label-project-title .validation-msg");if(t.textContent="",e)this.validProject.title=e;else{const e="*  Please enter project title";this.validationMessages.title.includes(e)||this.validationMessages.title.push(e),t.textContent=e}}validateDescriptionInput(){const e=this.form.querySelector("#project-description").value,t=this.form.querySelector("#form-label-project-description .validation-msg");if(t.textContent="",e)this.validProject.description=e;else{const e="* Please enter project description";this.validationMessages.description.includes(e)||this.validationMessages.description.push(e),t.textContent=e}}addBlurEventListeners(){this.form.querySelector("#project-title").addEventListener("blur",(e=>{this.validateTitleInput()})),this.form.querySelector("#project-description").addEventListener("blur",(e=>{this.validateDescriptionInput()}))}clearValidationMessages(){const e=document.querySelectorAll("#new-project-modal-wrapper .validation-msg");for(let t of e)t.textContent=""}getProject(){return{title:this.validProject.title,description:this.validProject.description,tasks:[],done:[]}}}class u{content;taskController;view;model;formValidation;constructor(e){this.content=document.querySelector(".wrapper"),this.formValidation=new c,this.projectFormValidation=new l,e.view&&(this.view=e.view),e.model&&(this.model=e.model)}init(){this.attachEventListeners(),this.render()}getCurrentProject(){return this.model.getCurrentProject()}changeCurrentProject(e){this.model.setCurrentProjectId(e),this.render()}render(){this.view.render();const e=document.querySelector(".new-task-btn");setTimeout((()=>{0!==this.model.getCurrentProjectId()?(this.addNewListElementsEventListeners(),e.classList.remove("hide")):(this.addOverviewPageEventListeners(),e.classList.add("hide"))}),500)}attachEventListeners(){this.addShowNewTaskModalEventListener(),this.addHideNewTaskModalEventListener(),this.addNewTaskSubmitListener(),this.addToggleDarkModeClickListener()}addNewListElementsEventListeners(){this.addToggleCompleteEventListener(),this.addTaskDetailsToggleEventListeners(),this.addExpandHideAllEventListener(),this.addToggleMoreMenuListener(),this.addDeleteTaskClickListener(),this.addEditTaskClickListener(),this.addHideDeleteTaskModalEventListener(),this.addConfirmDeleteTaskButtonClickListener()}addToggleCompleteEventListener(){const e=document.querySelectorAll('input[type="checkbox"]');for(let t of e)t.addEventListener("change",(e=>{const t=parseInt(e.target.id.split("-")[1]);this.toggleTaskComplete(t,e.target.checked)}))}toggleTaskComplete(e,t){console.log("toggle task complete"),this.model.setTaskIsComplete(e,t),this.render()}addTaskDetailsToggleEventListeners(){const e=document.querySelectorAll(".task-menu .icon.chevron");for(let t of e)t.addEventListener("click",(e=>{const t=e.target.parentNode.parentNode;this.toggleTaskDetails(t)}))}toggleTaskDetails(e){if(e){e.querySelector(".task-details").classList.toggle("hide");const t=e.querySelector(".icon");t.classList.toggle("fa-chevron-up"),t.classList.toggle("fa-chevron-down");const n=this.model.getTaskById(e.getAttribute("data-index"));n.toggleIsCollapsed(),console.log(n.isCollapsed)}}addExpandHideAllEventListener(){const e=document.querySelector("#expand-all-hide-all-span");e.addEventListener("click",(t=>{const n=document.querySelectorAll(".task");if(n){if(new String(e.innerText.trim()).includes("Expand all")){this.view.allExpanded=!0;for(let e of n)this.showTaskDetails(e)}else{this.view.allExpanded=!1;for(let e of n)this.hideTaskDetails(e)}this.render()}}))}showTaskDetails(e){this.model.getTaskById(e.getAttribute("data-index")).setIsCollapsed(!1);const t=e.querySelector(".task-menu .icon");t.classList.remove("fa-chevron-down"),t.classList.add("fa-chevron-up")}hideTaskDetails(e){this.model.getTaskById(e.getAttribute("data-index")).setIsCollapsed(!0);const t=e.querySelector(".task-menu .icon");t.classList.remove("fa-chevron-up"),t.classList.add("fa-chevron-down")}addShowNewTaskModalEventListener(){const e=document.querySelector(".new-task-btn"),t=document.querySelector("#new-task-modal-wrapper");e.addEventListener("click",(e=>{this.showNewTaskModal(t)}))}showNewTaskModal(e){this.resetModalForm(),window.scrollTo(0,0),e.classList.remove("hide")}resetModalForm(){document.querySelector("#new-task-form").reset()}addHideNewTaskModalEventListener(){document.querySelector("#new-task-modal-wrapper").addEventListener("click",(e=>{e.stopPropagation(),e.target.classList.contains("modal-wrapper")&&this.animateModalClosing()})),document.querySelector(".modal-wrapper .close-btn").addEventListener("click",(e=>{this.animateModalClosing()}))}animateModalClosing(){const e=document.querySelector("#new-task-modal-wrapper"),t=e.querySelector(".new-task-modal");t.classList.add("modal-dissmis-animation"),e.classList.remove("wrapper-fade-in-animation"),e.classList.add("wrapper-fade-out-animation"),setTimeout((()=>{e.classList.add("hide"),t.classList.remove("modal-dissmis-animation"),e.classList.remove("wrapper-fade-out-animation"),e.classList.add("wrapper-fade-in-animation")}),600)}addNewTaskSubmitListener(){document.querySelector("#new-task-submit").addEventListener("click",(e=>{if(e.preventDefault(),this.formValidation.init(),this.formValidation.isValid()){const e=this.formValidation.getTask();console.log(e),this.submitNewTaskModal(e),this.animateModalClosing()}}))}submitNewTaskModal(e){this.model.addTask(e),this.render()}addToggleMoreMenuListener(){const e=document.querySelectorAll(".task-menu .more");for(let t of e)t.addEventListener("click",(e=>{const n=t.nextElementSibling;setTimeout((()=>{n.classList.toggle("hide")}),50)}));document.addEventListener("click",(e=>{if(!e.target.classList.contains("more-menu")&&!e.target.classList.contains("more-menu-option")){const e=document.querySelectorAll(".more-menu:not(.hide)");for(let t of e)t.classList.add("hide")}}))}addDeleteTaskClickListener(){const e=document.querySelectorAll(".more-menu-option.delete");for(let t of e){const e=t.parentElement.parentElement.parentElement.parentElement.getAttribute("data-index");t.addEventListener("click",this.handleDeleteTask.bind(this,e))}}handleDeleteTask(e){console.log("Deleting task with id "+e),document.querySelectorAll(".task-menu .more-menu").forEach((e=>{e.classList.add("hide")})),this.confirmDeletingTask(parseInt(e))&&this.model.deleteTask(e)}confirmDeletingTask(e){return this.showConfirmDeleteModal(e),!1}showConfirmDeleteModal(e){const t=this.model.getTaskById(e),n=document.querySelector("#confirm-task-delete-modal");n.querySelector(".task-title").textContent=t.title,n.querySelector("#delete-confirm").setAttribute("data-id",e),n.classList.remove("hide")}addConfirmDeleteTaskButtonClickListener(){const e=document.querySelector("#confirm-task-delete-modal #delete-confirm");e.addEventListener("click",(t=>{const n=e.getAttribute("data-id");this.model.deleteTaskById(n),this.animateDeleteTaskModalClosing(),this.render()}))}addHideDeleteTaskModalEventListener(){const e=document.querySelector("#confirm-task-delete-modal");e.addEventListener("click",(e=>{e.stopPropagation(),e.target.classList.contains("modal-wrapper")&&this.animateDeleteTaskModalClosing()})),document.querySelector("#confirm-task-delete-modal .close-btn").addEventListener("click",(e=>{this.animateDeleteTaskModalClosing()})),e.querySelector("#delete-cancel").addEventListener("click",(e=>{this.animateDeleteTaskModalClosing()}))}animateDeleteTaskModalClosing(){const e=document.querySelector("#confirm-task-delete-modal"),t=e.querySelector(".new-task-modal");t.classList.add("modal-dissmis-animation"),e.classList.remove("wrapper-fade-in-animation"),e.classList.add("wrapper-fade-out-animation"),setTimeout((()=>{e.classList.add("hide"),t.classList.remove("modal-dissmis-animation"),e.classList.remove("wrapper-fade-out-animation"),e.classList.add("wrapper-fade-in-animation")}),600)}addEditTaskClickListener(){const e=document.querySelectorAll(".more-menu-option.edit");for(let t of e){const e=t.parentElement.parentElement.parentElement.parentElement.parentElement.getAttribute("data-index");t.addEventListener("click",this.handleEditTask.bind(this,e))}}handleEditTask(e){console.log("Editing task with id "+e)}addToggleDarkModeClickListener(){console.log("Darkmode toggle listener attached");const e=document.querySelector(".dark-mode-icon");e?e.addEventListener("click",(e=>{document.querySelector("body").classList.toggle("dark-mode")})):console.log("Dark-mode switch button not found")}addOverviewPageEventListeners(){this.addProjectTileClickListener(),this.addNewProjectButtonListener(),this.addHideNewProjectModalEventListener(),this.addNewProjectSubmitListener()}addProjectTileClickListener(){document.querySelectorAll(".project-grid-item:not(.new-project-btn)").forEach((e=>{e.addEventListener("click",(e=>{const t=e.target.parentElement.getAttribute("data-project-index");this.changeCurrentProject(t)}))}))}addNewProjectButtonListener(){document.querySelectorAll(".new-project-btn").forEach((e=>{e.addEventListener("click",(e=>{this.openNewProjectModal()}))}))}openNewProjectModal(){this.resetNewProjectModalForm(),document.querySelector("#new-project-modal-wrapper").classList.remove("hide")}resetNewProjectModalForm(){document.querySelector("#new-project-form").reset()}addHideNewProjectModalEventListener(){document.querySelector("#new-project-modal-wrapper").addEventListener("click",(e=>{e.stopPropagation(),e.target.classList.contains("modal-wrapper")&&this.animateNewProjectModalClosing()})),document.querySelector("#new-project-modal-wrapper .close-btn").addEventListener("click",(e=>{this.animateNewProjectModalClosing()}))}animateNewProjectModalClosing(){const e=document.querySelector("#new-project-modal-wrapper"),t=e.querySelector(".new-task-modal");t.classList.add("modal-dissmis-animation"),e.classList.remove("wrapper-fade-in-animation"),e.classList.add("wrapper-fade-out-animation"),setTimeout((()=>{e.classList.add("hide"),t.classList.remove("modal-dissmis-animation"),e.classList.remove("wrapper-fade-out-animation"),e.classList.add("wrapper-fade-in-animation")}),600)}addNewProjectSubmitListener(){document.querySelector("#new-project-submit").addEventListener("click",(e=>{if(e.preventDefault(),this.projectFormValidation.init(),this.projectFormValidation.isValid()){const e=this.projectFormValidation.getProject();console.log(e),this.submitNewProjectModal(e),this.animateNewProjectModalClosing()}}))}submitNewProjectModal(e){console.log("Submitting new project"),this.model.addProject(e),this.render()}}function m(e){return s(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}function h(e){if(s(1,arguments),!m(e)&&"number"!=typeof e)return!1;var t=o(e);return!isNaN(Number(t))}var p={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function g(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,i=e.formats[n]||e.formats[e.defaultWidth];return i}}var f,v={date:g({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:g({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:g({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},w={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function C(e){return function(t,n){var i,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,s=a.width?String(a.width):r;i=e.formattingValues[s]||e.formattingValues[r]}else{var o=e.defaultWidth,d=a.width?String(a.width):e.defaultWidth;i=e.values[d]||e.values[o]}return i[e.argumentCallback?e.argumentCallback(t):t]}}function k(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=n.width,a=i&&e.matchPatterns[i]||e.matchPatterns[e.defaultMatchWidth],r=t.match(a);if(!r)return null;var s,o=r[0],d=i&&e.parsePatterns[i]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(d)?L(d,(function(e){return e.test(o)})):y(d,(function(e){return e.test(o)}));s=e.valueCallback?e.valueCallback(c):c,s=n.valueCallback?n.valueCallback(s):s;var l=t.slice(o.length);return{value:s,rest:l}}}function y(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function L(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}const b={code:"en-US",formatDistance:function(e,t,n){var i,a=p[e];return i="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+i:i+" ago":i},formatLong:v,formatRelative:function(e,t,n,i){return w[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),i=n%100;if(i>20||i<10)switch(i%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:C({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:C({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:C({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:C({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:C({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(f={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(f.matchPattern);if(!n)return null;var i=n[0],a=e.match(f.parsePattern);if(!a)return null;var r=f.valueCallback?f.valueCallback(a[0]):a[0];r=t.valueCallback?t.valueCallback(r):r;var s=e.slice(i.length);return{value:r,rest:s}}),era:k({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:k({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:k({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:k({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:k({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function T(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function E(e,t){s(2,arguments);var n=o(e).getTime(),i=T(t);return new Date(n+i)}function M(e,t){s(2,arguments);var n=T(t);return E(e,-n)}var D=864e5;function j(e){s(1,arguments);var t=1,n=o(e),i=n.getUTCDay(),a=(i<t?7:0)+i-t;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function P(e){s(1,arguments);var t=o(e),n=t.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(n+1,0,4),i.setUTCHours(0,0,0,0);var a=j(i),r=new Date(0);r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0);var d=j(r);return t.getTime()>=a.getTime()?n+1:t.getTime()>=d.getTime()?n:n-1}function x(e){s(1,arguments);var t=P(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var i=j(n);return i}var S=6048e5;function q(e,t){s(1,arguments);var n=t||{},i=n.locale,a=i&&i.options&&i.options.weekStartsOn,r=null==a?0:T(a),d=null==n.weekStartsOn?r:T(n.weekStartsOn);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=o(e),l=c.getUTCDay(),u=(l<d?7:0)+l-d;return c.setUTCDate(c.getUTCDate()-u),c.setUTCHours(0,0,0,0),c}function I(e,t){s(1,arguments);var n=o(e),i=n.getUTCFullYear(),a=t||{},r=a.locale,d=r&&r.options&&r.options.firstWeekContainsDate,c=null==d?1:T(d),l=null==a.firstWeekContainsDate?c:T(a.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=new Date(0);u.setUTCFullYear(i+1,0,l),u.setUTCHours(0,0,0,0);var m=q(u,t),h=new Date(0);h.setUTCFullYear(i,0,l),h.setUTCHours(0,0,0,0);var p=q(h,t);return n.getTime()>=m.getTime()?i+1:n.getTime()>=p.getTime()?i:i-1}function U(e,t){s(1,arguments);var n=t||{},i=n.locale,a=i&&i.options&&i.options.firstWeekContainsDate,r=null==a?1:T(a),o=null==n.firstWeekContainsDate?r:T(n.firstWeekContainsDate),d=I(e,t),c=new Date(0);c.setUTCFullYear(d,0,o),c.setUTCHours(0,0,0,0);var l=q(c,t);return l}var N=6048e5;function A(e,t){for(var n=e<0?"-":"",i=Math.abs(e).toString();i.length<t;)i="0"+i;return n+i}const O=function(e,t){var n=e.getUTCFullYear(),i=n>0?n:1-n;return A("yy"===t?i%100:i,t.length)},H=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):A(n+1,2)},W=function(e,t){return A(e.getUTCDate(),t.length)},F=function(e,t){return A(e.getUTCHours()%12||12,t.length)},Y=function(e,t){return A(e.getUTCHours(),t.length)},B=function(e,t){return A(e.getUTCMinutes(),t.length)},V=function(e,t){return A(e.getUTCSeconds(),t.length)},z=function(e,t){var n=t.length,i=e.getUTCMilliseconds();return A(Math.floor(i*Math.pow(10,n-3)),t.length)};function X(e,t){var n=e>0?"-":"+",i=Math.abs(e),a=Math.floor(i/60),r=i%60;if(0===r)return n+String(a);var s=t||"";return n+String(a)+s+A(r,2)}function G(e,t){return e%60==0?(e>0?"-":"+")+A(Math.abs(e)/60,2):$(e,t)}function $(e,t){var n=t||"",i=e>0?"-":"+",a=Math.abs(e);return i+A(Math.floor(a/60),2)+n+A(a%60,2)}const R={G:function(e,t,n){var i=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(i,{width:"abbreviated"});case"GGGGG":return n.era(i,{width:"narrow"});default:return n.era(i,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var i=e.getUTCFullYear(),a=i>0?i:1-i;return n.ordinalNumber(a,{unit:"year"})}return O(e,t)},Y:function(e,t,n,i){var a=I(e,i),r=a>0?a:1-a;return"YY"===t?A(r%100,2):"Yo"===t?n.ordinalNumber(r,{unit:"year"}):A(r,t.length)},R:function(e,t){return A(P(e),t.length)},u:function(e,t){return A(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var i=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(i);case"QQ":return A(i,2);case"Qo":return n.ordinalNumber(i,{unit:"quarter"});case"QQQ":return n.quarter(i,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(i,{width:"narrow",context:"formatting"});default:return n.quarter(i,{width:"wide",context:"formatting"})}},q:function(e,t,n){var i=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(i);case"qq":return A(i,2);case"qo":return n.ordinalNumber(i,{unit:"quarter"});case"qqq":return n.quarter(i,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(i,{width:"narrow",context:"standalone"});default:return n.quarter(i,{width:"wide",context:"standalone"})}},M:function(e,t,n){var i=e.getUTCMonth();switch(t){case"M":case"MM":return H(e,t);case"Mo":return n.ordinalNumber(i+1,{unit:"month"});case"MMM":return n.month(i,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(i,{width:"narrow",context:"formatting"});default:return n.month(i,{width:"wide",context:"formatting"})}},L:function(e,t,n){var i=e.getUTCMonth();switch(t){case"L":return String(i+1);case"LL":return A(i+1,2);case"Lo":return n.ordinalNumber(i+1,{unit:"month"});case"LLL":return n.month(i,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(i,{width:"narrow",context:"standalone"});default:return n.month(i,{width:"wide",context:"standalone"})}},w:function(e,t,n,i){var a=function(e,t){s(1,arguments);var n=o(e),i=q(n,t).getTime()-U(n,t).getTime();return Math.round(i/N)+1}(e,i);return"wo"===t?n.ordinalNumber(a,{unit:"week"}):A(a,t.length)},I:function(e,t,n){var i=function(e){s(1,arguments);var t=o(e),n=j(t).getTime()-x(t).getTime();return Math.round(n/S)+1}(e);return"Io"===t?n.ordinalNumber(i,{unit:"week"}):A(i,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):W(e,t)},D:function(e,t,n){var i=function(e){s(1,arguments);var t=o(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var i=t.getTime(),a=n-i;return Math.floor(a/D)+1}(e);return"Do"===t?n.ordinalNumber(i,{unit:"dayOfYear"}):A(i,t.length)},E:function(e,t,n){var i=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(i,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(i,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(i,{width:"short",context:"formatting"});default:return n.day(i,{width:"wide",context:"formatting"})}},e:function(e,t,n,i){var a=e.getUTCDay(),r=(a-i.weekStartsOn+8)%7||7;switch(t){case"e":return String(r);case"ee":return A(r,2);case"eo":return n.ordinalNumber(r,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,i){var a=e.getUTCDay(),r=(a-i.weekStartsOn+8)%7||7;switch(t){case"c":return String(r);case"cc":return A(r,t.length);case"co":return n.ordinalNumber(r,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var i=e.getUTCDay(),a=0===i?7:i;switch(t){case"i":return String(a);case"ii":return A(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(i,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(i,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(i,{width:"short",context:"formatting"});default:return n.day(i,{width:"wide",context:"formatting"})}},a:function(e,t,n){var i=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(i,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(i,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(i,{width:"narrow",context:"formatting"});default:return n.dayPeriod(i,{width:"wide",context:"formatting"})}},b:function(e,t,n){var i,a=e.getUTCHours();switch(i=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(i,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(i,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(i,{width:"narrow",context:"formatting"});default:return n.dayPeriod(i,{width:"wide",context:"formatting"})}},B:function(e,t,n){var i,a=e.getUTCHours();switch(i=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(i,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(i,{width:"narrow",context:"formatting"});default:return n.dayPeriod(i,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var i=e.getUTCHours()%12;return 0===i&&(i=12),n.ordinalNumber(i,{unit:"hour"})}return F(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):Y(e,t)},K:function(e,t,n){var i=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(i,{unit:"hour"}):A(i,t.length)},k:function(e,t,n){var i=e.getUTCHours();return 0===i&&(i=24),"ko"===t?n.ordinalNumber(i,{unit:"hour"}):A(i,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):B(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):V(e,t)},S:function(e,t){return z(e,t)},X:function(e,t,n,i){var a=(i._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return G(a);case"XXXX":case"XX":return $(a);default:return $(a,":")}},x:function(e,t,n,i){var a=(i._originalDate||e).getTimezoneOffset();switch(t){case"x":return G(a);case"xxxx":case"xx":return $(a);default:return $(a,":")}},O:function(e,t,n,i){var a=(i._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+X(a,":");default:return"GMT"+$(a,":")}},z:function(e,t,n,i){var a=(i._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+X(a,":");default:return"GMT"+$(a,":")}},t:function(e,t,n,i){var a=i._originalDate||e;return A(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,i){return A((i._originalDate||e).getTime(),t.length)}};function Q(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function J(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}var _={p:J,P:function(e,t){var n,i=e.match(/(P+)(p+)?/)||[],a=i[1],r=i[2];if(!r)return Q(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",Q(a,t)).replace("{{time}}",J(r,t))}};const K=_;function Z(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var ee=["D","DD"],te=["YY","YYYY"];function ne(e){return-1!==ee.indexOf(e)}function ie(e){return-1!==te.indexOf(e)}function ae(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var re=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,se=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,oe=/^'([^]*?)'?$/,de=/''/g,ce=/[a-zA-Z]/;function le(e){return e.match(oe)[1].replace(de,"'")}function ue(e,t){s(2,arguments);var n=o(e),i=o(t),a=n.getTime()-i.getTime();return a<0?-1:a>0?1:a}function me(e,t){s(2,arguments);var n=o(e),i=o(t),a=n.getFullYear()-i.getFullYear(),r=n.getMonth()-i.getMonth();return 12*a+r}function he(e){s(1,arguments);var t=o(e);return t.setHours(23,59,59,999),t}function pe(e){s(1,arguments);var t=o(e),n=t.getMonth();return t.setFullYear(t.getFullYear(),n+1,0),t.setHours(23,59,59,999),t}function ge(e){s(1,arguments);var t=o(e);return he(t).getTime()===pe(t).getTime()}function fe(e,t){s(2,arguments);var n,i=o(e),a=o(t),r=ue(i,a),d=Math.abs(me(i,a));if(d<1)n=0;else{1===i.getMonth()&&i.getDate()>27&&i.setDate(30),i.setMonth(i.getMonth()-r*d);var c=ue(i,a)===-r;ge(o(e))&&1===d&&1===ue(e,a)&&(c=!1),n=r*(d-Number(c))}return 0===n?0:n}function ve(e,t){return s(2,arguments),o(e).getTime()-o(t).getTime()}var we={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(e){return e<0?Math.ceil(e):Math.floor(e)}};function Ce(e){return e?we[e]:we.trunc}function ke(e,t,n){s(2,arguments);var i=ve(e,t)/1e3;return Ce(null==n?void 0:n.roundingMethod)(i)}function ye(e){return function(e,t){if(null==e)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in t=t||{})Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}({},e)}var Le=1440,be=43200;class Te{container;project;controller;model;menuView;allExpanded;constructor(e){this.wrapper=document.querySelector(".content-wrapper"),this.container=document.createElement("div"),this.container.classList.add("container"),e.menuView&&(this.menuView=e.menuView),this.allExpanded=!1,this.init()}init(){}setController(e){this.controller=e,this.setCurrentProject()}setCurrentProject(){this.project=this.controller.getCurrentProject()}setProject(e){this.project=e}setModel(e){this.model=e}updateProject(){this.project=this.model.getCurrentProject()}render(){this.updateProject(),this.renderMenu(),0===this.project.id?this.renderOverview():this.renderTasksList()}renderMenu(){this.menuView.render()}renderOverview(){this.clearContainer();const e=document.createElement("div");e.classList.add("flex-row");const t=document.createElement("h1");t.classList.add("list-title"),t.textContent="Overview",e.appendChild(t),this.container.appendChild(e);const n=document.createElement("p");n.classList.add("list-description"),n.textContent="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",this.container.appendChild(n);const i=document.createElement("div");i.classList.add("project-grid-wrapper");const a=document.createElement("div");a.classList.add("project-grid"),this.model.getProjectOverview().map((e=>{a.appendChild(this.getProjectGridItem(e))})),a.appendChild(this.getNewProjectGridButton()),i.appendChild(a),this.container.appendChild(i),this.wrapper.appendChild(this.container)}getProjectGridItem(e){const t=document.createElement("div");t.classList.add("project-grid-item"),t.setAttribute("data-project-index",e.id);const n=document.createElement("div");n.classList.add("bg"),t.appendChild(n);const i=document.createElement("div");i.classList.add("text");const a=document.createElement("h2");a.classList.add("project-title"),a.textContent=e.name,i.appendChild(a);const r=document.createElement("span");return r.classList.add("task-count"),r.textContent=`${e.tasks} ${1===e.tasks?"task":"tasks"}`,i.appendChild(r),t.appendChild(i),t}getNewProjectGridButton(){const e=document.createElement("div");e.classList.add("project-grid-item","new-project-btn");const t=document.createElement("div");t.classList.add("bg"),e.appendChild(t);const n=document.createElement("div");n.classList.add("text");const i=document.createElement("h2");i.classList.add("project-title"),i.innerHTML="<i class='fa fa-plus'></i>",n.appendChild(i);const a=document.createElement("span");return a.classList.add("task-count"),a.textContent="New project",n.appendChild(a),e.appendChild(n),e}renderTasksList(){this.clearContainer(),this.container.classList.add("fade-in-animation"),this.container.appendChild(this.createProjectTitleAndMenu()),this.container.appendChild(this.createProjectDescription()),this.container.appendChild(this.createTasks()),this.wrapper.removeChild(document.querySelector(".container")),this.wrapper.appendChild(this.container)}clearContainer(){this.container.textContent=""}createProjectTitleAndMenu(){const e=document.createElement("div");e.classList.add("flex-row");const t=document.createElement("h1");t.classList.add("list-title"),t.textContent=this.project.title;const n=document.createElement("div");n.classList.add("push-right","align-center");const i=document.createElement("i");return i.classList.add("fas","fa-ellipsis-v"),n.appendChild(i),e.appendChild(t),e.appendChild(n),e}createProjectDescription(){const e=document.createElement("p");return e.classList.add("list-description"),e.textContent=this.project.description,e}createTasks(){const e=document.createElement("div");e.classList.add("tasks-wrapper");const t=document.createElement("div");t.classList.add("flex-row");const n=document.createElement("div");n.classList.add("tasks-title"),n.textContent="Todo",t.appendChild(n);const i=document.createElement("div");i.classList.add("push-right");const a=document.createElement("span");a.classList.add("font-sm"),a.id="expand-all-hide-all-span",this.allExpanded?(console.log("all expanded"),a.textContent="Collapse all"):(console.log("all collapsed"),a.textContent="Expand all"),i.appendChild(a),t.appendChild(i),e.appendChild(t);const r=document.createElement("form");for(let e of this.project.tasks)r.appendChild(this.getTaskDOMElement(e));if(e.appendChild(r),this.project.done&&this.project.done.length>0){const t=document.createElement("div");t.classList.add("tasks-title"),t.textContent="Done";const n=document.createElement("form");for(let e of this.project.done)n.appendChild(this.getTaskDOMElement(e));e.appendChild(t),e.appendChild(n)}return e}getTaskDOMElement(e){let t,n;switch(e.priority){case i.DEFAULT:t="bg-light",n="priority-default-border";break;case i.HIGH:t="bg-danger",n="priority-high-border";break;case i.MEDIUM:t="bg-medium",n="priority-medium-border";break;case i.LOW:t="bg-low",n="priority-low-border"}const a=document.createElement("div");a.classList.add("task",n),a.setAttribute("data-index",e.id);const r=document.createElement("div");r.classList.add("task-content");const c=document.createElement("input");c.setAttribute("type","checkbox"),e.isComplete&&c.setAttribute("checked",""),c.id=`task-${e.id}`,r.appendChild(c);const l=document.createElement("div");l.classList.add("checkbox-wrapper");const u=document.createElement("label");u.setAttribute("for",`task-${e.id}`);const m=document.createElement("span");m.classList.add("checkbox");const p=document.createElement("span");p.classList.add("check"),m.appendChild(p),u.appendChild(m),l.appendChild(u),r.appendChild(l);const g=document.createElement("div");g.classList.add("task-text");const f=document.createElement("div");f.classList.add("title"),f.textContent=e.title,g.appendChild(f);const v=document.createElement("div");v.classList.add("task-details"),e.isCollapsed?v.classList.add("hide"):v.classList.remove("hide");const w=document.createElement("div");w.classList.add("description","font-sm"),w.textContent=e.description;const C=document.createElement("div");C.classList.add("flex-row");const k=document.createElement("div");k.classList.add("priority",t,"font-sm"),k.textContent=class{static capitalize(e){return e.charAt(0).toUpperCase()+e.slice(1)}}.capitalize(e.priority);const y=document.createElement("div");y.classList.add("due-date","font-sm");const L=function(e,t,n){s(2,arguments);var i=String(t),a=n||{},r=a.locale||b,d=r.options&&r.options.firstWeekContainsDate,c=null==d?1:T(d),l=null==a.firstWeekContainsDate?c:T(a.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=r.options&&r.options.weekStartsOn,m=null==u?0:T(u),p=null==a.weekStartsOn?m:T(a.weekStartsOn);if(!(p>=0&&p<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!r.localize)throw new RangeError("locale must contain localize property");if(!r.formatLong)throw new RangeError("locale must contain formatLong property");var g=o(e);if(!h(g))throw new RangeError("Invalid time value");var f=Z(g),v=M(g,f),w={firstWeekContainsDate:l,weekStartsOn:p,locale:r,_originalDate:g};return i.match(se).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,K[t])(e,r.formatLong,w):e})).join("").match(re).map((function(n){if("''"===n)return"'";var i=n[0];if("'"===i)return le(n);var s=R[i];if(s)return!a.useAdditionalWeekYearTokens&&ie(n)&&ae(n,t,e),!a.useAdditionalDayOfYearTokens&&ne(n)&&ae(n,t,e),s(v,n,r.localize,w);if(i.match(ce))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return n})).join("")}(e.dueDate,"EEEE d LLLL y");let E;const D=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};s(2,arguments);var i=n.locale||b;if(!i.formatDistance)throw new RangeError("locale must contain formatDistance property");var a=ue(e,t);if(isNaN(a))throw new RangeError("Invalid time value");var r,d,c=ye(n);c.addSuffix=Boolean(n.addSuffix),c.comparison=a,a>0?(r=o(t),d=o(e)):(r=o(e),d=o(t));var l,u=ke(d,r),m=(Z(d)-Z(r))/1e3,h=Math.round((u-m)/60);if(h<2)return n.includeSeconds?u<5?i.formatDistance("lessThanXSeconds",5,c):u<10?i.formatDistance("lessThanXSeconds",10,c):u<20?i.formatDistance("lessThanXSeconds",20,c):u<40?i.formatDistance("halfAMinute",null,c):u<60?i.formatDistance("lessThanXMinutes",1,c):i.formatDistance("xMinutes",1,c):0===h?i.formatDistance("lessThanXMinutes",1,c):i.formatDistance("xMinutes",h,c);if(h<45)return i.formatDistance("xMinutes",h,c);if(h<90)return i.formatDistance("aboutXHours",1,c);if(h<Le){var p=Math.round(h/60);return i.formatDistance("aboutXHours",p,c)}if(h<2520)return i.formatDistance("xDays",1,c);if(h<be){var g=Math.round(h/Le);return i.formatDistance("xDays",g,c)}if(h<86400)return l=Math.round(h/be),i.formatDistance("aboutXMonths",l,c);if((l=fe(d,r))<12){var f=Math.round(h/be);return i.formatDistance("xMonths",f,c)}var v=l%12,w=Math.floor(l/12);return v<3?i.formatDistance("aboutXYears",w,c):v<9?i.formatDistance("overXYears",w,c):i.formatDistance("almostXYears",w+1,c)}(e.dueDate,new Date);E=d(new Date,e.dueDate)?`Overdue ${D}`:`Due in ${D}`,y.innerHTML=`${E} <span class='date'>(${L})</span>`,v.appendChild(w),C.appendChild(k),C.appendChild(y),v.appendChild(C),g.appendChild(v),r.appendChild(g),a.appendChild(r);const j=document.createElement("div");j.classList.add("task-menu");const P=document.createElement("i");P.classList.add("icon","chevron"),e.isCollapsed?P.classList.add("fas","fa-chevron-down"):P.classList.add("fas","fa-chevron-up"),j.appendChild(P);const x=document.createElement("i");x.classList.add("fas","fa-ellipsis-v","icon","more"),j.appendChild(x);const S=document.createElement("div");S.classList.add("more-menu","hide");const q=document.createElement("ul"),I=document.createElement("li");I.classList.add("more-menu-option","edit"),I.innerHTML="<i class='far fa-edit icon'></i> Edit";const U=document.createElement("li");return U.classList.add("more-menu-option","delete"),U.innerHTML="<i class='far fa-trash-alt icon'></i> Delete",q.appendChild(I),q.appendChild(U),S.appendChild(q),j.appendChild(S),a.appendChild(j),a}}class Ee{model;controller;constructor(e){e.model&&(this.model=e.model)}setController(e){this.controller=e}render(){const e=document.querySelector(".menu-left"),t=document.querySelector(".menu");e.replaceChild(this.getMenuDOM(),t)}getMenuDOM(){const e=["fas","fa-tasks"],t=document.createElement("div");t.classList.add("menu");const n=document.createElement("ul");n.classList.add("flex-grow"),this.model.getProjects();for(let t of this.model.getProjects())0===t.id?n.appendChild(this.getOverviewMenuItem(t)):n.appendChild(this.getMenuItem(t,e));const i=document.createElement("div");i.classList.add("line"),n.appendChild(i);const a=this.getMenuItem({title:"Done",tasks:[]},["far","fa-calendar-check"]);n.appendChild(a),t.appendChild(n);const r=document.createElement("ul");r.classList.add("push-bottom");const s=document.createElement("a");s.href="#",s.classList.add("menu-item");const o=document.createElement("li");o.innerHTML="<i class='fa fa-cog'></i> Logs",s.appendChild(o),r.appendChild(s);const d=document.createElement("a");d.href="#",d.classList.add("menu-item");const c=document.createElement("li");return c.innerHTML="<i class='fa fa-sign-out-alt'></i> Log out",d.appendChild(c),r.appendChild(d),t.appendChild(r),t}calculateProjectTasksAmount(e){return e.tasks.reduce(((e,t,n)=>e+(t.isComplete?0:1)),0)}getOverviewMenuItem(e){const t=document.createElement("a");t.href="#",t.setAttribute("data-menu-index",e.id),t.classList.add("menu-item"),this.model.getCurrentProjectId()===e.id&&t.classList.add("active");const n=document.createElement("li"),i=document.createElement("div");i.classList.toggle("flex-row");const a=document.createElement("i");a.classList.add("fa","fa-home");const r=document.createElement("div");r.classList.toggle("menu-item-text");const s=this.model.getProjectsCount();return r.innerHTML=`${e.title} <p class='tasks-amount'>${s} \n    ${1===s?"project":"projects"}</p>`,i.appendChild(a),i.appendChild(r),n.appendChild(i),t.appendChild(n),t.addEventListener("click",(t=>{t.preventDefault(),this.controller.changeCurrentProject(e.id)})),t}getMenuItem(e,t){const n=document.createElement("a");n.href="#",n.setAttribute("data-menu-index",e.id),n.classList.add("menu-item"),this.model.getCurrentProjectId()===e.id&&n.classList.add("active");const i=document.createElement("li"),a=document.createElement("div");a.classList.toggle("flex-row");const r=document.createElement("i");r.classList.add(...t);const s=document.createElement("div");if(s.classList.toggle("menu-item-text"),e.tasks){const t=this.calculateProjectTasksAmount(e);s.innerHTML=`${e.title} <p class='tasks-amount'>${t} ${1===t?"Task":"Tasks"}</p>`}return a.appendChild(r),a.appendChild(s),i.appendChild(a),n.appendChild(i),n.addEventListener("click",(t=>{t.preventDefault(),this.controller.changeCurrentProject(e.id)})),n}}(new class{model;controller;view;menuView;constructor(){this.model=new r,this.menuView=new Ee({model:this.model}),this.view=new Te({menuView:this.menuView}),this.view.setModel(this.model),this.controller=new u({view:this.view,model:this.model}),this.view.setController(this.controller),this.menuView.setController(this.controller)}init(){this.controller.init()}}).init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFJaFksRUFBa0IsQ0FDdENHLEtBQU1wSyxLQUFLb0ssS0FDWEMsTUFBT3JLLEtBQUtxSyxRQUdkckssS0FBS29LLEtBQUsrWCxjQUFjbmlCLEtBQUtpaUIsWUFFN0JqaUIsS0FBS2tpQixTQUFTQyxjQUFjbmlCLEtBQUtpaUIsWUFHbkMxZCxPQUNFdkUsS0FBS2lpQixXQUFXMWQsVUQzQmhCQSxRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3V0aWwvSURTdXBwbGllci5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvdXRpbC9JbmRleEdlbmVyYXRvci5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvZW50aXR5L1Rhc2suanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2VudGl0eS9Qcmlvcml0eVR5cGUuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL21vZGVsL1NhbXBsZURhdGEuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL21vZGVsL01vZGVsLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS90b0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc0FmdGVyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9jb250cm9sbGVyL05ld1Rhc2tNb2RhbFZhbGlkYXRpb25Db250cm9sbGVyLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9jb250cm9sbGVyL05ld1Byb2plY3RGb3JtVmFsaWRhdGlvbkNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2NvbnRyb2xsZXIvRGlzcGxheUNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1ZhbGlkL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL21hdGNoL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi90b0ludGVnZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9hZGRNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdWJNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0RheU9mWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDSVNPV2Vla1llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9saWdodEZvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2Zvcm1hdC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2NvbXBhcmVBc2MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9kaWZmZXJlbmNlSW5DYWxlbmRhck1vbnRocy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2VuZE9mRGF5L2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZW5kT2ZNb250aC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzTGFzdERheU9mTW9udGgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9kaWZmZXJlbmNlSW5Nb250aHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9kaWZmZXJlbmNlSW5NaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3JvdW5kaW5nTWV0aG9kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2RpZmZlcmVuY2VJblNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Nsb25lT2JqZWN0L2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9mb3JtYXREaXN0YW5jZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvdmlldy9Db250ZW50Vmlldy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvdXRpbC9VdGlscy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvdmlldy9NZW51Vmlldy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL0FwcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgSURTdXBwbGllciB7XG4gIHZhbHVlID0gMDtcblxuICBzZXRTdGFydGluZ1ZhbHVlKHZhbHVlKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0SUQoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWUrKztcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMudmFsdWUgPSAwO1xuICB9XG59IiwibGV0IHN0YXJ0aW5nSW5kZXggPSAwO1xuXG5leHBvcnQgY2xhc3MgSW5kZXhHZW5lcmF0b3Ige1xuXG4gIHN0YXRpYyBuZXh0SW5kZXgoKSB7XG4gICAgcmV0dXJuIHN0YXJ0aW5nSW5kZXgrKztcbiAgfVxuXG4gIHN0YXRpYyByZXNldCgpIHtcbiAgICBzdGFydGluZ0luZGV4ID0gMDtcbiAgfVxuXG59IiwiaW1wb3J0IHsgSW5kZXhHZW5lcmF0b3IgfSBmcm9tIFwiLi4vdXRpbC9JbmRleEdlbmVyYXRvclwiO1xuXG5leHBvcnQgY2xhc3MgVGFzayB7XG4gIGNyZWF0ZWREYXRlO1xuICB0aXRsZTtcbiAgZGVzY3JpcHRpb247XG4gIGR1ZURhdGU7XG4gIHByaW9yaXR5O1xuICBpc0NvbXBsZXRlO1xuICBpc0NvbGxhcHNlZDtcbiAgbG9nO1xuICAvLyBvcHRpb25hbD9cbiAgbm90ZXM7XG4gIGNoZWNrbGlzdDtcblxuICBjb25zdHJ1Y3Rvcih0aXRsZSwgZGVzY3JpcHRpb24sIGR1ZURhdGUsIHByaW9yaXR5KSB7XG4gICAgdGhpcy5pZCA9IEluZGV4R2VuZXJhdG9yLm5leHRJbmRleCgpO1xuICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgdGhpcy5kdWVEYXRlID0gZHVlRGF0ZTtcbiAgICB0aGlzLnByaW9yaXR5ID0gcHJpb3JpdHk7XG4gICAgdGhpcy5jcmVhdGVkRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgdGhpcy5pc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgdGhpcy5pc0NvbGxhcHNlZCA9IHRydWU7XG5cbiAgICB0aGlzLm5vdGVzID0gbnVsbDtcbiAgICB0aGlzLmNoZWNrbGlzdCA9IFtdO1xuICAgIHRoaXMubG9nID0gW107XG4gIH1cblxuICBpc0NvbXBsZXRlKCkge1xuICAgIHJldHVybiBpc0NvbXBsZXRlID09PSB0cnVlO1xuICB9XG5cbiAgbWFya0FzQ29tcGxldGUoKSB7XG4gICAgdGhpcy5pc0NvbXBsZXRlID0gdHJ1ZTtcbiAgfVxuXG4gIG1hcmtBc05vdENvbXBsZXRlKCkge1xuICAgIHRoaXMuaXNDb21wbGV0ZSA9IGZhbHNlO1xuICB9XG5cbiAgdG9nZ2xlQ29tcGxldGUoKSB7XG4gICAgdGhpcy5pc0NvbXBsZXRlID0gIXRoaXMuaXNDb21wbGV0ZTtcbiAgfVxuXG4gIHNldElzQ29sbGFwc2VkKHZhbHVlKSB7XG4gICAgdGhpcy5pc0NvbGxhcHNlZCA9IHZhbHVlO1xuICB9XG5cbiAgdG9nZ2xlSXNDb2xsYXBzZWQoKSB7XG4gICAgdGhpcy5pc0NvbGxhcHNlZCA9ICF0aGlzLmlzQ29sbGFwc2VkO1xuICB9XG5cbiAgZ2V0RE9NRWxlbWVudCgpIHtcbiAgICBsZXQgYmFja2dyb3VuZENvbG9yQ2xhc3M7XG4gICAgbGV0IGJvcmRlckNvbG9yQ2xhc3M7XG5cbiAgICBzd2l0Y2ggKHRoaXMucHJpb3JpdHkpIHtcbiAgICAgIGNhc2UgUHJpb3JpdHlUeXBlLkRFRkFVTFQ6XG4gICAgICAgIGJhY2tncm91bmRDb2xvckNsYXNzID0gXCJiZy1saWdodFwiO1xuICAgICAgICBib3JkZXJDb2xvckNsYXNzID0gXCJwcmlvcml0eS1kZWZhdWx0LWJvcmRlclwiO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBQcmlvcml0eVR5cGUuSElHSDpcbiAgICAgICAgYmFja2dyb3VuZENvbG9yQ2xhc3MgPSBcImJnLWRhbmdlclwiO1xuICAgICAgICBib3JkZXJDb2xvckNsYXNzID0gXCJwcmlvcml0eS1oaWdoLWJvcmRlclwiO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBQcmlvcml0eVR5cGUuTUVESVVNOlxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3JDbGFzcyA9IFwiYmctbWVkaXVtXCI7XG4gICAgICAgIGJvcmRlckNvbG9yQ2xhc3MgPSBcInByaW9yaXR5LW1lZGl1bS1ib3JkZXJcIjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgUHJpb3JpdHlUeXBlLkxPVzpcbiAgICAgICAgYmFja2dyb3VuZENvbG9yQ2xhc3MgPSBcImJnLWxvd1wiO1xuICAgICAgICBib3JkZXJDb2xvckNsYXNzID0gXCJwcmlvcml0eS1sb3ctYm9yZGVyXCI7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0YXNrRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFza1wiLCBib3JkZXJDb2xvckNsYXNzKTtcbiAgICB0YXNrRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWluZGV4XCIsIHRoaXMuaWQpO1xuXG4gICAgY29uc3QgdGFza0NvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRhc2tDb250ZW50LmNsYXNzTGlzdC5hZGQoXCJ0YXNrLWNvbnRlbnRcIik7XG5cbiAgICBjb25zdCBjaGVja2JveElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIGNoZWNrYm94SW5wdXQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImNoZWNrYm94XCIpO1xuICAgIGlmICh0aGlzLmlzQ29tcGxldGUpIHtcbiAgICAgIGNoZWNrYm94SW5wdXQuc2V0QXR0cmlidXRlKFwiY2hlY2tlZFwiLCBcIlwiKTtcbiAgICB9XG4gICAgY2hlY2tib3hJbnB1dC5pZCA9IGB0YXNrLSR7dGhpcy5pZH1gO1xuXG4gICAgdGFza0NvbnRlbnQuYXBwZW5kQ2hpbGQoY2hlY2tib3hJbnB1dCk7XG5cbiAgICBjb25zdCBjaGVja2JveFdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGNoZWNrYm94V3JhcHBlci5jbGFzc0xpc3QuYWRkKFwiY2hlY2tib3gtd3JhcHBlclwiKTtcbiAgICBjb25zdCBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgICBsYWJlbC5zZXRBdHRyaWJ1dGUoXCJmb3JcIiwgYHRhc2stJHt0aGlzLmlkfWApO1xuICAgIGNvbnN0IHNwYW5DaGVja2JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgIHNwYW5DaGVja2JveC5jbGFzc0xpc3QuYWRkKFwiY2hlY2tib3hcIik7XG4gICAgY29uc3Qgc3BhbkNoZWNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgc3BhbkNoZWNrLmNsYXNzTGlzdC5hZGQoXCJjaGVja1wiKTtcblxuICAgIHNwYW5DaGVja2JveC5hcHBlbmRDaGlsZChzcGFuQ2hlY2spO1xuICAgIGxhYmVsLmFwcGVuZENoaWxkKHNwYW5DaGVja2JveCk7XG4gICAgY2hlY2tib3hXcmFwcGVyLmFwcGVuZENoaWxkKGxhYmVsKTtcblxuICAgIHRhc2tDb250ZW50LmFwcGVuZENoaWxkKGNoZWNrYm94V3JhcHBlcik7XG5cbiAgICBjb25zdCB0YXNrVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGFza1RleHQuY2xhc3NMaXN0LmFkZChcInRhc2stdGV4dFwiKTtcblxuICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aXRsZS5jbGFzc0xpc3QuYWRkKFwidGl0bGVcIik7XG4gICAgdGl0bGUudGV4dENvbnRlbnQgPSB0aGlzLnRpdGxlO1xuXG4gICAgdGFza1RleHQuYXBwZW5kQ2hpbGQodGl0bGUpO1xuXG4gICAgY29uc3QgdGFza0RldGFpbHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRhc2tEZXRhaWxzLmNsYXNzTGlzdC5hZGQoXCJ0YXNrLWRldGFpbHNcIiwgXCJoaWRlXCIpO1xuXG4gICAgY29uc3QgdGFza0Rlc2NyaXB0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0YXNrRGVzY3JpcHRpb24uY2xhc3NMaXN0LmFkZChcImRlc2NyaXB0aW9uXCIsIFwiZm9udC1zbVwiKTtcbiAgICB0YXNrRGVzY3JpcHRpb24udGV4dENvbnRlbnQgPSB0aGlzLmRlc2NyaXB0aW9uO1xuXG4gICAgY29uc3QgZmxleFJvdzEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGZsZXhSb3cxLmNsYXNzTGlzdC5hZGQoXCJmbGV4LXJvd1wiKTtcblxuICAgIGNvbnN0IHByaW9yaXR5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBwcmlvcml0eS5jbGFzc0xpc3QuYWRkKFwicHJpb3JpdHlcIiwgYmFja2dyb3VuZENvbG9yQ2xhc3MsIFwiZm9udC1zbVwiKTtcbiAgICBwcmlvcml0eS50ZXh0Q29udGVudCA9IFV0aWxzLmNhcGl0YWxpemUodGhpcy5wcmlvcml0eSk7XG5cbiAgICBjb25zdCBkdWVEYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBkdWVEYXRlLmNsYXNzTGlzdC5hZGQoXCJkdWUtZGF0ZVwiLCBcImZvbnQtc21cIik7XG4gICAgZHVlRGF0ZS5pbm5lckhUTUwgPSBgRHVlIGRhdGUgPHNwYW4gY2xhc3M9J2RhdGUnPiR7dGhpcy5kdWVEYXRlfTwvc3Bhbj5gO1xuXG4gICAgdGFza0RldGFpbHMuYXBwZW5kQ2hpbGQodGFza0Rlc2NyaXB0aW9uKTtcblxuICAgIGZsZXhSb3cxLmFwcGVuZENoaWxkKHByaW9yaXR5KTtcbiAgICBmbGV4Um93MS5hcHBlbmRDaGlsZChkdWVEYXRlKTtcbiAgICB0YXNrRGV0YWlscy5hcHBlbmRDaGlsZChmbGV4Um93MSk7XG5cbiAgICB0YXNrVGV4dC5hcHBlbmRDaGlsZCh0YXNrRGV0YWlscyk7XG5cbiAgICB0YXNrQ29udGVudC5hcHBlbmRDaGlsZCh0YXNrVGV4dCk7XG4gICAgdGFza0VsZW1lbnQuYXBwZW5kQ2hpbGQodGFza0NvbnRlbnQpO1xuXG4gICAgY29uc3QgdGFza01lbnUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRhc2tNZW51LmNsYXNzTGlzdC5hZGQoXCJ0YXNrLW1lbnVcIik7XG5cbiAgICBjb25zdCBjaGV2cm9uSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpXCIpO1xuICAgIGNoZXZyb25JY29uLmNsYXNzTGlzdC5hZGQoXCJmYXNcIiwgXCJmYS1jaGV2cm9uLWRvd25cIiwgXCJpY29uXCIsIFwiY2hldnJvblwiKTtcbiAgICB0YXNrTWVudS5hcHBlbmRDaGlsZChjaGV2cm9uSWNvbik7XG5cbiAgICBjb25zdCBtb3JlSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpXCIpO1xuICAgIG1vcmVJY29uLmNsYXNzTGlzdC5hZGQoXCJmYXNcIiwgXCJmYS1lbGxpcHNpcy12XCIsIFwiaWNvblwiLCBcIm1vcmVcIik7XG4gICAgdGFza01lbnUuYXBwZW5kQ2hpbGQobW9yZUljb24pO1xuXG4gICAgY29uc3QgbW9yZU1lbnUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibW9yZS1tZW51XCIpO1xuICAgIG1vcmVNZW51LmNsYXNzTGlzdC5hZGQoXCJtb3JlLW1lbnVcIiwgXCJoaWRlXCIpO1xuXG4gICAgY29uc3QgbGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiKTtcblxuICAgIGNvbnN0IGVkaXRMaXN0SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcbiAgICBlZGl0TGlzdEl0ZW0uY2xhc3NMaXN0LmFkZChcIm1vcmUtbWVudS1vcHRpb25cIiwgXCJlZGl0XCIpO1xuICAgIGVkaXRMaXN0SXRlbS5pbm5lckhUTUwgPSBcIjxpIGNsYXNzPSdmYXIgZmEtZWRpdCBpY29uJz48L2k+IEVkaXRcIjtcblxuICAgIGNvbnN0IGRlbGV0ZUxpc3RJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgIGRlbGV0ZUxpc3RJdGVtLmNsYXNzTGlzdC5hZGQoXCJtb3JlLW1lbnUtb3B0aW9uXCIsIFwiZGVsZXRlXCIpO1xuICAgIGRlbGV0ZUxpc3RJdGVtLmlubmVySFRNTCA9IFwiPGkgY2xhc3M9J2ZhciBmYS10cmFzaC1hbHQgaWNvbic+PC9pPiBEZWxldGVcIjtcblxuICAgIGxpc3QuYXBwZW5kQ2hpbGQoZWRpdExpc3RJdGVtKTtcbiAgICBsaXN0LmFwcGVuZENoaWxkKGRlbGV0ZUxpc3RJdGVtKTtcblxuICAgIG1vcmVNZW51LmFwcGVuZENoaWxkKGxpc3QpO1xuICAgIHRhc2tNZW51LmFwcGVuZENoaWxkKG1vcmVNZW51KTtcblxuICAgIHRhc2tFbGVtZW50LmFwcGVuZENoaWxkKHRhc2tNZW51KTtcblxuICAgIHJldHVybiB0YXNrRWxlbWVudDtcbiAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIFByaW9yaXR5VHlwZSB7XG4gIHN0YXRpYyBMT1cgPSAnbG93JztcbiAgc3RhdGljIE1FRElVTSA9ICdtZWRpdW0nO1xuICBzdGF0aWMgSElHSCA9ICdoaWdoJztcbiAgc3RhdGljIERFRkFVTFQgPSAnZGVmYXVsdCc7XG59IiwiaW1wb3J0IHsgVGFzayB9IGZyb20gXCIuLi9lbnRpdHkvVGFza1wiO1xuaW1wb3J0IHsgUHJpb3JpdHlUeXBlIH0gZnJvbSBcIi4uL2VudGl0eS9Qcmlvcml0eVR5cGVcIjtcblxuZXhwb3J0IGNvbnN0IHNhbXBsZURhdGEgPSB7XG4gIHByb2plY3RzOiBbXG4gICAge1xuICAgICAgaWQ6IDAsXG4gICAgICB0aXRsZTogXCJPdmVydmlld1wiLFxuICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgIFwiTG9vayBhdCBhbGwgeW91ciBwcm9qZWN0cyBhbmQgY2hvb3NlIHdoaWNoIG9uZSB5b3Ugd2FudCB0byBjaGVja1wiLFxuICAgIH0sXG4gICAge1xuICAgICAgaWQ6IDEsXG4gICAgICB0aXRsZTogXCJXZWJzaXRlIHJlZGVzaWduXCIsXG4gICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gXCIsXG4gICAgICB0YXNrczogW1xuICAgICAgICBuZXcgVGFzayhcbiAgICAgICAgICBcIlVwZGF0ZSBhYm91dCBwYWdlIGhlYWRlclwiLFxuICAgICAgICAgIFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdFwiLFxuICAgICAgICAgIG5ldyBEYXRlKDIwMjIsIDEsIDIwKSxcbiAgICAgICAgICBQcmlvcml0eVR5cGUuREVGQVVMVFxuICAgICAgICApLFxuICAgICAgICBuZXcgVGFzayhcbiAgICAgICAgICBcIkZpeCBidWcgaW4gZGVwbG95bWVudCBzY3JpcHRcIixcbiAgICAgICAgICBcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIGxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIGxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIGxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIGxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIGxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIGxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXRcIixcbiAgICAgICAgICBuZXcgRGF0ZSgyMDIyLCAwLCAxOSksXG4gICAgICAgICAgUHJpb3JpdHlUeXBlLk1FRElVTVxuICAgICAgICApLFxuICAgICAgICBuZXcgVGFzayhcbiAgICAgICAgICBcIlVwZGF0ZSBjb250YWN0IHBhZ2UgaGVhZGVyXCIsXG4gICAgICAgICAgXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0XCIsXG4gICAgICAgICAgbmV3IERhdGUoMjAyMiwgMSwgMjApLFxuICAgICAgICAgIFByaW9yaXR5VHlwZS5ERUZBVUxUXG4gICAgICAgICksXG4gICAgICAgIG5ldyBUYXNrKFxuICAgICAgICAgIFwiQWJvdXQgcGFnZSB3b3JkaW5nXCIsXG4gICAgICAgICAgXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0XCIsXG4gICAgICAgICAgbmV3IERhdGUoMjAyMiwgMCwgMjIpLFxuICAgICAgICAgIFByaW9yaXR5VHlwZS5ISUdIXG4gICAgICAgICksXG4gICAgICAgIG5ldyBUYXNrKFxuICAgICAgICAgIFwiTmV3IGxhbmRpbmcgcGFnZSBsYXlvdXRcIixcbiAgICAgICAgICBcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXRcIixcbiAgICAgICAgICBuZXcgRGF0ZSgyMDIyLCAwLCAxNyksXG4gICAgICAgICAgUHJpb3JpdHlUeXBlLk1FRElVTVxuICAgICAgICApLFxuICAgICAgICBuZXcgVGFzayhcbiAgICAgICAgICBcIlVwZGF0ZSBnbG9iYWwgaWNvbnNldFwiLFxuICAgICAgICAgIFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdFwiLFxuICAgICAgICAgIG5ldyBEYXRlKDIwMjIsIDEsIDI3KSxcbiAgICAgICAgICBQcmlvcml0eVR5cGUuTE9XXG4gICAgICAgICksXG4gICAgICAgIG5ldyBUYXNrKFxuICAgICAgICAgIFwiTmV3IGNhc2Ugc3R1ZHkgdGh1bWJuYWlsc1wiLFxuICAgICAgICAgIFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdFwiLFxuICAgICAgICAgIG5ldyBEYXRlKDIwMjIsIDAsIDI4KSxcbiAgICAgICAgICBQcmlvcml0eVR5cGUuREVGQVVMVFxuICAgICAgICApLFxuICAgICAgXSxcbiAgICAgIGRvbmU6IFtdLFxuICAgIH0sXG4gICAge1xuICAgICAgaWQ6IDIsXG4gICAgICB0aXRsZTogXCJHcm9jZXJpZXNcIixcbiAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICBcIkxpc3Qgb2YgZ3JvY2VyaWVzIHRvIGJ1eSBvbiB0aGUgbmVhcmVzdCB0cmlwIHRvIHRoZSBzaG9wLiBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBsb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LlwiLFxuICAgICAgdGFza3M6IFtcbiAgICAgICAgbmV3IFRhc2soXG4gICAgICAgICAgXCJCdXkgUGl6emFcIixcbiAgICAgICAgICBcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXRcIixcbiAgICAgICAgICBuZXcgRGF0ZSgyMDIyLCAwLCAzMCksXG4gICAgICAgICAgUHJpb3JpdHlUeXBlLkhJR0hcbiAgICAgICAgKSxcbiAgICAgICAgbmV3IFRhc2soXG4gICAgICAgICAgXCJUb21hdG9lc1wiLFxuICAgICAgICAgIFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgbG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdFwiLFxuICAgICAgICAgIG5ldyBEYXRlKDIwMjIsIDAsIDMwKSxcbiAgICAgICAgICBQcmlvcml0eVR5cGUuREVGQVVMVFxuICAgICAgICApLFxuICAgICAgXSxcbiAgICAgIGRvbmU6IFtdLFxuICAgIH0sXG4gICAge1xuICAgICAgaWQ6IDMsXG4gICAgICB0aXRsZTogXCJXb3Jrb3V0XCIsXG4gICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgXCJFeGVyY2lzZXMgdG8gZG8gdG8gc3RheSBmaXQuIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIGxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuXCIsXG4gICAgICB0YXNrczogW1xuICAgICAgICBuZXcgVGFzayhcbiAgICAgICAgICBcIjUwIEJyenVzemvDs3dcIixcbiAgICAgICAgICBcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXRcIixcbiAgICAgICAgICBuZXcgRGF0ZSgyMDIyLCAwLCAzMCksXG4gICAgICAgICAgUHJpb3JpdHlUeXBlLkRFRkFVTFRcbiAgICAgICAgKSxcbiAgICAgICAgbmV3IFRhc2soXG4gICAgICAgICAgXCI1MCBQb21wZWtcIixcbiAgICAgICAgICBcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIGxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXRcIixcbiAgICAgICAgICBuZXcgRGF0ZSgyMDIyLCAwLCAzMCksXG4gICAgICAgICAgUHJpb3JpdHlUeXBlLkRFRkFVTFRcbiAgICAgICAgKSxcbiAgICAgIF0sXG4gICAgICBkb25lOiBbXSxcbiAgICB9LFxuICAgIHtcbiAgICAgIGlkOiA0LFxuICAgICAgdGl0bGU6IFwiUmVhZGluZ1wiLFxuICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgIFwiTGlzdCBvZiBib29rcyB0byByZWFkLiBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBsb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LlwiLFxuICAgICAgdGFza3M6IFtcbiAgICAgICAgbmV3IFRhc2soXG4gICAgICAgICAgXCJMb3JkIG9mIFRoZSBSaW5nczogVGhlIEZlbGxvd3NoaXAgb2YgdGhlIFJpbmdcIixcbiAgICAgICAgICBcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXRcIixcbiAgICAgICAgICBuZXcgRGF0ZSgyMDIyLCAwLCAzMCksXG4gICAgICAgICAgUHJpb3JpdHlUeXBlLk1FRElVTVxuICAgICAgICApLFxuICAgICAgICBuZXcgVGFzayhcbiAgICAgICAgICBcIkRvIEFuZHJvaWRzIERyZWFtIG9mIEVsZWN0cmljIFNoZWVwXCIsXG4gICAgICAgICAgXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBsb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0XCIsXG4gICAgICAgICAgbmV3IERhdGUoMjAyMiwgMCwgMzApLFxuICAgICAgICAgIFByaW9yaXR5VHlwZS5MT1dcbiAgICAgICAgKSxcbiAgICAgIF0sXG4gICAgICBkb25lOiBbXSxcbiAgICB9LFxuICBdLFxuICBsb2dzOiBbXVxufTtcbiIsImltcG9ydCB7IElEU3VwcGxpZXIgfSBmcm9tIFwiLi4vdXRpbC9JRFN1cHBsaWVyXCI7XG5pbXBvcnQgeyBzYW1wbGVEYXRhIH0gZnJvbSBcIi4vU2FtcGxlRGF0YVwiO1xuXG5jb25zdCBERUZBVUxUX1BST0pFQ1RfSUQgPSAwO1xuXG5leHBvcnQgY2xhc3MgTW9kZWwge1xuICBjdXJyZW50UHJvamVjdDtcbiAgY3VycmVudFByb2plY3RJZDtcbiAgcHJvamVjdHM7XG4gIGRhdGE7XG4gIHByb2plY3RJRFN1cHBsaWVyO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZGF0YSA9IHNhbXBsZURhdGE7XG4gICAgdGhpcy5wcm9qZWN0cyA9IHRoaXMuZGF0YS5wcm9qZWN0cztcbiAgICB0aGlzLmN1cnJlbnRQcm9qZWN0SWQgPSBERUZBVUxUX1BST0pFQ1RfSUQ7XG4gICAgdGhpcy5wcm9qZWN0SURTdXBwbGllciA9IG5ldyBJRFN1cHBsaWVyKCk7XG5cbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgLy8gRGV0ZXJtaW5lIHByb2plY3QgSUQgc3RhcnRpbmcgdmFsdWVcbiAgICBpZiAodGhpcy5wcm9qZWN0cyAmJiB0aGlzLnByb2plY3RzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IHN0YXJ0aW5nSWRlbnRpZmllciA9IHRoaXMucHJvamVjdHMubGVuZ3RoO1xuICAgICAgdGhpcy5wcm9qZWN0SURTdXBwbGllci5zZXRTdGFydGluZ1ZhbHVlKHN0YXJ0aW5nSWRlbnRpZmllcik7XG4gICAgfVxuXG4gICAgLy8gc2V0IGluaXRpYWwgY3VycmVudCBwcm9qZWN0XG4gICAgdGhpcy5jdXJyZW50UHJvamVjdCA9IHRoaXMuZ2V0SW5pdGlhbFByb2plY3QoKTtcbiAgfVxuXG4gIHNldEN1cnJlbnRQcm9qZWN0KHByb2plY3QpIHtcbiAgICB0aGlzLmN1cnJlbnRQcm9qZWN0ID0gcHJvamVjdDtcbiAgfVxuXG4gIHNldEN1cnJlbnRQcm9qZWN0SWQocHJvamVjdElkKSB7XG4gICAgdGhpcy5jdXJyZW50UHJvamVjdCA9IHRoaXMucHJvamVjdHMuZmlsdGVyKFxuICAgICAgKHByb2plY3QpID0+IHByb2plY3QuaWQgPT09IHByb2plY3RJZFxuICAgIClbMF07XG4gICAgdGhpcy5jdXJyZW50UHJvamVjdElkID0gcGFyc2VJbnQocHJvamVjdElkKTtcbiAgICB0aGlzLnNldEN1cnJlbnRQcm9qZWN0KHRoaXMuZ2V0UHJvamVjdEJ5SWQodGhpcy5jdXJyZW50UHJvamVjdElkKSk7XG4gIH1cblxuICBnZXRDdXJyZW50UHJvamVjdCgpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50UHJvamVjdDtcbiAgfVxuXG4gIGdldEN1cnJlbnRQcm9qZWN0SWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFByb2plY3RJZDtcbiAgfVxuXG4gIGdldFByb2plY3RzKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGEucHJvamVjdHM7XG4gIH1cblxuICBnZXREYXRhKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGE7XG4gIH1cblxuICBnZXRQcm9qZWN0QnlJZChwcm9qZWN0SWQpIHtcbiAgICBjb25zdCBwcm9qZWN0ID0gdGhpcy5kYXRhLnByb2plY3RzLmZpbHRlcihcbiAgICAgIChwcm9qZWN0KSA9PiBwcm9qZWN0LmlkID09PSBwcm9qZWN0SWRcbiAgICApWzBdO1xuICAgIHJldHVybiBwcm9qZWN0O1xuICB9XG5cbiAgZ2V0UHJvamVjdE92ZXJ2aWV3KCkge1xuICAgIGxldCBwcm9qZWN0cyA9IFtdO1xuICAgIHRoaXMuZGF0YS5wcm9qZWN0cy5tYXAoKHByb2plY3QpID0+IHtcbiAgICAgIGlmIChwcm9qZWN0LmlkICE9PSAwKSB7XG4gICAgICAgIHByb2plY3RzLnB1c2goe1xuICAgICAgICAgIG5hbWU6IHByb2plY3QudGl0bGUsXG4gICAgICAgICAgaWQ6IHByb2plY3QuaWQsXG4gICAgICAgICAgdGFza3M6IHRoaXMuY2FsY3VsYXRlVGFza3MocHJvamVjdC50YXNrcyksXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHByb2plY3RzO1xuICB9XG5cbiAgZ2V0UHJvamVjdHNDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRQcm9qZWN0T3ZlcnZpZXcoKS5sZW5ndGg7XG4gIH1cblxuICBjYWxjdWxhdGVUYXNrcyh0YXNrcykge1xuICAgIHJldHVybiB0YXNrcy5yZWR1Y2UoXG4gICAgICAoYWNjLCBjdXJyZW50KSA9PiBhY2MgKyAoY3VycmVudC5pc0NvbXBsZXRlID8gMCA6IDEpLFxuICAgICAgMFxuICAgICk7XG4gIH1cblxuICBnZXRJbml0aWFsUHJvamVjdCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9qZWN0cy5maWx0ZXIoXG4gICAgICAocHJvamVjdCkgPT4gcHJvamVjdC5pZCA9PT0gREVGQVVMVF9QUk9KRUNUX0lEXG4gICAgKVswXTtcbiAgfVxuXG4gIGdldFRhc2tCeUlkKGlkKSB7XG4gICAgaWQgPSBwYXJzZUludChpZCk7XG4gICAgY29uc3QgdGFzayA9IHRoaXMuY3VycmVudFByb2plY3QudGFza3MuZmlsdGVyKCh0YXNrKSA9PiB0YXNrLmlkID09PSBpZClbMF07XG4gICAgaWYgKHRhc2spIHtcbiAgICAgIHJldHVybiB0YXNrO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBkb25lVGFzayA9IHRoaXMuY3VycmVudFByb2plY3QuZG9uZS5maWx0ZXIoKHRhc2spID0+IHRhc2suaWQgPT09IGlkKVswXTtcbiAgICAgIGlmIChkb25lVGFzaykge1xuICAgICAgICByZXR1cm4gZG9uZVRhc2s7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNb2RlbC5nZXRUYXNrQnlJZCgpOiBEb25lIHRhc2sgbm90IGZvdW5kJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc2V0VGFza0FzQ29tcGxldGUodGFzaykge1xuICAgIHRhc2suaXNDb21wbGV0ZSA9IHRydWU7XG4gIH1cblxuICBhZGRUYXNrKHRhc2spIHtcbiAgICB0aGlzLmN1cnJlbnRQcm9qZWN0LnRhc2tzLnVuc2hpZnQodGFzayk7XG4gIH1cblxuICBzZXRUYXNrSXNDb21wbGV0ZSh0YXNrSWQsIGlzQ29tcGxldGUpIHtcbiAgICBsZXQgcmVtb3ZlRnJvbTtcbiAgICBsZXQgYWRkVG87XG4gICAgaWYgKGlzQ29tcGxldGUgPT09IHRydWUpIHtcbiAgICAgIHJlbW92ZUZyb20gPSB0aGlzLmN1cnJlbnRQcm9qZWN0LnRhc2tzO1xuICAgICAgYWRkVG8gPSB0aGlzLmN1cnJlbnRQcm9qZWN0LmRvbmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZUZyb20gPSB0aGlzLmN1cnJlbnRQcm9qZWN0LmRvbmU7XG4gICAgICBhZGRUbyA9IHRoaXMuY3VycmVudFByb2plY3QudGFza3M7XG4gICAgfVxuXG4gICAgY29uc3QgdGFzayA9IHJlbW92ZUZyb20uZmlsdGVyKCh0YXNrKSA9PiB0YXNrLmlkID09PSB0YXNrSWQpWzBdO1xuICAgIHRhc2suaXNDb21wbGV0ZSA9IGlzQ29tcGxldGU7XG5cbiAgICBjb25zdCB0YXNrSW5kZXggPSByZW1vdmVGcm9tLmluZGV4T2YodGFzayk7XG5cbiAgICAvLyBNb3ZlIHRhc2sgZnJvbSBvbmUgYXJyYXkgdG8gb3RoZXJcbiAgICByZW1vdmVGcm9tLnNwbGljZSh0YXNrSW5kZXgsIDEpO1xuICAgIGFkZFRvLnVuc2hpZnQodGFzayk7XG4gIH1cblxuICBkZWxldGVUYXNrQnlJZChpZCkge1xuICAgIGNvbnN0IHRhc2sgPSB0aGlzLmdldFRhc2tCeUlkKGlkKTtcbiAgICBpZiAodGFzaykge1xuICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmN1cnJlbnRQcm9qZWN0LnRhc2tzLmluZGV4T2YodGFzayk7XG4gICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFByb2plY3QudGFza3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgY29uc29sZS5sb2coJ3Rhc2sgZGVsZXRlZCcpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBkb25lSW5kZXggPSB0aGlzLmN1cnJlbnRQcm9qZWN0LmRvbmUuaW5kZXhPZih0YXNrKTtcbiAgICAgICAgaWYgKGRvbmVJbmRleCAhPSAtMSkge1xuICAgICAgICAgIHRoaXMuY3VycmVudFByb2plY3QuZG9uZS5zcGxpY2UoZG9uZUluZGV4LCAxKTtcbiAgICAgICAgICBjb25zb2xlLmxvZygnZG9uZSB0YXNrIGRlbGV0ZWQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFkZFByb2plY3QocHJvamVjdCkge1xuICAgIC8vIHNldCBuZXcgcHJvamVjdCBJRCAhIVxuICAgIHByb2plY3QuaWQgPSB0aGlzLnByb2plY3RJRFN1cHBsaWVyLmdldElEKCk7XG4gICAgdGhpcy5wcm9qZWN0cy5wdXNoKHByb2plY3QpO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXF1aXJlZEFyZ3MocmVxdWlyZWQsIGFyZ3MpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoIDwgcmVxdWlyZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHJlcXVpcmVkICsgJyBhcmd1bWVudCcgKyAocmVxdWlyZWQgPiAxID8gJ3MnIDogJycpICsgJyByZXF1aXJlZCwgYnV0IG9ubHkgJyArIGFyZ3MubGVuZ3RoICsgJyBwcmVzZW50Jyk7XG4gIH1cbn0iLCJpbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSB0b0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIERhdGUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGl0cyBjbG9uZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYSBudW1iZXIsIGl0IGlzIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXAuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIG5vbmUgb2YgdGhlIGFib3ZlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogKipOb3RlKio6ICphbGwqIERhdGUgYXJndW1lbnRzIHBhc3NlZCB0byBhbnkgKmRhdGUtZm5zKiBmdW5jdGlvbiBpcyBwcm9jZXNzZWQgYnkgYHRvRGF0ZWAuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gYXJndW1lbnQgLSB0aGUgdmFsdWUgdG8gY29udmVydFxuICogQHJldHVybnMge0RhdGV9IHRoZSBwYXJzZWQgZGF0ZSBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ2xvbmUgdGhlIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUobmV3IERhdGUoMjAxNCwgMSwgMTEsIDExLCAzMCwgMzApKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCB0aGUgdGltZXN0YW1wIHRvIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUoMTM5MjA5ODQzMDAwMClcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9EYXRlKGFyZ3VtZW50KSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgYXJnU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KTsgLy8gQ2xvbmUgdGhlIGRhdGVcblxuICBpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBEYXRlIHx8IHR5cGVvZiBhcmd1bWVudCA9PT0gJ29iamVjdCcgJiYgYXJnU3RyID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQuZ2V0VGltZSgpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdudW1iZXInIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICgodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IFN0cmluZ10nKSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXCJTdGFydGluZyB3aXRoIHYyLjAuMC1iZXRhLjEgZGF0ZS1mbnMgZG9lc24ndCBhY2NlcHQgc3RyaW5ncyBhcyBkYXRlIGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBgcGFyc2VJU09gIHRvIHBhcnNlIHN0cmluZ3MuIFNlZTogaHR0cHM6Ly9naXQuaW8vZmp1bGVcIik7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5cbiAgICAgIGNvbnNvbGUud2FybihuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzQWZ0ZXJcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGZpcnN0IGRhdGUgYWZ0ZXIgdGhlIHNlY29uZCBvbmU/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJcyB0aGUgZmlyc3QgZGF0ZSBhZnRlciB0aGUgc2Vjb25kIG9uZT9cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0aGF0IHNob3VsZCBiZSBhZnRlciB0aGUgb3RoZXIgb25lIHRvIHJldHVybiB0cnVlXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlVG9Db21wYXJlIC0gdGhlIGRhdGUgdG8gY29tcGFyZSB3aXRoXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGZpcnN0IGRhdGUgaXMgYWZ0ZXIgdGhlIHNlY29uZCBkYXRlXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElzIDEwIEp1bHkgMTk4OSBhZnRlciAxMSBGZWJydWFyeSAxOTg3P1xuICogdmFyIHJlc3VsdCA9IGlzQWZ0ZXIobmV3IERhdGUoMTk4OSwgNiwgMTApLCBuZXcgRGF0ZSgxOTg3LCAxLCAxMSkpXG4gKiAvLz0+IHRydWVcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0FmdGVyKGRpcnR5RGF0ZSwgZGlydHlEYXRlVG9Db21wYXJlKSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF0ZVRvQ29tcGFyZSA9IHRvRGF0ZShkaXJ0eURhdGVUb0NvbXBhcmUpO1xuICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgPiBkYXRlVG9Db21wYXJlLmdldFRpbWUoKTtcbn0iLCJpbXBvcnQgeyBpc0FmdGVyIH0gZnJvbSBcImRhdGUtZm5zXCI7XG5pbXBvcnQgeyBUYXNrIH0gZnJvbSBcIi4uL2VudGl0eS9UYXNrXCI7XG5cbmV4cG9ydCBjbGFzcyBOZXdUYXNrTW9kYWxWYWxpZGF0aW9uQ29udHJvbGxlciB7XG4gIHZhbGlkYXRpb25NZXNzYWdlcztcbiAgaXNGb3JtRW1wdHk7XG4gIHZhbGlkVGFzaztcbiAgZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmV3LXRhc2stbW9kYWxcIik7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy52YWxpZFRhc2sgPSB7fTtcbiAgICB0aGlzLmlzRm9ybUVtcHR5ID0gdHJ1ZTtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy5yZXNldFZhbGlkYXRpb25NZXNzYWdlcygpO1xuICAgIHRoaXMuYWRkQmx1ckV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cblxuICByZXNldFZhbGlkYXRpb25NZXNzYWdlcygpIHtcbiAgICB0aGlzLnZhbGlkYXRpb25NZXNzYWdlcyA9IHtcbiAgICAgIHRpdGxlOiBbXSxcbiAgICAgIGRlc2NyaXB0aW9uOiBbXSxcbiAgICAgIGR1ZURhdGU6IFtdLFxuICAgIH07XG4gICAgdGhpcy5jbGVhclZhbGlkYXRpb25NZXNzYWdlcygpO1xuICB9XG5cbiAgaXNWYWxpZCgpIHtcbiAgICB0aGlzLnZhbGlkYXRlSW5wdXRzKCk7XG4gICAgXG4gICAgZm9yIChsZXQgbXNnIGluIHRoaXMudmFsaWRhdGlvbk1lc3NhZ2VzKSB7XG4gICAgICBpZiAodGhpcy52YWxpZGF0aW9uTWVzc2FnZXNbbXNnXS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFsaWRhdGVJbnB1dHMoKSB7XG4gICAgdGhpcy52YWxpZGF0ZVRpdGxlSW5wdXQoKTtcbiAgICB0aGlzLnZhbGlkYXRlRGVzY3JpcHRpb25JbnB1dCgpO1xuICAgIHRoaXMudmFsaWRhdGVEdWVEYXRlSW5wdXQoKTtcbiAgfVxuXG4gIHZhbGlkYXRlVGl0bGVJbnB1dCgpIHtcbiAgICBjb25zdCB0aXRsZSA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKFwiI3Rhc2stdGl0bGVcIikudmFsdWU7XG4gICAgY29uc3QgdmFsaWRhdGlvbk1zZ1NwYW4gPSB0aGlzLmZvcm0ucXVlcnlTZWxlY3RvcihcbiAgICAgIFwiI2Zvcm0tbGFiZWwtdGl0bGUgLnZhbGlkYXRpb24tbXNnXCJcbiAgICApO1xuXG4gICAgdmFsaWRhdGlvbk1zZ1NwYW4udGV4dENvbnRlbnQgPSBcIlwiO1xuXG4gICAgaWYgKHRpdGxlKSB7XG4gICAgICB0aGlzLnZhbGlkVGFzay50aXRsZSA9IHRpdGxlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBtc2cgPSBcIiogIFBsZWFzZSBlbnRlciB0YXNrIHRpdGxlXCI7XG4gICAgICBpZiAoIXRoaXMudmFsaWRhdGlvbk1lc3NhZ2VzLnRpdGxlLmluY2x1ZGVzKG1zZykpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0aW9uTWVzc2FnZXMudGl0bGUucHVzaChtc2cpO1xuICAgICAgfVxuICAgICAgdmFsaWRhdGlvbk1zZ1NwYW4udGV4dENvbnRlbnQgPSBtc2c7XG4gICAgfVxuICB9XG5cbiAgdmFsaWRhdGVEZXNjcmlwdGlvbklucHV0KCkge1xuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3IoXCIjdGFzay1kZXNjcmlwdGlvblwiKS52YWx1ZTtcbiAgICBjb25zdCB2YWxpZGF0aW9uTXNnU3BhbiA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKFxuICAgICAgXCIjZm9ybS1sYWJlbC1kZXNjcmlwdGlvbiAudmFsaWRhdGlvbi1tc2dcIlxuICAgICk7XG5cbiAgICB2YWxpZGF0aW9uTXNnU3Bhbi50ZXh0Q29udGVudCA9IFwiXCI7XG5cbiAgICBpZiAoZGVzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMudmFsaWRUYXNrLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG1zZyA9IFwiKiBQbGVhc2UgZW50ZXIgdGFzayBkZXNjcmlwdGlvblwiO1xuICAgICAgaWYgKCF0aGlzLnZhbGlkYXRpb25NZXNzYWdlcy5kZXNjcmlwdGlvbi5pbmNsdWRlcyhtc2cpKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGlvbk1lc3NhZ2VzLmRlc2NyaXB0aW9uLnB1c2gobXNnKTtcbiAgICAgIH1cbiAgICAgIHZhbGlkYXRpb25Nc2dTcGFuLnRleHRDb250ZW50ID0gbXNnO1xuICAgIH1cbiAgfVxuXG4gIHZhbGlkYXRlRHVlRGF0ZUlucHV0KCkge1xuICAgIGNvbnN0IGR1ZURhdGUgPSB0aGlzLmZvcm0ucXVlcnlTZWxlY3RvcihcIiN0YXNrLWR1ZS1kYXRlXCIpLnZhbHVlO1xuICAgIGNvbnN0IHZhbGlkYXRpb25Nc2dTcGFuID0gdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBcIiNmb3JtLWxhYmVsLWR1ZS1kYXRlIC52YWxpZGF0aW9uLW1zZ1wiXG4gICAgKTtcblxuICAgIHZhbGlkYXRpb25Nc2dTcGFuLnRleHRDb250ZW50ID0gXCJcIjtcblxuICAgIGlmIChkdWVEYXRlICYmIGlzQWZ0ZXIobmV3IERhdGUoZHVlRGF0ZSksIG5ldyBEYXRlKCkpKSB7XG4gICAgICB0aGlzLnZhbGlkVGFzay5kdWVEYXRlID0gbmV3IERhdGUoZHVlRGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG1zZyA9IFwiKiBQbGVhc2UgZW50ZXIgdGFzayBkdWUgZGF0ZSB0aGF0J3MgaW4gdGhlIGZ1dHVyZVwiO1xuICAgICAgaWYgKCF0aGlzLnZhbGlkYXRpb25NZXNzYWdlcy5kdWVEYXRlLmluY2x1ZGVzKG1zZykpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0aW9uTWVzc2FnZXMuZHVlRGF0ZS5wdXNoKG1zZyk7XG4gICAgICB9XG4gICAgICB2YWxpZGF0aW9uTXNnU3Bhbi50ZXh0Q29udGVudCA9IG1zZztcbiAgICB9XG4gIH1cblxuICBhZGRCbHVyRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgY29uc3QgdGl0bGUgPSB0aGlzLmZvcm0ucXVlcnlTZWxlY3RvcihcIiN0YXNrLXRpdGxlXCIpO1xuICAgIHRpdGxlLmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIChlKSA9PiB7XG4gICAgICB0aGlzLnZhbGlkYXRlVGl0bGVJbnB1dCgpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgZGVzY3JpcHRpb24gPSB0aGlzLmZvcm0ucXVlcnlTZWxlY3RvcihcIiN0YXNrLWRlc2NyaXB0aW9uXCIpO1xuICAgIGRlc2NyaXB0aW9uLmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIChlKSA9PiB7XG4gICAgICB0aGlzLnZhbGlkYXRlRGVzY3JpcHRpb25JbnB1dCgpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgZHVlRGF0ZSA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKFwiI3Rhc2stZHVlLWRhdGVcIik7XG4gICAgZHVlRGF0ZS5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKGUpID0+IHtcbiAgICAgIHRoaXMudmFsaWRhdGVEdWVEYXRlSW5wdXQoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGNsZWFyVmFsaWRhdGlvbk1lc3NhZ2VzKCkge1xuICAgIGNvbnN0IHZhbGlkYXRpb25NZXNzYWdlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIudmFsaWRhdGlvbi1tc2dcIik7XG4gICAgZm9yIChsZXQgbXNnIG9mIHZhbGlkYXRpb25NZXNzYWdlcykge1xuICAgICAgbXNnLnRleHRDb250ZW50ID0gXCJcIjtcbiAgICB9XG4gIH1cblxuICBnZXRUYXNrKCkge1xuICAgIGNvbnN0IHRhc2sgPSBuZXcgVGFzayhcbiAgICAgIHRoaXMudmFsaWRUYXNrLnRpdGxlLFxuICAgICAgdGhpcy52YWxpZFRhc2suZGVzY3JpcHRpb24sXG4gICAgICB0aGlzLnZhbGlkVGFzay5kdWVEYXRlXG4gICAgKTtcblxuICAgIHRhc2sucHJpb3JpdHkgPSB0aGlzLmdldFByaW9yaXR5VmFsdWUoKTtcblxuICAgIHJldHVybiB0YXNrO1xuICB9XG5cbiAgZ2V0UHJpb3JpdHlWYWx1ZSgpIHtcbiAgICBjb25zdCBwcmlvcml0eSA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKFxuICAgICAgJyNuZXctdGFzay1mb3JtIGlucHV0W3R5cGU9XCJyYWRpb1wiXTpjaGVja2VkJ1xuICAgICk7XG4gICAgcmV0dXJuIHByaW9yaXR5LnZhbHVlO1xuICB9XG59XG4iLCJleHBvcnQgY2xhc3MgTmV3UHJvamVjdEZvcm1WYWxpZGF0aW9uQ29udHJvbGxlciB7XG4gIHZhbGlkYXRpb25NZXNzYWdlcztcbiAgaXNGb3JtRW1wdHk7XG4gIHZhbGlkUHJvamVjdDtcbiAgZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbmV3LXByb2plY3QtbW9kYWwtd3JhcHBlciAubmV3LXRhc2stbW9kYWxcIik7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy52YWxpZFByb2plY3QgPSB7fTtcbiAgICB0aGlzLmlzRm9ybUVtcHR5ID0gdHJ1ZTtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy5yZXNldFZhbGlkYXRpb25NZXNzYWdlcygpO1xuICAgIHRoaXMuYWRkQmx1ckV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cblxuICByZXNldFZhbGlkYXRpb25NZXNzYWdlcygpIHtcbiAgICB0aGlzLnZhbGlkYXRpb25NZXNzYWdlcyA9IHtcbiAgICAgIHRpdGxlOiBbXSxcbiAgICAgIGRlc2NyaXB0aW9uOiBbXSxcbiAgICB9O1xuICAgIHRoaXMuY2xlYXJWYWxpZGF0aW9uTWVzc2FnZXMoKTtcbiAgfVxuXG4gIGlzVmFsaWQoKSB7XG4gICAgdGhpcy52YWxpZGF0ZUlucHV0cygpO1xuXG4gICAgZm9yIChsZXQgbXNnIGluIHRoaXMudmFsaWRhdGlvbk1lc3NhZ2VzKSB7XG4gICAgICBpZiAodGhpcy52YWxpZGF0aW9uTWVzc2FnZXNbbXNnXS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFsaWRhdGVJbnB1dHMoKSB7XG4gICAgdGhpcy52YWxpZGF0ZVRpdGxlSW5wdXQoKTtcbiAgICB0aGlzLnZhbGlkYXRlRGVzY3JpcHRpb25JbnB1dCgpO1xuICB9XG5cbiAgdmFsaWRhdGVUaXRsZUlucHV0KCkge1xuICAgIGNvbnN0IHRpdGxlID0gdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3IoXCIjcHJvamVjdC10aXRsZVwiKS52YWx1ZTtcbiAgICBjb25zdCB2YWxpZGF0aW9uTXNnU3BhbiA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKFxuICAgICAgXCIjZm9ybS1sYWJlbC1wcm9qZWN0LXRpdGxlIC52YWxpZGF0aW9uLW1zZ1wiXG4gICAgKTtcblxuICAgIHZhbGlkYXRpb25Nc2dTcGFuLnRleHRDb250ZW50ID0gXCJcIjtcblxuICAgIGlmICh0aXRsZSkge1xuICAgICAgdGhpcy52YWxpZFByb2plY3QudGl0bGUgPSB0aXRsZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbXNnID0gXCIqICBQbGVhc2UgZW50ZXIgcHJvamVjdCB0aXRsZVwiO1xuICAgICAgaWYgKCF0aGlzLnZhbGlkYXRpb25NZXNzYWdlcy50aXRsZS5pbmNsdWRlcyhtc2cpKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGlvbk1lc3NhZ2VzLnRpdGxlLnB1c2gobXNnKTtcbiAgICAgIH1cbiAgICAgIHZhbGlkYXRpb25Nc2dTcGFuLnRleHRDb250ZW50ID0gbXNnO1xuICAgIH1cbiAgfVxuXG4gIHZhbGlkYXRlRGVzY3JpcHRpb25JbnB1dCgpIHtcbiAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKFwiI3Byb2plY3QtZGVzY3JpcHRpb25cIikudmFsdWU7XG4gICAgY29uc3QgdmFsaWRhdGlvbk1zZ1NwYW4gPSB0aGlzLmZvcm0ucXVlcnlTZWxlY3RvcihcbiAgICAgIFwiI2Zvcm0tbGFiZWwtcHJvamVjdC1kZXNjcmlwdGlvbiAudmFsaWRhdGlvbi1tc2dcIlxuICAgICk7XG5cbiAgICB2YWxpZGF0aW9uTXNnU3Bhbi50ZXh0Q29udGVudCA9IFwiXCI7XG5cbiAgICBpZiAoZGVzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMudmFsaWRQcm9qZWN0LmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG1zZyA9IFwiKiBQbGVhc2UgZW50ZXIgcHJvamVjdCBkZXNjcmlwdGlvblwiO1xuICAgICAgaWYgKCF0aGlzLnZhbGlkYXRpb25NZXNzYWdlcy5kZXNjcmlwdGlvbi5pbmNsdWRlcyhtc2cpKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGlvbk1lc3NhZ2VzLmRlc2NyaXB0aW9uLnB1c2gobXNnKTtcbiAgICAgIH1cbiAgICAgIHZhbGlkYXRpb25Nc2dTcGFuLnRleHRDb250ZW50ID0gbXNnO1xuICAgIH1cbiAgfVxuXG4gIGFkZEJsdXJFdmVudExpc3RlbmVycygpIHtcbiAgICBjb25zdCB0aXRsZSA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKFwiI3Byb2plY3QtdGl0bGVcIik7XG4gICAgdGl0bGUuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgKGUpID0+IHtcbiAgICAgIHRoaXMudmFsaWRhdGVUaXRsZUlucHV0KCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKFwiI3Byb2plY3QtZGVzY3JpcHRpb25cIik7XG4gICAgZGVzY3JpcHRpb24uYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgKGUpID0+IHtcbiAgICAgIHRoaXMudmFsaWRhdGVEZXNjcmlwdGlvbklucHV0KCk7XG4gICAgfSk7XG4gIH1cblxuICBjbGVhclZhbGlkYXRpb25NZXNzYWdlcygpIHtcbiAgICBjb25zdCB2YWxpZGF0aW9uTWVzc2FnZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgXCIjbmV3LXByb2plY3QtbW9kYWwtd3JhcHBlciAudmFsaWRhdGlvbi1tc2dcIlxuICAgICk7XG4gICAgZm9yIChsZXQgbXNnIG9mIHZhbGlkYXRpb25NZXNzYWdlcykge1xuICAgICAgbXNnLnRleHRDb250ZW50ID0gXCJcIjtcbiAgICB9XG4gIH1cblxuICBnZXRQcm9qZWN0KCkge1xuICAgIGNvbnN0IHByb2plY3QgPSB7XG4gICAgICB0aXRsZTogdGhpcy52YWxpZFByb2plY3QudGl0bGUsXG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy52YWxpZFByb2plY3QuZGVzY3JpcHRpb24sXG4gICAgICB0YXNrczogW10sXG4gICAgICBkb25lOiBbXSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb2plY3Q7XG4gIH1cbn1cbiIsImltcG9ydCB7IE5ld1Rhc2tNb2RhbFZhbGlkYXRpb25Db250cm9sbGVyIH0gZnJvbSBcIi4vTmV3VGFza01vZGFsVmFsaWRhdGlvbkNvbnRyb2xsZXJcIjtcbmltcG9ydCB7IE5ld1Byb2plY3RGb3JtVmFsaWRhdGlvbkNvbnRyb2xsZXIgfSBmcm9tIFwiLi9OZXdQcm9qZWN0Rm9ybVZhbGlkYXRpb25Db250cm9sbGVyXCI7XG5cbmV4cG9ydCBjbGFzcyBEaXNwbGF5Q29udHJvbGxlciB7XG4gIGNvbnRlbnQ7XG4gIHRhc2tDb250cm9sbGVyO1xuICB2aWV3O1xuICBtb2RlbDtcbiAgZm9ybVZhbGlkYXRpb247XG5cbiAgY29uc3RydWN0b3IoZGVwZW5kZW5jaWVzKSB7XG4gICAgdGhpcy5jb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi53cmFwcGVyXCIpO1xuICAgIHRoaXMuZm9ybVZhbGlkYXRpb24gPSBuZXcgTmV3VGFza01vZGFsVmFsaWRhdGlvbkNvbnRyb2xsZXIoKTtcblxuICAgIHRoaXMucHJvamVjdEZvcm1WYWxpZGF0aW9uID0gbmV3IE5ld1Byb2plY3RGb3JtVmFsaWRhdGlvbkNvbnRyb2xsZXIoKTtcblxuICAgIGlmIChkZXBlbmRlbmNpZXMudmlldykge1xuICAgICAgdGhpcy52aWV3ID0gZGVwZW5kZW5jaWVzLnZpZXc7XG4gICAgfVxuICAgIGlmIChkZXBlbmRlbmNpZXMubW9kZWwpIHtcbiAgICAgIHRoaXMubW9kZWwgPSBkZXBlbmRlbmNpZXMubW9kZWw7XG4gICAgfVxuICB9XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLmF0dGFjaEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGdldEN1cnJlbnRQcm9qZWN0KCkge1xuICAgIHJldHVybiB0aGlzLm1vZGVsLmdldEN1cnJlbnRQcm9qZWN0KCk7XG4gIH1cblxuICBjaGFuZ2VDdXJyZW50UHJvamVjdChwcm9qZWN0SWQpIHtcbiAgICB0aGlzLm1vZGVsLnNldEN1cnJlbnRQcm9qZWN0SWQocHJvamVjdElkKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHRoaXMudmlldy5yZW5kZXIoKTtcbiAgICBjb25zdCBuZXdUYXNrQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uZXctdGFzay1idG5cIik7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmICh0aGlzLm1vZGVsLmdldEN1cnJlbnRQcm9qZWN0SWQoKSAhPT0gMCkge1xuICAgICAgICAvLyBOZXcgdGFzayBsaXN0IGVsZW1lbnRcbiAgICAgICAgdGhpcy5hZGROZXdMaXN0RWxlbWVudHNFdmVudExpc3RlbmVycygpO1xuICAgICAgICAvLyBzaG93IG5ldyB0YXNrIGJ1dHRvblxuICAgICAgICBuZXdUYXNrQnRuLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRlXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT3ZlcnZpZXcgcGFnZVxuICAgICAgICB0aGlzLmFkZE92ZXJ2aWV3UGFnZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICAgIC8vIGhpZGUgbmV3IHRhc2sgYnV0dG9uXG4gICAgICAgIG5ld1Rhc2tCdG4uY2xhc3NMaXN0LmFkZChcImhpZGVcIik7XG4gICAgICB9XG4gICAgfSwgNTAwKTtcbiAgfVxuXG4gIGF0dGFjaEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIC8vIE5ldyBUYXNrIG1vZGFsIHNob3cgYnV0dG9uIGFuZCBjbG9zZVxuICAgIHRoaXMuYWRkU2hvd05ld1Rhc2tNb2RhbEV2ZW50TGlzdGVuZXIoKTtcbiAgICB0aGlzLmFkZEhpZGVOZXdUYXNrTW9kYWxFdmVudExpc3RlbmVyKCk7XG4gICAgdGhpcy5hZGROZXdUYXNrU3VibWl0TGlzdGVuZXIoKTtcbiAgICAvLyBEYXJrLW1vZGUvbGlnaHQtbW9kZSBzd2l0Y2hcbiAgICB0aGlzLmFkZFRvZ2dsZURhcmtNb2RlQ2xpY2tMaXN0ZW5lcigpO1xuICB9XG5cbiAgYWRkTmV3TGlzdEVsZW1lbnRzRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgLy8gVG9nZ2xlIGRvbmUvbm90IGRvbmUgdGFza1xuICAgIHRoaXMuYWRkVG9nZ2xlQ29tcGxldGVFdmVudExpc3RlbmVyKCk7XG4gICAgLy8gU2hvd2luZyBhbmQgaGlkaW5nIHRhc2sgZGV0YWlsc1xuICAgIHRoaXMuYWRkVGFza0RldGFpbHNUb2dnbGVFdmVudExpc3RlbmVycygpO1xuICAgIHRoaXMuYWRkRXhwYW5kSGlkZUFsbEV2ZW50TGlzdGVuZXIoKTtcbiAgICAvLyBUYXNrIG1vcmUgbWVudSBvcGVuL2Nsb3NlXG4gICAgdGhpcy5hZGRUb2dnbGVNb3JlTWVudUxpc3RlbmVyKCk7XG4gICAgdGhpcy5hZGREZWxldGVUYXNrQ2xpY2tMaXN0ZW5lcigpO1xuICAgIHRoaXMuYWRkRWRpdFRhc2tDbGlja0xpc3RlbmVyKCk7XG5cbiAgICB0aGlzLmFkZEhpZGVEZWxldGVUYXNrTW9kYWxFdmVudExpc3RlbmVyKCk7XG4gICAgdGhpcy5hZGRDb25maXJtRGVsZXRlVGFza0J1dHRvbkNsaWNrTGlzdGVuZXIoKTtcbiAgfVxuXG4gIGFkZFRvZ2dsZUNvbXBsZXRlRXZlbnRMaXN0ZW5lcigpIHtcbiAgICAvLyB1cGRhdGUgbWVudSBjb3VudGVycyBvbiBlYWNoIHRvZ2dsZT9cbiAgICBjb25zdCBjaGVja2JveGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJyk7XG4gICAgZm9yIChsZXQgY2hlY2tib3ggb2YgY2hlY2tib3hlcykge1xuICAgICAgY2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoZSkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrSWQgPSBwYXJzZUludChlLnRhcmdldC5pZC5zcGxpdChcIi1cIilbMV0pO1xuICAgICAgICB0aGlzLnRvZ2dsZVRhc2tDb21wbGV0ZSh0YXNrSWQsIGUudGFyZ2V0LmNoZWNrZWQpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgdG9nZ2xlVGFza0NvbXBsZXRlKHRhc2tJZCwgaXNDb21wbGV0ZSkge1xuICAgIGNvbnNvbGUubG9nKFwidG9nZ2xlIHRhc2sgY29tcGxldGVcIik7XG4gICAgdGhpcy5tb2RlbC5zZXRUYXNrSXNDb21wbGV0ZSh0YXNrSWQsIGlzQ29tcGxldGUpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBhZGRUYXNrRGV0YWlsc1RvZ2dsZUV2ZW50TGlzdGVuZXJzKCkge1xuICAgIGNvbnN0IGJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnRhc2stbWVudSAuaWNvbi5jaGV2cm9uXCIpO1xuICAgIGZvciAobGV0IGJ1dHRvbiBvZiBidXR0b25zKSB7XG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG4gICAgICAgIGNvbnN0IGljb24gPSBlLnRhcmdldDtcbiAgICAgICAgY29uc3QgdGFzayA9IGljb24ucGFyZW50Tm9kZS5wYXJlbnROb2RlO1xuICAgICAgICB0aGlzLnRvZ2dsZVRhc2tEZXRhaWxzKHRhc2spO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgdG9nZ2xlVGFza0RldGFpbHModGFza0VsZW1lbnQpIHtcbiAgICBpZiAodGFza0VsZW1lbnQpIHtcbiAgICAgIGNvbnN0IGRldGFpbHMgPSB0YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhc2stZGV0YWlsc1wiKTtcbiAgICAgIGRldGFpbHMuY2xhc3NMaXN0LnRvZ2dsZShcImhpZGVcIik7XG5cbiAgICAgIGNvbnN0IGljb24gPSB0YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmljb25cIik7XG4gICAgICBpY29uLmNsYXNzTGlzdC50b2dnbGUoXCJmYS1jaGV2cm9uLXVwXCIpO1xuICAgICAgaWNvbi5jbGFzc0xpc3QudG9nZ2xlKFwiZmEtY2hldnJvbi1kb3duXCIpO1xuXG4gICAgICBjb25zdCB0YXNrID0gdGhpcy5tb2RlbC5nZXRUYXNrQnlJZChcbiAgICAgICAgdGFza0VsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1pbmRleFwiKVxuICAgICAgKTtcbiAgICAgIHRhc2sudG9nZ2xlSXNDb2xsYXBzZWQoKTtcbiAgICAgIGNvbnNvbGUubG9nKHRhc2suaXNDb2xsYXBzZWQpO1xuICAgIH1cbiAgfVxuXG4gIGFkZEV4cGFuZEhpZGVBbGxFdmVudExpc3RlbmVyKCkge1xuICAgIGNvbnN0IFRFWFRfQ09OVEVOVF9UT19FWFBBTkQgPSBcIkV4cGFuZCBhbGxcIjtcbiAgICAvLyBJbml0aWFsIHN0YXRlIGlzIHRvIGV4cGFuZFxuICAgIGNvbnN0IGJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZXhwYW5kLWFsbC1oaWRlLWFsbC1zcGFuXCIpO1xuICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgIGNvbnN0IHRhc2tzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi50YXNrXCIpO1xuICAgICAgaWYgKHRhc2tzKSB7XG4gICAgICAgIGlmIChuZXcgU3RyaW5nKGJ0bi5pbm5lclRleHQudHJpbSgpKS5pbmNsdWRlcyhURVhUX0NPTlRFTlRfVE9fRVhQQU5EKSkge1xuICAgICAgICAgIHRoaXMudmlldy5hbGxFeHBhbmRlZCA9IHRydWU7XG4gICAgICAgICAgZm9yIChsZXQgdGFzayBvZiB0YXNrcykge1xuICAgICAgICAgICAgdGhpcy5zaG93VGFza0RldGFpbHModGFzayk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudmlldy5hbGxFeHBhbmRlZCA9IGZhbHNlO1xuICAgICAgICAgIGZvciAobGV0IHRhc2sgb2YgdGFza3MpIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZVRhc2tEZXRhaWxzKHRhc2spO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgc2hvd1Rhc2tEZXRhaWxzKHRhc2tFbCkge1xuICAgIGNvbnN0IHRhc2sgPSB0aGlzLm1vZGVsLmdldFRhc2tCeUlkKHRhc2tFbC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWluZGV4XCIpKTtcbiAgICB0YXNrLnNldElzQ29sbGFwc2VkKGZhbHNlKTtcblxuICAgIGNvbnN0IGNoZXZyb24gPSB0YXNrRWwucXVlcnlTZWxlY3RvcihcIi50YXNrLW1lbnUgLmljb25cIik7XG4gICAgY2hldnJvbi5jbGFzc0xpc3QucmVtb3ZlKFwiZmEtY2hldnJvbi1kb3duXCIpO1xuICAgIGNoZXZyb24uY2xhc3NMaXN0LmFkZChcImZhLWNoZXZyb24tdXBcIik7XG4gIH1cblxuICBoaWRlVGFza0RldGFpbHModGFza0VsKSB7XG4gICAgY29uc3QgdGFzayA9IHRoaXMubW9kZWwuZ2V0VGFza0J5SWQodGFza0VsLmdldEF0dHJpYnV0ZShcImRhdGEtaW5kZXhcIikpO1xuICAgIHRhc2suc2V0SXNDb2xsYXBzZWQodHJ1ZSk7XG5cbiAgICBjb25zdCBjaGV2cm9uID0gdGFza0VsLnF1ZXJ5U2VsZWN0b3IoXCIudGFzay1tZW51IC5pY29uXCIpO1xuICAgIGNoZXZyb24uY2xhc3NMaXN0LnJlbW92ZShcImZhLWNoZXZyb24tdXBcIik7XG4gICAgY2hldnJvbi5jbGFzc0xpc3QuYWRkKFwiZmEtY2hldnJvbi1kb3duXCIpO1xuICB9XG5cbiAgLyogTkVXIFRBU0sgTU9EQUwgKi9cblxuICBhZGRTaG93TmV3VGFza01vZGFsRXZlbnRMaXN0ZW5lcigpIHtcbiAgICBjb25zdCBidG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm5ldy10YXNrLWJ0blwiKTtcbiAgICBjb25zdCBtb2RhbFdyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI25ldy10YXNrLW1vZGFsLXdyYXBwZXJcIik7XG4gICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgdGhpcy5zaG93TmV3VGFza01vZGFsKG1vZGFsV3JhcHBlcik7XG4gICAgfSk7XG4gIH1cblxuICBzaG93TmV3VGFza01vZGFsKG1vZGFsV3JhcHBlcikge1xuICAgIHRoaXMucmVzZXRNb2RhbEZvcm0oKTtcbiAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gICAgbW9kYWxXcmFwcGVyLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRlXCIpO1xuICB9XG5cbiAgcmVzZXRNb2RhbEZvcm0oKSB7XG4gICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbmV3LXRhc2stZm9ybVwiKTtcbiAgICBmb3JtLnJlc2V0KCk7XG4gIH1cblxuICBhZGRIaWRlTmV3VGFza01vZGFsRXZlbnRMaXN0ZW5lcigpIHtcbiAgICBjb25zdCB3cmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNuZXctdGFzay1tb2RhbC13cmFwcGVyXCIpO1xuICAgIHdyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcIm1vZGFsLXdyYXBwZXJcIikpIHtcbiAgICAgICAgdGhpcy5hbmltYXRlTW9kYWxDbG9zaW5nKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBjbG9zZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWwtd3JhcHBlciAuY2xvc2UtYnRuXCIpO1xuICAgIGNsb3NlQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgdGhpcy5hbmltYXRlTW9kYWxDbG9zaW5nKCk7XG4gICAgfSk7XG4gIH1cblxuICBhbmltYXRlTW9kYWxDbG9zaW5nKCkge1xuICAgIGNvbnN0IE1PREFMX0NMT1NJTkdfQU5JTUFUSU9OX0RVUkFUSU9OID0gNjAwO1xuXG4gICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbmV3LXRhc2stbW9kYWwtd3JhcHBlclwiKTtcbiAgICBjb25zdCBtb2RhbCA9IHdyYXBwZXIucXVlcnlTZWxlY3RvcihcIi5uZXctdGFzay1tb2RhbFwiKTtcblxuICAgIG1vZGFsLmNsYXNzTGlzdC5hZGQoXCJtb2RhbC1kaXNzbWlzLWFuaW1hdGlvblwiKTtcbiAgICB3cmFwcGVyLmNsYXNzTGlzdC5yZW1vdmUoXCJ3cmFwcGVyLWZhZGUtaW4tYW5pbWF0aW9uXCIpO1xuICAgIHdyYXBwZXIuY2xhc3NMaXN0LmFkZChcIndyYXBwZXItZmFkZS1vdXQtYW5pbWF0aW9uXCIpO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgd3JhcHBlci5jbGFzc0xpc3QuYWRkKFwiaGlkZVwiKTtcbiAgICAgIG1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoXCJtb2RhbC1kaXNzbWlzLWFuaW1hdGlvblwiKTtcbiAgICAgIHdyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZShcIndyYXBwZXItZmFkZS1vdXQtYW5pbWF0aW9uXCIpO1xuICAgICAgd3JhcHBlci5jbGFzc0xpc3QuYWRkKFwid3JhcHBlci1mYWRlLWluLWFuaW1hdGlvblwiKTtcbiAgICB9LCBNT0RBTF9DTE9TSU5HX0FOSU1BVElPTl9EVVJBVElPTik7XG4gIH1cblxuICBhZGROZXdUYXNrU3VibWl0TGlzdGVuZXIoKSB7XG4gICAgY29uc3QgYnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNuZXctdGFzay1zdWJtaXRcIik7XG4gICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgLy8gdmFsaWRhdGUgZm9ybVxuICAgICAgdGhpcy5mb3JtVmFsaWRhdGlvbi5pbml0KCk7XG4gICAgICBpZiAodGhpcy5mb3JtVmFsaWRhdGlvbi5pc1ZhbGlkKCkpIHtcbiAgICAgICAgY29uc3QgdGFzayA9IHRoaXMuZm9ybVZhbGlkYXRpb24uZ2V0VGFzaygpO1xuICAgICAgICBjb25zb2xlLmxvZyh0YXNrKTtcbiAgICAgICAgdGhpcy5zdWJtaXROZXdUYXNrTW9kYWwodGFzayk7XG4gICAgICAgIHRoaXMuYW5pbWF0ZU1vZGFsQ2xvc2luZygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgc3VibWl0TmV3VGFza01vZGFsKHRhc2spIHtcbiAgICAvLyBzdG9yZSBkYXRhIGluIGEgbW9kZWxcbiAgICB0aGlzLm1vZGVsLmFkZFRhc2sodGFzayk7XG4gICAgLy8gcmVyZW5kZXIgdmlld1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBhZGRUb2dnbGVNb3JlTWVudUxpc3RlbmVyKCkge1xuICAgIGNvbnN0IGJ0bnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnRhc2stbWVudSAubW9yZVwiKTtcbiAgICBmb3IgKGxldCBidG4gb2YgYnRucykge1xuICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgICBjb25zdCBtZW51ID0gYnRuLm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgbWVudS5jbGFzc0xpc3QudG9nZ2xlKFwiaGlkZVwiKTtcbiAgICAgICAgfSwgNTApO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG4gICAgICAvLyBpZiBjbGlja2VkIG91dHNpZGUgb2YgLm1vcmUtbWVudSBhbmQgbm90IG9uIG1vcmUgYnV0dG9uXG4gICAgICBpZiAoXG4gICAgICAgICFlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJtb3JlLW1lbnVcIikgJiZcbiAgICAgICAgIWUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcIm1vcmUtbWVudS1vcHRpb25cIilcbiAgICAgICkge1xuICAgICAgICAvLyBoaWRlIGFsbCBtZW51c1xuICAgICAgICBjb25zdCBtZW51cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubW9yZS1tZW51Om5vdCguaGlkZSlcIik7XG4gICAgICAgIGZvciAobGV0IG1lbnUgb2YgbWVudXMpIHtcbiAgICAgICAgICBtZW51LmNsYXNzTGlzdC5hZGQoXCJoaWRlXCIpOyAvLyBoaWRlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qIERFTEVUSU5HIFRBU0sgKi9cblxuICBhZGREZWxldGVUYXNrQ2xpY2tMaXN0ZW5lcigpIHtcbiAgICBjb25zdCBkZWxldGVCdG5zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tb3JlLW1lbnUtb3B0aW9uLmRlbGV0ZVwiKTtcbiAgICBmb3IgKGxldCBidG4gb2YgZGVsZXRlQnRucykge1xuICAgICAgY29uc3QgaW5kZXggPVxuICAgICAgICBidG4ucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgXCJkYXRhLWluZGV4XCJcbiAgICAgICAgKTtcbiAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5oYW5kbGVEZWxldGVUYXNrLmJpbmQodGhpcywgaW5kZXgpKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVEZWxldGVUYXNrKGluZGV4KSB7XG4gICAgY29uc29sZS5sb2coXCJEZWxldGluZyB0YXNrIHdpdGggaWQgXCIgKyBpbmRleCk7XG4gICAgLy8gSGlkZSAnbW9yZScgbWVudVxuICAgIGNvbnN0IG1vcmVNZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi50YXNrLW1lbnUgLm1vcmUtbWVudVwiKTtcbiAgICBtb3JlTWVudS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBpdGVtLmNsYXNzTGlzdC5hZGQoXCJoaWRlXCIpO1xuICAgIH0pO1xuXG4gICAgLy8gQ29uZmlybSB0YXNrIGRlbGV0aW9uXG4gICAgaWYgKHRoaXMuY29uZmlybURlbGV0aW5nVGFzayhwYXJzZUludChpbmRleCkpKSB7XG4gICAgICB0aGlzLm1vZGVsLmRlbGV0ZVRhc2soaW5kZXgpO1xuICAgIH1cbiAgfVxuXG4gIGNvbmZpcm1EZWxldGluZ1Rhc2soaWQpIHtcbiAgICB0aGlzLnNob3dDb25maXJtRGVsZXRlTW9kYWwoaWQpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHNob3dDb25maXJtRGVsZXRlTW9kYWwoaWQpIHtcbiAgICBjb25zdCB0YXNrID0gdGhpcy5tb2RlbC5nZXRUYXNrQnlJZChpZCk7XG4gICAgY29uc3QgbW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NvbmZpcm0tdGFzay1kZWxldGUtbW9kYWxcIik7XG4gICAgbW9kYWwucXVlcnlTZWxlY3RvcihcIi50YXNrLXRpdGxlXCIpLnRleHRDb250ZW50ID0gdGFzay50aXRsZTtcbiAgICBtb2RhbC5xdWVyeVNlbGVjdG9yKFwiI2RlbGV0ZS1jb25maXJtXCIpLnNldEF0dHJpYnV0ZShcImRhdGEtaWRcIiwgaWQpO1xuICAgIG1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRlXCIpO1xuICB9XG5cbiAgYWRkQ29uZmlybURlbGV0ZVRhc2tCdXR0b25DbGlja0xpc3RlbmVyKCkge1xuICAgIGNvbnN0IGNvbmZpcm1CdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgXCIjY29uZmlybS10YXNrLWRlbGV0ZS1tb2RhbCAjZGVsZXRlLWNvbmZpcm1cIlxuICAgICk7XG4gICAgY29uZmlybUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgIGNvbnN0IGlkID0gY29uZmlybUJ1dHRvbi5nZXRBdHRyaWJ1dGUoXCJkYXRhLWlkXCIpO1xuICAgICAgdGhpcy5tb2RlbC5kZWxldGVUYXNrQnlJZChpZCk7XG4gICAgICB0aGlzLmFuaW1hdGVEZWxldGVUYXNrTW9kYWxDbG9zaW5nKCk7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH0pO1xuICB9XG5cbiAgYWRkSGlkZURlbGV0ZVRhc2tNb2RhbEV2ZW50TGlzdGVuZXIoKSB7XG4gICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY29uZmlybS10YXNrLWRlbGV0ZS1tb2RhbFwiKTtcbiAgICB3cmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJtb2RhbC13cmFwcGVyXCIpKSB7XG4gICAgICAgIHRoaXMuYW5pbWF0ZURlbGV0ZVRhc2tNb2RhbENsb3NpbmcoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IGNsb3NlQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgIFwiI2NvbmZpcm0tdGFzay1kZWxldGUtbW9kYWwgLmNsb3NlLWJ0blwiXG4gICAgKTtcbiAgICBjbG9zZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgIHRoaXMuYW5pbWF0ZURlbGV0ZVRhc2tNb2RhbENsb3NpbmcoKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGNhbmNlbEJ1dHRvbiA9IHdyYXBwZXIucXVlcnlTZWxlY3RvcihcIiNkZWxldGUtY2FuY2VsXCIpO1xuICAgIGNhbmNlbEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgIHRoaXMuYW5pbWF0ZURlbGV0ZVRhc2tNb2RhbENsb3NpbmcoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFuaW1hdGVEZWxldGVUYXNrTW9kYWxDbG9zaW5nKCkge1xuICAgIGNvbnN0IE1PREFMX0NMT1NJTkdfQU5JTUFUSU9OX0RVUkFUSU9OID0gNjAwO1xuXG4gICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY29uZmlybS10YXNrLWRlbGV0ZS1tb2RhbFwiKTtcbiAgICBjb25zdCBtb2RhbCA9IHdyYXBwZXIucXVlcnlTZWxlY3RvcihcIi5uZXctdGFzay1tb2RhbFwiKTtcblxuICAgIG1vZGFsLmNsYXNzTGlzdC5hZGQoXCJtb2RhbC1kaXNzbWlzLWFuaW1hdGlvblwiKTtcbiAgICB3cmFwcGVyLmNsYXNzTGlzdC5yZW1vdmUoXCJ3cmFwcGVyLWZhZGUtaW4tYW5pbWF0aW9uXCIpO1xuICAgIHdyYXBwZXIuY2xhc3NMaXN0LmFkZChcIndyYXBwZXItZmFkZS1vdXQtYW5pbWF0aW9uXCIpO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgd3JhcHBlci5jbGFzc0xpc3QuYWRkKFwiaGlkZVwiKTtcbiAgICAgIG1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoXCJtb2RhbC1kaXNzbWlzLWFuaW1hdGlvblwiKTtcbiAgICAgIHdyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZShcIndyYXBwZXItZmFkZS1vdXQtYW5pbWF0aW9uXCIpO1xuICAgICAgd3JhcHBlci5jbGFzc0xpc3QuYWRkKFwid3JhcHBlci1mYWRlLWluLWFuaW1hdGlvblwiKTtcbiAgICB9LCBNT0RBTF9DTE9TSU5HX0FOSU1BVElPTl9EVVJBVElPTik7XG4gIH1cblxuICAvKiBFRElUIE1PREFMICovXG5cbiAgYWRkRWRpdFRhc2tDbGlja0xpc3RlbmVyKCkge1xuICAgIGNvbnN0IGVkaXRCdG5zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tb3JlLW1lbnUtb3B0aW9uLmVkaXRcIik7XG4gICAgZm9yIChsZXQgYnRuIG9mIGVkaXRCdG5zKSB7XG4gICAgICBjb25zdCBpbmRleCA9XG4gICAgICAgIGJ0bi5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKFxuICAgICAgICAgIFwiZGF0YS1pbmRleFwiXG4gICAgICAgICk7XG4gICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuaGFuZGxlRWRpdFRhc2suYmluZCh0aGlzLCBpbmRleCkpO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZUVkaXRUYXNrKGluZGV4KSB7XG4gICAgY29uc29sZS5sb2coXCJFZGl0aW5nIHRhc2sgd2l0aCBpZCBcIiArIGluZGV4KTtcbiAgICAvLyBvcGVuIGVkaXQgbW9kYWxcbiAgfVxuXG4gIGFkZFRvZ2dsZURhcmtNb2RlQ2xpY2tMaXN0ZW5lcigpIHtcbiAgICBjb25zb2xlLmxvZyhcIkRhcmttb2RlIHRvZ2dsZSBsaXN0ZW5lciBhdHRhY2hlZFwiKTtcbiAgICBjb25zdCBidG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmRhcmstbW9kZS1pY29uXCIpO1xuICAgIGlmIChidG4pIHtcbiAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgICAgY29uc3QgYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpO1xuICAgICAgICBib2R5LmNsYXNzTGlzdC50b2dnbGUoXCJkYXJrLW1vZGVcIik7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coXCJEYXJrLW1vZGUgc3dpdGNoIGJ1dHRvbiBub3QgZm91bmRcIik7XG4gICAgfVxuICB9XG5cbiAgYWRkT3ZlcnZpZXdQYWdlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5hZGRQcm9qZWN0VGlsZUNsaWNrTGlzdGVuZXIoKTtcbiAgICB0aGlzLmFkZE5ld1Byb2plY3RCdXR0b25MaXN0ZW5lcigpO1xuICAgIHRoaXMuYWRkSGlkZU5ld1Byb2plY3RNb2RhbEV2ZW50TGlzdGVuZXIoKTtcbiAgICB0aGlzLmFkZE5ld1Byb2plY3RTdWJtaXRMaXN0ZW5lcigpO1xuICB9XG5cbiAgYWRkUHJvamVjdFRpbGVDbGlja0xpc3RlbmVyKCkge1xuICAgIGNvbnN0IHRpbGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcbiAgICAgIFwiLnByb2plY3QtZ3JpZC1pdGVtOm5vdCgubmV3LXByb2plY3QtYnRuKVwiXG4gICAgKTtcbiAgICB0aWxlcy5mb3JFYWNoKCh0aWxlKSA9PiB7XG4gICAgICB0aWxlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgICBjb25zdCBiZyA9IGUudGFyZ2V0O1xuICAgICAgICBjb25zdCBwcm9qZWN0SWQgPSBiZy5wYXJlbnRFbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtcHJvamVjdC1pbmRleFwiKTtcbiAgICAgICAgdGhpcy5jaGFuZ2VDdXJyZW50UHJvamVjdChwcm9qZWN0SWQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBhZGROZXdQcm9qZWN0QnV0dG9uTGlzdGVuZXIoKSB7XG4gICAgY29uc3QgbmV3UHJvamVjdEJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm5ldy1wcm9qZWN0LWJ0blwiKTtcblxuICAgIG5ld1Byb2plY3RCdXR0b25zLmZvckVhY2goKGJ0bikgPT4ge1xuICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgICB0aGlzLm9wZW5OZXdQcm9qZWN0TW9kYWwoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgb3Blbk5ld1Byb2plY3RNb2RhbCgpIHtcbiAgICB0aGlzLnJlc2V0TmV3UHJvamVjdE1vZGFsRm9ybSgpO1xuICAgIGNvbnN0IG1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNuZXctcHJvamVjdC1tb2RhbC13cmFwcGVyXCIpO1xuICAgIG1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRlXCIpO1xuICB9XG5cbiAgcmVzZXROZXdQcm9qZWN0TW9kYWxGb3JtKCkge1xuICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI25ldy1wcm9qZWN0LWZvcm1cIik7XG4gICAgZm9ybS5yZXNldCgpO1xuICB9XG5cbiAgYWRkSGlkZU5ld1Byb2plY3RNb2RhbEV2ZW50TGlzdGVuZXIoKSB7XG4gICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbmV3LXByb2plY3QtbW9kYWwtd3JhcHBlclwiKTtcbiAgICB3cmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJtb2RhbC13cmFwcGVyXCIpKSB7XG4gICAgICAgIHRoaXMuYW5pbWF0ZU5ld1Byb2plY3RNb2RhbENsb3NpbmcoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IGNsb3NlQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgIFwiI25ldy1wcm9qZWN0LW1vZGFsLXdyYXBwZXIgLmNsb3NlLWJ0blwiXG4gICAgKTtcbiAgICBjbG9zZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgIHRoaXMuYW5pbWF0ZU5ld1Byb2plY3RNb2RhbENsb3NpbmcoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFuaW1hdGVOZXdQcm9qZWN0TW9kYWxDbG9zaW5nKCkge1xuICAgIGNvbnN0IE1PREFMX0NMT1NJTkdfQU5JTUFUSU9OX0RVUkFUSU9OID0gNjAwO1xuXG4gICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbmV3LXByb2plY3QtbW9kYWwtd3JhcHBlclwiKTtcbiAgICBjb25zdCBtb2RhbCA9IHdyYXBwZXIucXVlcnlTZWxlY3RvcihcIi5uZXctdGFzay1tb2RhbFwiKTtcblxuICAgIG1vZGFsLmNsYXNzTGlzdC5hZGQoXCJtb2RhbC1kaXNzbWlzLWFuaW1hdGlvblwiKTtcbiAgICB3cmFwcGVyLmNsYXNzTGlzdC5yZW1vdmUoXCJ3cmFwcGVyLWZhZGUtaW4tYW5pbWF0aW9uXCIpO1xuICAgIHdyYXBwZXIuY2xhc3NMaXN0LmFkZChcIndyYXBwZXItZmFkZS1vdXQtYW5pbWF0aW9uXCIpO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgd3JhcHBlci5jbGFzc0xpc3QuYWRkKFwiaGlkZVwiKTtcbiAgICAgIG1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoXCJtb2RhbC1kaXNzbWlzLWFuaW1hdGlvblwiKTtcbiAgICAgIHdyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZShcIndyYXBwZXItZmFkZS1vdXQtYW5pbWF0aW9uXCIpO1xuICAgICAgd3JhcHBlci5jbGFzc0xpc3QuYWRkKFwid3JhcHBlci1mYWRlLWluLWFuaW1hdGlvblwiKTtcbiAgICB9LCBNT0RBTF9DTE9TSU5HX0FOSU1BVElPTl9EVVJBVElPTik7XG4gIH1cblxuICBhZGROZXdQcm9qZWN0U3VibWl0TGlzdGVuZXIoKSB7XG4gICAgY29uc3QgYnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNuZXctcHJvamVjdC1zdWJtaXRcIik7XG4gICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgLy8gdmFsaWRhdGUgZm9ybVxuICAgICAgdGhpcy5wcm9qZWN0Rm9ybVZhbGlkYXRpb24uaW5pdCgpO1xuICAgICAgaWYgKHRoaXMucHJvamVjdEZvcm1WYWxpZGF0aW9uLmlzVmFsaWQoKSkge1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gdGhpcy5wcm9qZWN0Rm9ybVZhbGlkYXRpb24uZ2V0UHJvamVjdCgpO1xuICAgICAgICBjb25zb2xlLmxvZyhwcm9qZWN0KTtcbiAgICAgICAgdGhpcy5zdWJtaXROZXdQcm9qZWN0TW9kYWwocHJvamVjdCk7XG4gICAgICAgIHRoaXMuYW5pbWF0ZU5ld1Byb2plY3RNb2RhbENsb3NpbmcoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHN1Ym1pdE5ld1Byb2plY3RNb2RhbChwcm9qZWN0KSB7XG4gICAgY29uc29sZS5sb2coXCJTdWJtaXR0aW5nIG5ldyBwcm9qZWN0XCIpO1xuICAgIHRoaXMubW9kZWwuYWRkUHJvamVjdChwcm9qZWN0KTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG59XG4iLCJpbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIHZhbHVlIGEgZGF0ZT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZS4gVGhlIGZ1bmN0aW9uIHdvcmtzIGZvciBkYXRlcyB0cmFuc2ZlcnJlZCBhY3Jvc3MgaWZyYW1lcy5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSB0aGUgdmFsdWUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIGRhdGVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGEgdmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZShuZXcgRGF0ZSgpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhbiBpbnZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUobmV3IERhdGUoTmFOKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3Igc29tZSB2YWx1ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZSgnMjAxNC0wMi0zMScpXG4gKiAvLz0+IGZhbHNlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhbiBvYmplY3Q6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUoe30pXG4gKiAvLz0+IGZhbHNlXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNEYXRlKHZhbHVlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBEYXRlIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufSIsImltcG9ydCBpc0RhdGUgZnJvbSBcIi4uL2lzRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc1ZhbGlkXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIHZhbGlkP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyBmYWxzZSBpZiBhcmd1bWVudCBpcyBJbnZhbGlkIERhdGUgYW5kIHRydWUgb3RoZXJ3aXNlLlxuICogQXJndW1lbnQgaXMgY29udmVydGVkIHRvIERhdGUgdXNpbmcgYHRvRGF0ZWAuIFNlZSBbdG9EYXRlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL3RvRGF0ZX1cbiAqIEludmFsaWQgRGF0ZSBpcyBhIERhdGUsIHdob3NlIHRpbWUgdmFsdWUgaXMgTmFOLlxuICpcbiAqIFRpbWUgdmFsdWUgb2YgRGF0ZTogaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS45LjEuMVxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogLSBOb3cgYGlzVmFsaWRgIGRvZXNuJ3QgdGhyb3cgYW4gZXhjZXB0aW9uXG4gKiAgIGlmIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqICAgSW5zdGVhZCwgYXJndW1lbnQgaXMgY29udmVydGVkIGJlZm9yZWhhbmQgdXNpbmcgYHRvRGF0ZWAuXG4gKlxuICogICBFeGFtcGxlczpcbiAqXG4gKiAgIHwgYGlzVmFsaWRgIGFyZ3VtZW50ICAgICAgICB8IEJlZm9yZSB2Mi4wLjAgfCB2Mi4wLjAgb253YXJkIHxcbiAqICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tfFxuICogICB8IGBuZXcgRGF0ZSgpYCAgICAgICAgICAgICAgfCBgdHJ1ZWAgICAgICAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYG5ldyBEYXRlKCcyMDE2LTAxLTAxJylgICB8IGB0cnVlYCAgICAgICAgfCBgdHJ1ZWAgICAgICAgIHxcbiAqICAgfCBgbmV3IERhdGUoJycpYCAgICAgICAgICAgIHwgYGZhbHNlYCAgICAgICB8IGBmYWxzZWAgICAgICAgfFxuICogICB8IGBuZXcgRGF0ZSgxNDg4MzcwODM1MDgxKWAgfCBgdHJ1ZWAgICAgICAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYG5ldyBEYXRlKE5hTilgICAgICAgICAgICB8IGBmYWxzZWAgICAgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqICAgfCBgJzIwMTYtMDEtMDEnYCAgICAgICAgICAgIHwgYFR5cGVFcnJvcmAgICB8IGBmYWxzZWAgICAgICAgfFxuICogICB8IGAnJ2AgICAgICAgICAgICAgICAgICAgICAgfCBgVHlwZUVycm9yYCAgIHwgYGZhbHNlYCAgICAgICB8XG4gKiAgIHwgYDE0ODgzNzA4MzUwODFgICAgICAgICAgICB8IGBUeXBlRXJyb3JgICAgfCBgdHJ1ZWAgICAgICAgIHxcbiAqICAgfCBgTmFOYCAgICAgICAgICAgICAgICAgICAgIHwgYFR5cGVFcnJvcmAgICB8IGBmYWxzZWAgICAgICAgfFxuICpcbiAqICAgV2UgaW50cm9kdWNlIHRoaXMgY2hhbmdlIHRvIG1ha2UgKmRhdGUtZm5zKiBjb25zaXN0ZW50IHdpdGggRUNNQVNjcmlwdCBiZWhhdmlvclxuICogICB0aGF0IHRyeSB0byBjb2VyY2UgYXJndW1lbnRzIHRvIHRoZSBleHBlY3RlZCB0eXBlXG4gKiAgICh3aGljaCBpcyBhbHNvIHRoZSBjYXNlIHdpdGggb3RoZXIgKmRhdGUtZm5zKiBmdW5jdGlvbnMpLlxuICpcbiAqIEBwYXJhbSB7Kn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGUgaXMgdmFsaWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKDIwMTQsIDEsIDMxKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbHVlLCBjb252ZXJ0YWJsZSBpbnRvIGEgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQoMTM5MzgwNDgwMDAwMClcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoJycpKVxuICogLy89PiBmYWxzZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVmFsaWQoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuXG4gIGlmICghaXNEYXRlKGRpcnR5RGF0ZSkgJiYgdHlwZW9mIGRpcnR5RGF0ZSAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICByZXR1cm4gIWlzTmFOKE51bWJlcihkYXRlKSk7XG59IiwidmFyIGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiB7XG4gICAgb25lOiAnbGVzcyB0aGFuIGEgc2Vjb25kJyxcbiAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgeFNlY29uZHM6IHtcbiAgICBvbmU6ICcxIHNlY29uZCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgaGFsZkFNaW51dGU6ICdoYWxmIGEgbWludXRlJyxcbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIG1pbnV0ZScsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIHhNaW51dGVzOiB7XG4gICAgb25lOiAnMSBtaW51dGUnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIGFib3V0WEhvdXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBob3VyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeEhvdXJzOiB7XG4gICAgb25lOiAnMSBob3VyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeERheXM6IHtcbiAgICBvbmU6ICcxIGRheScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gZGF5cydcbiAgfSxcbiAgYWJvdXRYV2Vla3M6IHtcbiAgICBvbmU6ICdhYm91dCAxIHdlZWsnLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICB4V2Vla3M6IHtcbiAgICBvbmU6ICcxIHdlZWsnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICBhYm91dFhNb250aHM6IHtcbiAgICBvbmU6ICdhYm91dCAxIG1vbnRoJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIHhNb250aHM6IHtcbiAgICBvbmU6ICcxIG1vbnRoJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgeFllYXJzOiB7XG4gICAgb25lOiAnMSB5ZWFyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgb3ZlclhZZWFyczoge1xuICAgIG9uZTogJ292ZXIgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ292ZXIge3tjb3VudH19IHllYXJzJ1xuICB9LFxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6ICdhbG1vc3QgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2FsbW9zdCB7e2NvdW50fX0geWVhcnMnXG4gIH1cbn07XG5cbnZhciBmb3JtYXREaXN0YW5jZSA9IGZ1bmN0aW9uICh0b2tlbiwgY291bnQsIG9wdGlvbnMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgdmFyIHRva2VuVmFsdWUgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl07XG5cbiAgaWYgKHR5cGVvZiB0b2tlblZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWU7XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlLm9uZTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlLm90aGVyLnJlcGxhY2UoJ3t7Y291bnR9fScsIGNvdW50LnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMuYWRkU3VmZml4KSB7XG4gICAgaWYgKG9wdGlvbnMuY29tcGFyaXNvbiAmJiBvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICByZXR1cm4gJ2luICcgKyByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAnIGFnbyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdERpc3RhbmNlOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRm9ybWF0TG9uZ0ZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgLy8gVE9ETzogUmVtb3ZlIFN0cmluZygpXG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgIHZhciBmb3JtYXQgPSBhcmdzLmZvcm1hdHNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0c1thcmdzLmRlZmF1bHRXaWR0aF07XG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfTtcbn0iLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanNcIjtcbnZhciBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0VFRUUsIE1NTU0gZG8sIHknLFxuICBsb25nOiAnTU1NTSBkbywgeScsXG4gIG1lZGl1bTogJ01NTSBkLCB5JyxcbiAgc2hvcnQ6ICdNTS9kZC95eXl5J1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ2g6bW06c3MgYSB6enp6JyxcbiAgbG9uZzogJ2g6bW06c3MgYSB6JyxcbiAgbWVkaXVtOiAnaDptbTpzcyBhJyxcbiAgc2hvcnQ6ICdoOm1tIGEnXG59O1xudmFyIGRhdGVUaW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSwge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19LCB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIGRhdGVUaW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TG9uZzsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZE1hdGNoUGF0dGVybkZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MubWF0Y2hQYXR0ZXJuKTtcbiAgICBpZiAoIW1hdGNoUmVzdWx0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLnBhcnNlUGF0dGVybik7XG4gICAgaWYgKCFwYXJzZVJlc3VsdCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKHBhcnNlUmVzdWx0WzBdKSA6IHBhcnNlUmVzdWx0WzBdO1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhciByZXN0ID0gc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVzdDogcmVzdFxuICAgIH07XG4gIH07XG59IiwidmFyIGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogXCInbGFzdCcgZWVlZSAnYXQnIHBcIixcbiAgeWVzdGVyZGF5OiBcIid5ZXN0ZXJkYXkgYXQnIHBcIixcbiAgdG9kYXk6IFwiJ3RvZGF5IGF0JyBwXCIsXG4gIHRvbW9ycm93OiBcIid0b21vcnJvdyBhdCcgcFwiLFxuICBuZXh0V2VlazogXCJlZWVlICdhdCcgcFwiLFxuICBvdGhlcjogJ1AnXG59O1xuXG52YXIgZm9ybWF0UmVsYXRpdmUgPSBmdW5jdGlvbiAodG9rZW4sIF9kYXRlLCBfYmFzZURhdGUsIF9vcHRpb25zKSB7XG4gIHJldHVybiBmb3JtYXRSZWxhdGl2ZUxvY2FsZVt0b2tlbl07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXRSZWxhdGl2ZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZExvY2FsaXplRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpcnR5SW5kZXgsIGRpcnR5T3B0aW9ucykge1xuICAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICAgIHZhciBjb250ZXh0ID0gb3B0aW9ucy5jb250ZXh0ID8gU3RyaW5nKG9wdGlvbnMuY29udGV4dCkgOiAnc3RhbmRhbG9uZSc7XG4gICAgdmFyIHZhbHVlc0FycmF5O1xuXG4gICAgaWYgKGNvbnRleHQgPT09ICdmb3JtYXR0aW5nJyAmJiBhcmdzLmZvcm1hdHRpbmdWYWx1ZXMpIHtcbiAgICAgIHZhciBkZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRGb3JtYXR0aW5nV2lkdGggfHwgYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogZGVmYXVsdFdpZHRoO1xuICAgICAgdmFsdWVzQXJyYXkgPSBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1tkZWZhdWx0V2lkdGhdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX2RlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdFdpZHRoO1xuXG4gICAgICB2YXIgX3dpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuXG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MudmFsdWVzW193aWR0aF0gfHwgYXJncy52YWx1ZXNbX2RlZmF1bHRXaWR0aF07XG4gICAgfVxuXG4gICAgdmFyIGluZGV4ID0gYXJncy5hcmd1bWVudENhbGxiYWNrID8gYXJncy5hcmd1bWVudENhbGxiYWNrKGRpcnR5SW5kZXgpIDogZGlydHlJbmRleDsgLy8gQHRzLWlnbm9yZTogRm9yIHNvbWUgcmVhc29uIFR5cGVTY3JpcHQganVzdCBkb24ndCB3YW50IHRvIG1hdGNoIGl0LCBubyBtYXR0ZXIgaG93IGhhcmQgd2UgdHJ5LiBJIGNoYWxsZW5nZSB5b3UgdG8gdHJ5IHRvIHJlbW92ZSBpdCFcblxuICAgIHJldHVybiB2YWx1ZXNBcnJheVtpbmRleF07XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaEZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICB2YXIgbWF0Y2hQYXR0ZXJuID0gd2lkdGggJiYgYXJncy5tYXRjaFBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLm1hdGNoUGF0dGVybnNbYXJncy5kZWZhdWx0TWF0Y2hXaWR0aF07XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKG1hdGNoUGF0dGVybik7XG5cbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVBhdHRlcm5zID0gd2lkdGggJiYgYXJncy5wYXJzZVBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLnBhcnNlUGF0dGVybnNbYXJncy5kZWZhdWx0UGFyc2VXaWR0aF07XG4gICAgdmFyIGtleSA9IEFycmF5LmlzQXJyYXkocGFyc2VQYXR0ZXJucykgPyBmaW5kSW5kZXgocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZyk7XG4gICAgfSkgOiBmaW5kS2V5KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpO1xuICAgIH0pO1xuICAgIHZhciB2YWx1ZTtcbiAgICB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhrZXkpIDoga2V5O1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhciByZXN0ID0gc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVzdDogcmVzdFxuICAgIH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlmIChvYmplY3QuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBwcmVkaWNhdGUob2JqZWN0W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSA9IDA7IGtleSA8IGFycmF5Lmxlbmd0aDsga2V5KyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59IiwiaW1wb3J0IGZvcm1hdERpc3RhbmNlIGZyb20gXCIuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXRMb25nIGZyb20gXCIuL19saWIvZm9ybWF0TG9uZy9pbmRleC5qc1wiO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gXCIuL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanNcIjtcbmltcG9ydCBsb2NhbGl6ZSBmcm9tIFwiLi9fbGliL2xvY2FsaXplL2luZGV4LmpzXCI7XG5pbXBvcnQgbWF0Y2ggZnJvbSBcIi4vX2xpYi9tYXRjaC9pbmRleC5qc1wiO1xuXG4vKipcbiAqIEB0eXBlIHtMb2NhbGV9XG4gKiBAY2F0ZWdvcnkgTG9jYWxlc1xuICogQHN1bW1hcnkgRW5nbGlzaCBsb2NhbGUgKFVuaXRlZCBTdGF0ZXMpLlxuICogQGxhbmd1YWdlIEVuZ2xpc2hcbiAqIEBpc28tNjM5LTIgZW5nXG4gKiBAYXV0aG9yIFNhc2hhIEtvc3MgW0Brb3Nzbm9jb3JwXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20va29zc25vY29ycH1cbiAqIEBhdXRob3IgTGVzaGEgS29zcyBbQGxlc2hha29zc117QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2xlc2hha29zc31cbiAqL1xudmFyIGxvY2FsZSA9IHtcbiAgY29kZTogJ2VuLVVTJyxcbiAgZm9ybWF0RGlzdGFuY2U6IGZvcm1hdERpc3RhbmNlLFxuICBmb3JtYXRMb25nOiBmb3JtYXRMb25nLFxuICBmb3JtYXRSZWxhdGl2ZTogZm9ybWF0UmVsYXRpdmUsXG4gIGxvY2FsaXplOiBsb2NhbGl6ZSxcbiAgbWF0Y2g6IG1hdGNoLFxuICBvcHRpb25zOiB7XG4gICAgd2Vla1N0YXJ0c09uOiAwXG4gICAgLyogU3VuZGF5ICovXG4gICAgLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogMVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsImltcG9ydCBidWlsZExvY2FsaXplRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzXCI7XG52YXIgZXJhVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnQicsICdBJ10sXG4gIGFiYnJldmlhdGVkOiBbJ0JDJywgJ0FEJ10sXG4gIHdpZGU6IFsnQmVmb3JlIENocmlzdCcsICdBbm5vIERvbWluaSddXG59O1xudmFyIHF1YXJ0ZXJWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWycxJywgJzInLCAnMycsICc0J10sXG4gIGFiYnJldmlhdGVkOiBbJ1ExJywgJ1EyJywgJ1EzJywgJ1E0J10sXG4gIHdpZGU6IFsnMXN0IHF1YXJ0ZXInLCAnMm5kIHF1YXJ0ZXInLCAnM3JkIHF1YXJ0ZXInLCAnNHRoIHF1YXJ0ZXInXVxufTsgLy8gTm90ZTogaW4gRW5nbGlzaCwgdGhlIG5hbWVzIG9mIGRheXMgb2YgdGhlIHdlZWsgYW5kIG1vbnRocyBhcmUgY2FwaXRhbGl6ZWQuXG4vLyBJZiB5b3UgYXJlIG1ha2luZyBhIG5ldyBsb2NhbGUgYmFzZWQgb24gdGhpcyBvbmUsIGNoZWNrIGlmIHRoZSBzYW1lIGlzIHRydWUgZm9yIHRoZSBsYW5ndWFnZSB5b3UncmUgd29ya2luZyBvbi5cbi8vIEdlbmVyYWxseSwgZm9ybWF0dGVkIGRhdGVzIHNob3VsZCBsb29rIGxpa2UgdGhleSBhcmUgaW4gdGhlIG1pZGRsZSBvZiBhIHNlbnRlbmNlLFxuLy8gZS5nLiBpbiBTcGFuaXNoIGxhbmd1YWdlIHRoZSB3ZWVrZGF5cyBhbmQgbW9udGhzIHNob3VsZCBiZSBpbiB0aGUgbG93ZXJjYXNlLlxuXG52YXIgbW9udGhWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydKJywgJ0YnLCAnTScsICdBJywgJ00nLCAnSicsICdKJywgJ0EnLCAnUycsICdPJywgJ04nLCAnRCddLFxuICBhYmJyZXZpYXRlZDogWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddLFxuICB3aWRlOiBbJ0phbnVhcnknLCAnRmVicnVhcnknLCAnTWFyY2gnLCAnQXByaWwnLCAnTWF5JywgJ0p1bmUnLCAnSnVseScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09jdG9iZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydTJywgJ00nLCAnVCcsICdXJywgJ1QnLCAnRicsICdTJ10sXG4gIHNob3J0OiBbJ1N1JywgJ01vJywgJ1R1JywgJ1dlJywgJ1RoJywgJ0ZyJywgJ1NhJ10sXG4gIGFiYnJldmlhdGVkOiBbJ1N1bicsICdNb24nLCAnVHVlJywgJ1dlZCcsICdUaHUnLCAnRnJpJywgJ1NhdCddLFxuICB3aWRlOiBbJ1N1bmRheScsICdNb25kYXknLCAnVHVlc2RheScsICdXZWRuZXNkYXknLCAnVGh1cnNkYXknLCAnRnJpZGF5JywgJ1NhdHVyZGF5J11cbn07XG52YXIgZGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ2EnLFxuICAgIHBtOiAncCcsXG4gICAgbWlkbmlnaHQ6ICdtaScsXG4gICAgbm9vbjogJ24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnYS5tLicsXG4gICAgcG06ICdwLm0uJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH1cbn07XG52YXIgZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9XG59O1xuXG52YXIgb3JkaW5hbE51bWJlciA9IGZ1bmN0aW9uIChkaXJ0eU51bWJlciwgX29wdGlvbnMpIHtcbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7IC8vIElmIG9yZGluYWwgbnVtYmVycyBkZXBlbmQgb24gY29udGV4dCwgZm9yIGV4YW1wbGUsXG4gIC8vIGlmIHRoZXkgYXJlIGRpZmZlcmVudCBmb3IgZGlmZmVyZW50IGdyYW1tYXRpY2FsIGdlbmRlcnMsXG4gIC8vIHVzZSBgb3B0aW9ucy51bml0YC5cbiAgLy9cbiAgLy8gYHVuaXRgIGNhbiBiZSAneWVhcicsICdxdWFydGVyJywgJ21vbnRoJywgJ3dlZWsnLCAnZGF0ZScsICdkYXlPZlllYXInLFxuICAvLyAnZGF5JywgJ2hvdXInLCAnbWludXRlJywgJ3NlY29uZCcuXG5cbiAgdmFyIHJlbTEwMCA9IG51bWJlciAlIDEwMDtcblxuICBpZiAocmVtMTAwID4gMjAgfHwgcmVtMTAwIDwgMTApIHtcbiAgICBzd2l0Y2ggKHJlbTEwMCAlIDEwKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnc3QnO1xuXG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnbmQnO1xuXG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAncmQnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudW1iZXIgKyAndGgnO1xufTtcblxudmFyIGxvY2FsaXplID0ge1xuICBvcmRpbmFsTnVtYmVyOiBvcmRpbmFsTnVtYmVyLFxuICBlcmE6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBlcmFWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGFyZ3VtZW50Q2FsbGJhY2s6IGZ1bmN0aW9uIChxdWFydGVyKSB7XG4gICAgICByZXR1cm4gcXVhcnRlciAtIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBtb250aFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGl6ZTsiLCJpbXBvcnQgYnVpbGRNYXRjaEZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qc1wiO1xuaW1wb3J0IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qc1wiO1xudmFyIG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXihcXGQrKSh0aHxzdHxuZHxyZCk/L2k7XG52YXIgcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9cXGQrL2k7XG52YXIgbWF0Y2hFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihifGEpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihiXFwuP1xccz9jXFwuP3xiXFwuP1xccz9jXFwuP1xccz9lXFwuP3xhXFwuP1xccz9kXFwuP3xjXFwuP1xccz9lXFwuPykvaSxcbiAgd2lkZTogL14oYmVmb3JlIGNocmlzdHxiZWZvcmUgY29tbW9uIGVyYXxhbm5vIGRvbWluaXxjb21tb24gZXJhKS9pXG59O1xudmFyIHBhcnNlRXJhUGF0dGVybnMgPSB7XG4gIGFueTogWy9eYi9pLCAvXihhfGMpL2ldXG59O1xudmFyIG1hdGNoUXVhcnRlclBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eWzEyMzRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXnFbMTIzNF0vaSxcbiAgd2lkZTogL15bMTIzNF0odGh8c3R8bmR8cmQpPyBxdWFydGVyL2lcbn07XG52YXIgcGFyc2VRdWFydGVyUGF0dGVybnMgPSB7XG4gIGFueTogWy8xL2ksIC8yL2ksIC8zL2ksIC80L2ldXG59O1xudmFyIG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltqZm1hc29uZF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGphbnxmZWJ8bWFyfGFwcnxtYXl8anVufGp1bHxhdWd8c2VwfG9jdHxub3Z8ZGVjKS9pLFxuICB3aWRlOiAvXihqYW51YXJ5fGZlYnJ1YXJ5fG1hcmNofGFwcmlsfG1heXxqdW5lfGp1bHl8YXVndXN0fHNlcHRlbWJlcnxvY3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pXG59O1xudmFyIHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15qL2ksIC9eZi9pLCAvXm0vaSwgL15hL2ksIC9ebS9pLCAvXmovaSwgL15qL2ksIC9eYS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV0sXG4gIGFueTogWy9eamEvaSwgL15mL2ksIC9ebWFyL2ksIC9eYXAvaSwgL15tYXkvaSwgL15qdW4vaSwgL15qdWwvaSwgL15hdS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV1cbn07XG52YXIgbWF0Y2hEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltzbXR3Zl0vaSxcbiAgc2hvcnQ6IC9eKHN1fG1vfHR1fHdlfHRofGZyfHNhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oc3VufG1vbnx0dWV8d2VkfHRodXxmcml8c2F0KS9pLFxuICB3aWRlOiAvXihzdW5kYXl8bW9uZGF5fHR1ZXNkYXl8d2VkbmVzZGF5fHRodXJzZGF5fGZyaWRheXxzYXR1cmRheSkvaVxufTtcbnZhciBwYXJzZURheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXnMvaSwgL15tL2ksIC9edC9pLCAvXncvaSwgL150L2ksIC9eZi9pLCAvXnMvaV0sXG4gIGFueTogWy9ec3UvaSwgL15tL2ksIC9edHUvaSwgL153L2ksIC9edGgvaSwgL15mL2ksIC9ec2EvaV1cbn07XG52YXIgbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihhfHB8bWl8bnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2ksXG4gIGFueTogL14oW2FwXVxcLj9cXHM/bVxcLj98bWlkbmlnaHR8bm9vbnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2lcbn07XG52YXIgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9eYS9pLFxuICAgIHBtOiAvXnAvaSxcbiAgICBtaWRuaWdodDogL15taS9pLFxuICAgIG5vb246IC9ebm8vaSxcbiAgICBtb3JuaW5nOiAvbW9ybmluZy9pLFxuICAgIGFmdGVybm9vbjogL2FmdGVybm9vbi9pLFxuICAgIGV2ZW5pbmc6IC9ldmVuaW5nL2ksXG4gICAgbmlnaHQ6IC9uaWdodC9pXG4gIH1cbn07XG52YXIgbWF0Y2ggPSB7XG4gIG9yZGluYWxOdW1iZXI6IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oe1xuICAgIG1hdGNoUGF0dGVybjogbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICBwYXJzZVBhdHRlcm46IHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB9XG4gIH0pLFxuICBlcmE6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgcmV0dXJuIGluZGV4ICsgMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaE1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZU1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXk6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ2FueScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBtYXRjaDsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0ludGVnZXIoZGlydHlOdW1iZXIpIHtcbiAgaWYgKGRpcnR5TnVtYmVyID09PSBudWxsIHx8IGRpcnR5TnVtYmVyID09PSB0cnVlIHx8IGRpcnR5TnVtYmVyID09PSBmYWxzZSkge1xuICAgIHJldHVybiBOYU47XG4gIH1cblxuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTtcblxuICBpZiAoaXNOYU4obnVtYmVyKSkge1xuICAgIHJldHVybiBudW1iZXI7XG4gIH1cblxuICByZXR1cm4gbnVtYmVyIDwgMCA/IE1hdGguY2VpbChudW1iZXIpIDogTWF0aC5mbG9vcihudW1iZXIpO1xufSIsImltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGFkZE1pbGxpc2Vjb25kc1xuICogQGNhdGVnb3J5IE1pbGxpc2Vjb25kIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBiZSBhZGRlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtaWxsaXNlY29uZHMgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIDc1MCBtaWxsaXNlY29uZHMgdG8gMTAgSnVseSAyMDE0IDEyOjQ1OjMwLjAwMDpcbiAqIGNvbnN0IHJlc3VsdCA9IGFkZE1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjQ1OjMwLjc1MFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZE1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgdGltZXN0YW1wID0gdG9EYXRlKGRpcnR5RGF0ZSkuZ2V0VGltZSgpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIGFtb3VudCk7XG59IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCBhZGRNaWxsaXNlY29uZHMgZnJvbSBcIi4uL2FkZE1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgc3ViTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gYmUgc3VidHJhY3RlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtaWxsaXNlY29uZHMgc3VidHJhY3RlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBTdWJ0cmFjdCA3NTAgbWlsbGlzZWNvbmRzIGZyb20gMTAgSnVseSAyMDE0IDEyOjQ1OjMwLjAwMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN1Yk1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjQ1OjI5LjI1MFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN1Yk1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIGFkZE1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIC1hbW91bnQpO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX0RBWSA9IDg2NDAwMDAwOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDRGF5T2ZZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlllYXJUaW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgdmFyIGRpZmZlcmVuY2UgPSB0aW1lc3RhbXAgLSBzdGFydE9mWWVhclRpbWVzdGFtcDtcbiAgcmV0dXJuIE1hdGguZmxvb3IoZGlmZmVyZW5jZSAvIE1JTExJU0VDT05EU19JTl9EQVkpICsgMTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gMTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIgKyAxLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZOZXh0WWVhciA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlRoaXNZZWFyID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhcik7XG5cbiAgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5ZWFyIC0gMTtcbiAgfVxufSIsImltcG9ydCBnZXRVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vZ2V0VVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIHllYXIgPSBnZXRVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5ID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeS5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgZGF0ZSA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeSk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fV0VFSyA9IDYwNDgwMDAwMDsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGlmZiA9IHN0YXJ0T2ZVVENJU09XZWVrKGRhdGUpLmdldFRpbWUoKSAtIHN0YXJ0T2ZVVENJU09XZWVrWWVhcihkYXRlKS5nZXRUaW1lKCk7IC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG5cbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIE1JTExJU0VDT05EU19JTl9XRUVLKSArIDE7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ1dlZWsoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGU7XG4gIHZhciBsb2NhbGVXZWVrU3RhcnRzT24gPSBsb2NhbGUgJiYgbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMud2Vla1N0YXJ0c09uO1xuICB2YXIgZGVmYXVsdFdlZWtTdGFydHNPbiA9IGxvY2FsZVdlZWtTdGFydHNPbiA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihsb2NhbGVXZWVrU3RhcnRzT24pO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gb3B0aW9ucy53ZWVrU3RhcnRzT24gPT0gbnVsbCA/IGRlZmF1bHRXZWVrU3RhcnRzT24gOiB0b0ludGVnZXIob3B0aW9ucy53ZWVrU3RhcnRzT24pOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDAgYW5kIDYgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKHdlZWtTdGFydHNPbiA+PSAwICYmIHdlZWtTdGFydHNPbiA8PSA2KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd3ZWVrU3RhcnRzT24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENXZWVrWWVhcihkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGU7XG4gIHZhciBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGUgJiYgbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlO1xuICB2YXIgZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gMSA6IHRvSW50ZWdlcihsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgOiB0b0ludGVnZXIob3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDEgYW5kIDcgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciBmaXJzdFdlZWtPZk5leHRZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDRnVsbFllYXIoeWVhciArIDEsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWtPZk5leHRZZWFyLCBkaXJ0eU9wdGlvbnMpO1xuICB2YXIgZmlyc3RXZWVrT2ZUaGlzWWVhciA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWtPZlRoaXNZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vla09mVGhpc1llYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mVGhpc1llYXIgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWtPZlRoaXNZZWFyLCBkaXJ0eU9wdGlvbnMpO1xuXG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn0iLCJpbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlO1xuICB2YXIgbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlICYmIGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZTtcbiAgdmFyIGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IDEgOiB0b0ludGVnZXIobG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlIDogdG9JbnRlZ2VyKG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIHllYXIgPSBnZXRVVENXZWVrWWVhcihkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWsgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vlay5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIGRhdGUgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWssIGRpcnR5T3B0aW9ucyk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrWWVhciBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fV0VFSyA9IDYwNDgwMDAwMDsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ1dlZWsoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGlmZiA9IHN0YXJ0T2ZVVENXZWVrKGRhdGUsIG9wdGlvbnMpLmdldFRpbWUoKSAtIHN0YXJ0T2ZVVENXZWVrWWVhcihkYXRlLCBvcHRpb25zKS5nZXRUaW1lKCk7IC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG5cbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIE1JTExJU0VDT05EU19JTl9XRUVLKSArIDE7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTGVhZGluZ1plcm9zKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCA/ICctJyA6ICcnO1xuICB2YXIgb3V0cHV0ID0gTWF0aC5hYnMobnVtYmVyKS50b1N0cmluZygpO1xuXG4gIHdoaWxlIChvdXRwdXQubGVuZ3RoIDwgdGFyZ2V0TGVuZ3RoKSB7XG4gICAgb3V0cHV0ID0gJzAnICsgb3V0cHV0O1xuICB9XG5cbiAgcmV0dXJuIHNpZ24gKyBvdXRwdXQ7XG59IiwiaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tIFwiLi4vLi4vYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzXCI7XG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqL1xuXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICAvLyBGcm9tIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtMzEvdHIzNS1kYXRlcy5odG1sI0RhdGVfRm9ybWF0X3Rva2Vuc1xuICAgIC8vIHwgWWVhciAgICAgfCAgICAgeSB8IHl5IHwgICB5eXkgfCAgeXl5eSB8IHl5eXl5IHxcbiAgICAvLyB8LS0tLS0tLS0tLXwtLS0tLS0tfC0tLS18LS0tLS0tLXwtLS0tLS0tfC0tLS0tLS18XG4gICAgLy8gfCBBRCAxICAgICB8ICAgICAxIHwgMDEgfCAgIDAwMSB8ICAwMDAxIHwgMDAwMDEgfFxuICAgIC8vIHwgQUQgMTIgICAgfCAgICAxMiB8IDEyIHwgICAwMTIgfCAgMDAxMiB8IDAwMDEyIHxcbiAgICAvLyB8IEFEIDEyMyAgIHwgICAxMjMgfCAyMyB8ICAgMTIzIHwgIDAxMjMgfCAwMDEyMyB8XG4gICAgLy8gfCBBRCAxMjM0ICB8ICAxMjM0IHwgMzQgfCAgMTIzNCB8ICAxMjM0IHwgMDEyMzQgfFxuICAgIC8vIHwgQUQgMTIzNDUgfCAxMjM0NSB8IDQ1IHwgMTIzNDUgfCAxMjM0NSB8IDEyMzQ1IHxcbiAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgIHZhciB5ZWFyID0gc2lnbmVkWWVhciA+IDAgPyBzaWduZWRZZWFyIDogMSAtIHNpZ25lZFllYXI7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0b2tlbiA9PT0gJ3l5JyA/IHllYXIgJSAxMDAgOiB5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNb250aFxuICBNOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgcmV0dXJuIHRva2VuID09PSAnTScgPyBTdHJpbmcobW9udGggKyAxKSA6IGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENEYXRlKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXRlLmdldFVUQ0hvdXJzKCkgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICBjYXNlICdhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgICBjYXNlICdhYWFhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWVbMF07XG5cbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZSA9PT0gJ2FtJyA/ICdhLm0uJyA6ICdwLm0uJztcbiAgICB9XG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ01pbnV0ZXMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbnVtYmVyT2ZEaWdpdHMgPSB0b2tlbi5sZW5ndGg7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gICAgdmFyIGZyYWN0aW9uYWxTZWNvbmRzID0gTWF0aC5mbG9vcihtaWxsaXNlY29uZHMgKiBNYXRoLnBvdygxMCwgbnVtYmVyT2ZEaWdpdHMgLSAzKSk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhmcmFjdGlvbmFsU2Vjb25kcywgdG9rZW4ubGVuZ3RoKTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwiaW1wb3J0IGdldFVUQ0RheU9mWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENEYXlPZlllYXIvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWtZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgYWRkTGVhZGluZ1plcm9zIGZyb20gXCIuLi8uLi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanNcIjtcbmltcG9ydCBsaWdodEZvcm1hdHRlcnMgZnJvbSBcIi4uL2xpZ2h0Rm9ybWF0dGVycy9pbmRleC5qc1wiO1xudmFyIGRheVBlcmlvZEVudW0gPSB7XG4gIGFtOiAnYW0nLFxuICBwbTogJ3BtJyxcbiAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gIG5vb246ICdub29uJyxcbiAgbW9ybmluZzogJ21vcm5pbmcnLFxuICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICBldmVuaW5nOiAnZXZlbmluZycsXG4gIG5pZ2h0OiAnbmlnaHQnXG59O1xuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgTWlsbGlzZWNvbmRzIGluIGRheSAgICAgICAgICAgIHxcbiAqIHwgIGIgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgIHwgIEIgIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgIHxcbiAqIHwgIGMgIHwgU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWsgIHwgIEMqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGUgIHwgTG9jYWwgZGF5IG9mIHdlZWsgICAgICAgICAgICAgIHwgIEUgIHwgRGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGYgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEYqIHwgRGF5IG9mIHdlZWsgaW4gbW9udGggICAgICAgICAgIHxcbiAqIHwgIGcqIHwgTW9kaWZpZWQgSnVsaWFuIGRheSAgICAgICAgICAgIHwgIEcgIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGkhIHwgSVNPIGRheSBvZiB3ZWVrICAgICAgICAgICAgICAgIHwgIEkhIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgIHxcbiAqIHwgIGoqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHwgIEoqIHwgTG9jYWxpemVkIGhvdXIgdy9vIGRheSBwZXJpb2QgIHxcbiAqIHwgIGsgIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgIHwgIEsgIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGwqIHwgKGRlcHJlY2F0ZWQpICAgICAgICAgICAgICAgICAgIHwgIEwgIHwgU3RhbmQtYWxvbmUgbW9udGggICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG8hIHwgT3JkaW5hbCBudW1iZXIgbW9kaWZpZXIgICAgICAgIHwgIE8gIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHAhIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgIHwgIFAhIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgIHxcbiAqIHwgIHEgIHwgU3RhbmQtYWxvbmUgcXVhcnRlciAgICAgICAgICAgIHwgIFEgIHwgUXVhcnRlciAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHIqIHwgUmVsYXRlZCBHcmVnb3JpYW4geWVhciAgICAgICAgIHwgIFIhIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHQhIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgIHwgIFQhIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgIHxcbiAqIHwgIHUgIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgIHwgIFUqIHwgQ3ljbGljIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHYqIHwgVGltZXpvbmUgKGdlbmVyaWMgbm9uLWxvY2F0LikgIHwgIFYqIHwgVGltZXpvbmUgKGxvY2F0aW9uKSAgICAgICAgICAgIHxcbiAqIHwgIHcgIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgIHwgIFcqIHwgV2VlayBvZiBtb250aCAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHggIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgIHwgIFggIHwgVGltZXpvbmUgKElTTy04NjAxKSAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgIHxcbiAqIHwgIHogIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pIHwgIFoqIHwgVGltZXpvbmUgKGFsaWFzZXMpICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgISBhcmUgbm9uLXN0YW5kYXJkLCBidXQgaW1wbGVtZW50ZWQgYnkgZGF0ZS1mbnM6XG4gKiAtIGBvYCBtb2RpZmllcyB0aGUgcHJldmlvdXMgdG9rZW4gdG8gdHVybiBpdCBpbnRvIGFuIG9yZGluYWwgKHNlZSBgZm9ybWF0YCBkb2NzKVxuICogLSBgaWAgaXMgSVNPIGRheSBvZiB3ZWVrLiBGb3IgYGlgIGFuZCBgaWlgIGlzIHJldHVybnMgbnVtZXJpYyBJU08gd2VlayBkYXlzLFxuICogICBpLmUuIDcgZm9yIFN1bmRheSwgMSBmb3IgTW9uZGF5LCBldGMuXG4gKiAtIGBJYCBpcyBJU08gd2VlayBvZiB5ZWFyLCBhcyBvcHBvc2VkIHRvIGB3YCB3aGljaCBpcyBsb2NhbCB3ZWVrIG9mIHllYXIuXG4gKiAtIGBSYCBpcyBJU08gd2Vlay1udW1iZXJpbmcgeWVhciwgYXMgb3Bwb3NlZCB0byBgWWAgd2hpY2ggaXMgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhci5cbiAqICAgYFJgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgSWAgYW5kIGBpYFxuICogICBmb3IgdW5pdmVyc2FsIElTTyB3ZWVrLW51bWJlcmluZyBkYXRlLCB3aGVyZWFzXG4gKiAgIGBZYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHdgIGFuZCBgZWBcbiAqICAgZm9yIHdlZWstbnVtYmVyaW5nIGRhdGUgc3BlY2lmaWMgdG8gdGhlIGxvY2FsZS5cbiAqIC0gYFBgIGlzIGxvbmcgbG9jYWxpemVkIGRhdGUgZm9ybWF0XG4gKiAtIGBwYCBpcyBsb25nIGxvY2FsaXplZCB0aW1lIGZvcm1hdFxuICovXG5cbnZhciBmb3JtYXR0ZXJzID0ge1xuICAvLyBFcmFcbiAgRzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBlcmEgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgPiAwID8gMSA6IDA7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBBRCwgQkNcbiAgICAgIGNhc2UgJ0cnOlxuICAgICAgY2FzZSAnR0cnOlxuICAgICAgY2FzZSAnR0dHJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEEsIEJcblxuICAgICAgY2FzZSAnR0dHR0cnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93J1xuICAgICAgICB9KTtcbiAgICAgIC8vIEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0XG5cbiAgICAgIGNhc2UgJ0dHR0cnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgLy8gT3JkaW5hbCBudW1iZXJcbiAgICBpZiAodG9rZW4gPT09ICd5bycpIHtcbiAgICAgIHZhciBzaWduZWRZZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoeWVhciwge1xuICAgICAgICB1bml0OiAneWVhcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMueShkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgWTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBzaWduZWRXZWVrWWVhciA9IGdldFVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgdmFyIHdlZWtZZWFyID0gc2lnbmVkV2Vla1llYXIgPiAwID8gc2lnbmVkV2Vla1llYXIgOiAxIC0gc2lnbmVkV2Vla1llYXI7IC8vIFR3byBkaWdpdCB5ZWFyXG5cbiAgICBpZiAodG9rZW4gPT09ICdZWScpIHtcbiAgICAgIHZhciB0d29EaWdpdFllYXIgPSB3ZWVrWWVhciAlIDEwMDtcbiAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModHdvRGlnaXRZZWFyLCAyKTtcbiAgICB9IC8vIE9yZGluYWwgbnVtYmVyXG5cblxuICAgIGlmICh0b2tlbiA9PT0gJ1lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vla1llYXIsIHtcbiAgICAgICAgdW5pdDogJ3llYXInXG4gICAgICB9KTtcbiAgICB9IC8vIFBhZGRpbmdcblxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh3ZWVrWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgUjogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIGlzb1dlZWtZZWFyID0gZ2V0VVRDSVNPV2Vla1llYXIoZGF0ZSk7IC8vIFBhZGRpbmdcblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvV2Vla1llYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEV4dGVuZGVkIHllYXIuIFRoaXMgaXMgYSBzaW5nbGUgbnVtYmVyIGRlc2lnbmF0aW5nIHRoZSB5ZWFyIG9mIHRoaXMgY2FsZW5kYXIgc3lzdGVtLlxuICAvLyBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgbG9jYWxpemVycyBhcmUgQi5DLiB5ZWFyczpcbiAgLy8gfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAgLy8gfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAgLy8gfCBBQyAxIHwgICAxIHwgICAxIHxcbiAgLy8gfCBCQyAxIHwgICAxIHwgICAwIHxcbiAgLy8gfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAgLy8gQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICAvLyB3aGlsZSBgdXVgIHBhZHMgc2luZ2xlIGRpZ2l0IHllYXJzIHRvIDIgY2hhcmFjdGVycyBhbmQgcmV0dXJucyBvdGhlciB5ZWFycyB1bmNoYW5nZWQuXG4gIHU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gUXVhcnRlclxuICBROiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdRJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG5cbiAgICAgIGNhc2UgJ1FRJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhxdWFydGVyLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuXG4gICAgICBjYXNlICdRbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuXG4gICAgICBjYXNlICdRUVEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG5cbiAgICAgIGNhc2UgJ1FRUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLlxuXG4gICAgICBjYXNlICdRUVFRJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIHF1YXJ0ZXJcbiAgcTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSAvIDMpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSAncSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuXG4gICAgICBjYXNlICdxcSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcblxuICAgICAgY2FzZSAncW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7XG4gICAgICAgICAgdW5pdDogJ3F1YXJ0ZXInXG4gICAgICAgIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcblxuICAgICAgY2FzZSAncXFxJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuXG4gICAgICBjYXNlICdxcXFxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cblxuICAgICAgY2FzZSAncXFxcSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBNb250aFxuICBNOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnTSc6XG4gICAgICBjYXNlICdNTSc6XG4gICAgICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuTShkYXRlLCB0b2tlbik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG5cbiAgICAgIGNhc2UgJ01vJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobW9udGggKyAxLCB7XG4gICAgICAgICAgdW5pdDogJ21vbnRoJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbiwgRmViLCAuLi4sIERlY1xuXG4gICAgICBjYXNlICdNTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBKLCBGLCAuLi4sIERcblxuICAgICAgY2FzZSAnTU1NTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcblxuICAgICAgY2FzZSAnTU1NTSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIG1vbnRoXG4gIEw6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAuLi4sIDEyXG4gICAgICBjYXNlICdMJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhtb250aCArIDEpO1xuICAgICAgLy8gMDEsIDAyLCAuLi4sIDEyXG5cbiAgICAgIGNhc2UgJ0xMJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuXG4gICAgICBjYXNlICdMbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcblxuICAgICAgY2FzZSAnTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG5cbiAgICAgIGNhc2UgJ0xMTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG5cbiAgICAgIGNhc2UgJ0xMTEwnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBMb2NhbCB3ZWVrIG9mIHllYXJcbiAgdzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciB3ZWVrID0gZ2V0VVRDV2VlayhkYXRlLCBvcHRpb25zKTtcblxuICAgIGlmICh0b2tlbiA9PT0gJ3dvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vlaywge1xuICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSVNPIHdlZWsgb2YgeWVhclxuICBJOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGlzb1dlZWsgPSBnZXRVVENJU09XZWVrKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSAnSW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29XZWVrLCB7XG4gICAgICAgIHVuaXQ6ICd3ZWVrJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdkbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDRGF0ZSgpLCB7XG4gICAgICAgIHVuaXQ6ICdkYXRlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5kKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHllYXJcbiAgRDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZlllYXIgPSBnZXRVVENEYXlPZlllYXIoZGF0ZSk7XG5cbiAgICBpZiAodG9rZW4gPT09ICdEbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRheU9mWWVhciwge1xuICAgICAgICB1bml0OiAnZGF5T2ZZZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXlPZlllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIERheSBvZiB3ZWVrXG4gIEU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFR1ZVxuICAgICAgY2FzZSAnRSc6XG4gICAgICBjYXNlICdFRSc6XG4gICAgICBjYXNlICdFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdFRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnRUVFRSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgZGF5IG9mIHdlZWtcbiAgZTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChOdGggZGF5IG9mIHdlZWsgd2l0aCBjdXJyZW50IGxvY2FsZSBvciB3ZWVrU3RhcnRzT24pXG4gICAgICBjYXNlICdlJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG5cbiAgICAgIGNhc2UgJ2VlJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCA3dGhcblxuICAgICAgY2FzZSAnZW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihsb2NhbERheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdlZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnZWVlZSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWtcbiAgYzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChzYW1lIGFzIGluIGBlYClcbiAgICAgIGNhc2UgJ2MnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGxvY2FsRGF5T2ZXZWVrKTtcbiAgICAgIC8vIFBhZGRlZCBudW1lcmljYWwgdmFsdWVcblxuICAgICAgY2FzZSAnY2MnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGxvY2FsRGF5T2ZXZWVrLCB0b2tlbi5sZW5ndGgpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG5cbiAgICAgIGNhc2UgJ2NvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnY2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2NjY2MnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIElTTyBkYXkgb2Ygd2Vla1xuICBpOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGlzb0RheU9mV2VlayA9IGRheU9mV2VlayA9PT0gMCA/IDcgOiBkYXlPZldlZWs7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAyXG4gICAgICBjYXNlICdpJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhpc29EYXlPZldlZWspO1xuICAgICAgLy8gMDJcblxuICAgICAgY2FzZSAnaWknOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb0RheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDJuZFxuXG4gICAgICBjYXNlICdpbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb0RheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlXG5cbiAgICAgIGNhc2UgJ2lpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2lpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdpaWlpJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgY2FzZSAnYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgY2FzZSAnYWFhYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEFNLCBQTSwgbWlkbmlnaHQsIG5vb25cbiAgYjogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgaWYgKGhvdXJzID09PSAxMikge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5ub29uO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPT09IDApIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubWlkbmlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGhvdXJzIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2InOlxuICAgICAgY2FzZSAnYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgY2FzZSAnYmJiYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2JiYmInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIGluIHRoZSBtb3JuaW5nLCBpbiB0aGUgYWZ0ZXJub29uLCBpbiB0aGUgZXZlbmluZywgYXQgbmlnaHRcbiAgQjogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgaWYgKGhvdXJzID49IDE3KSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLmV2ZW5pbmc7XG4gICAgfSBlbHNlIGlmIChob3VycyA+PSAxMikge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5hZnRlcm5vb247XG4gICAgfSBlbHNlIGlmIChob3VycyA+PSA0KSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1vcm5pbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubmlnaHQ7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnQic6XG4gICAgICBjYXNlICdCQic6XG4gICAgICBjYXNlICdCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnQkJCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ0JCQkInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdobycpIHtcbiAgICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyO1xuICAgICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDEyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLmgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnSG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ0hvdXJzKCksIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLkgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBIb3VyIFswLTExXVxuICBLOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpICUgMTI7XG5cbiAgICBpZiAodG9rZW4gPT09ICdLbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSG91ciBbMS0yNF1cbiAgazogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMjQ7XG5cbiAgICBpZiAodG9rZW4gPT09ICdrbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWludXRlXG4gIG06IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdtbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDTWludXRlcygpLCB7XG4gICAgICAgIHVuaXQ6ICdtaW51dGUnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLm0oZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBTZWNvbmRcbiAgczogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ3NvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHtcbiAgICAgICAgdW5pdDogJ3NlY29uZCdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMucyhkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLlMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuIElmIG9mZnNldCBpcyAwLCBvdXRwdXQgaXMgYWx3YXlzIGAnWidgKVxuICBYOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIGlmICh0aW1lem9uZU9mZnNldCA9PT0gMCkge1xuICAgICAgcmV0dXJuICdaJztcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBIb3VycyBhbmQgb3B0aW9uYWwgbWludXRlc1xuICAgICAgY2FzZSAnWCc6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXModGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgWFhgXG5cbiAgICAgIGNhc2UgJ1hYWFgnOlxuICAgICAgY2FzZSAnWFgnOlxuICAgICAgICAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYWGBcblxuICAgICAgY2FzZSAnWFhYWFgnOlxuICAgICAgY2FzZSAnWFhYJzogLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aCBgOmAgZGVsaW1pdGVyXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChJU08tODYwMS4gSWYgb2Zmc2V0IGlzIDAsIG91dHB1dCBpcyBgJyswMDowMCdgIG9yIGVxdWl2YWxlbnQpXG4gIHg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ3gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4YFxuXG4gICAgICBjYXNlICd4eHh4JzpcbiAgICAgIGNhc2UgJ3h4JzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eHhgXG5cbiAgICAgIGNhc2UgJ3h4eHh4JzpcbiAgICAgIGNhc2UgJ3h4eCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoR01UKVxuICBPOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFNob3J0XG4gICAgICBjYXNlICdPJzpcbiAgICAgIGNhc2UgJ09PJzpcbiAgICAgIGNhc2UgJ09PTyc6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lU2hvcnQodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgICAvLyBMb25nXG5cbiAgICAgIGNhc2UgJ09PT08nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0aW9uKVxuICB6OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFNob3J0XG4gICAgICBjYXNlICd6JzpcbiAgICAgIGNhc2UgJ3p6JzpcbiAgICAgIGNhc2UgJ3p6eic6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lU2hvcnQodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgICAvLyBMb25nXG5cbiAgICAgIGNhc2UgJ3p6enonOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBTZWNvbmRzIHRpbWVzdGFtcFxuICB0OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXN0YW1wID0gTWF0aC5mbG9vcihvcmlnaW5hbERhdGUuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAgVDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWVzdGFtcCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lKCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lU2hvcnQob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKTtcbiAgdmFyIG1pbnV0ZXMgPSBhYnNPZmZzZXQgJSA2MDtcblxuICBpZiAobWludXRlcyA9PT0gMCkge1xuICAgIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKTtcbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBkaXJ0eURlbGltaXRlciB8fCAnJztcbiAgcmV0dXJuIHNpZ24gKyBTdHJpbmcoaG91cnMpICsgZGVsaW1pdGVyICsgYWRkTGVhZGluZ1plcm9zKG1pbnV0ZXMsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXMob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICBpZiAob2Zmc2V0ICUgNjAgPT09IDApIHtcbiAgICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gICAgcmV0dXJuIHNpZ24gKyBhZGRMZWFkaW5nWmVyb3MoTWF0aC5hYnMob2Zmc2V0KSAvIDYwLCAyKTtcbiAgfVxuXG4gIHJldHVybiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgdmFyIGFic09mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gIHZhciBob3VycyA9IGFkZExlYWRpbmdaZXJvcyhNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKSwgMik7XG4gIHZhciBtaW51dGVzID0gYWRkTGVhZGluZ1plcm9zKGFic09mZnNldCAlIDYwLCAyKTtcbiAgcmV0dXJuIHNpZ24gKyBob3VycyArIGRlbGltaXRlciArIG1pbnV0ZXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwiZnVuY3Rpb24gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ1BQUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRpbWVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSAncCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncHAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdwcHAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncHBwcCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkYXRlVGltZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICB2YXIgbWF0Y2hSZXN1bHQgPSBwYXR0ZXJuLm1hdGNoKC8oUCspKHArKT8vKSB8fCBbXTtcbiAgdmFyIGRhdGVQYXR0ZXJuID0gbWF0Y2hSZXN1bHRbMV07XG4gIHZhciB0aW1lUGF0dGVybiA9IG1hdGNoUmVzdWx0WzJdO1xuXG4gIGlmICghdGltZVBhdHRlcm4pIHtcbiAgICByZXR1cm4gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZyk7XG4gIH1cblxuICB2YXIgZGF0ZVRpbWVGb3JtYXQ7XG5cbiAgc3dpdGNoIChkYXRlUGF0dGVybikge1xuICAgIGNhc2UgJ1AnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ1BQUFAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIGRhdGVUaW1lRm9ybWF0LnJlcGxhY2UoJ3t7ZGF0ZX19JywgZGF0ZUxvbmdGb3JtYXR0ZXIoZGF0ZVBhdHRlcm4sIGZvcm1hdExvbmcpKS5yZXBsYWNlKCd7e3RpbWV9fScsIHRpbWVMb25nRm9ybWF0dGVyKHRpbWVQYXR0ZXJuLCBmb3JtYXRMb25nKSk7XG59XG5cbnZhciBsb25nRm9ybWF0dGVycyA9IHtcbiAgcDogdGltZUxvbmdGb3JtYXR0ZXIsXG4gIFA6IGRhdGVUaW1lTG9uZ0Zvcm1hdHRlclxufTtcbmV4cG9ydCBkZWZhdWx0IGxvbmdGb3JtYXR0ZXJzOyIsIi8qKlxuICogR29vZ2xlIENocm9tZSBhcyBvZiA2Ny4wLjMzOTYuODcgaW50cm9kdWNlZCB0aW1lem9uZXMgd2l0aCBvZmZzZXQgdGhhdCBpbmNsdWRlcyBzZWNvbmRzLlxuICogVGhleSB1c3VhbGx5IGFwcGVhciBmb3IgZGF0ZXMgdGhhdCBkZW5vdGUgdGltZSBiZWZvcmUgdGhlIHRpbWV6b25lcyB3ZXJlIGludHJvZHVjZWRcbiAqIChlLmcuIGZvciAnRXVyb3BlL1ByYWd1ZScgdGltZXpvbmUgdGhlIG9mZnNldCBpcyBHTVQrMDA6NTc6NDQgYmVmb3JlIDEgT2N0b2JlciAxODkxXG4gKiBhbmQgR01UKzAxOjAwOjAwIGFmdGVyIHRoYXQgZGF0ZSlcbiAqXG4gKiBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgdGhlIG9mZnNldCBpbiBtaW51dGVzIGFuZCB3b3VsZCByZXR1cm4gNTcgZm9yIHRoZSBleGFtcGxlIGFib3ZlLFxuICogd2hpY2ggd291bGQgbGVhZCB0byBpbmNvcnJlY3QgY2FsY3VsYXRpb25zLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgdGltZXpvbmUgb2Zmc2V0IGluIG1pbGxpc2Vjb25kcyB0aGF0IHRha2VzIHNlY29uZHMgaW4gYWNjb3VudC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhkYXRlKSB7XG4gIHZhciB1dGNEYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpLCBkYXRlLmdldEhvdXJzKCksIGRhdGUuZ2V0TWludXRlcygpLCBkYXRlLmdldFNlY29uZHMoKSwgZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSkpO1xuICB1dGNEYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSk7XG4gIHJldHVybiBkYXRlLmdldFRpbWUoKSAtIHV0Y0RhdGUuZ2V0VGltZSgpO1xufSIsInZhciBwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMgPSBbJ0QnLCAnREQnXTtcbnZhciBwcm90ZWN0ZWRXZWVrWWVhclRva2VucyA9IFsnWVknLCAnWVlZWSddO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4odG9rZW4pIHtcbiAgcmV0dXJuIHByb3RlY3RlZERheU9mWWVhclRva2Vucy5pbmRleE9mKHRva2VuKSAhPT0gLTE7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHRva2VuKSB7XG4gIHJldHVybiBwcm90ZWN0ZWRXZWVrWWVhclRva2Vucy5pbmRleE9mKHRva2VuKSAhPT0gLTE7XG59XG5leHBvcnQgZnVuY3Rpb24gdGhyb3dQcm90ZWN0ZWRFcnJvcih0b2tlbiwgZm9ybWF0LCBpbnB1dCkge1xuICBpZiAodG9rZW4gPT09ICdZWVlZJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGB5eXl5YCBpbnN0ZWFkIG9mIGBZWVlZYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0QnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRgIGluc3RlYWQgb2YgYERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clwiKSk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09ICdERCcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgZGRgIGluc3RlYWQgb2YgYEREYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcIikpO1xuICB9XG59IiwiaW1wb3J0IGlzVmFsaWQgZnJvbSBcIi4uL2lzVmFsaWQvaW5kZXguanNcIjtcbmltcG9ydCBkZWZhdWx0TG9jYWxlIGZyb20gXCIuLi9sb2NhbGUvZW4tVVMvaW5kZXguanNcIjtcbmltcG9ydCBzdWJNaWxsaXNlY29uZHMgZnJvbSBcIi4uL3N1Yk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0dGVycyBmcm9tIFwiLi4vX2xpYi9mb3JtYXQvZm9ybWF0dGVycy9pbmRleC5qc1wiO1xuaW1wb3J0IGxvbmdGb3JtYXR0ZXJzIGZyb20gXCIuLi9fbGliL2Zvcm1hdC9sb25nRm9ybWF0dGVycy9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMgZnJvbSBcIi4uL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbiwgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuLCB0aHJvd1Byb3RlY3RlZEVycm9yIH0gZnJvbSBcIi4uL19saWIvcHJvdGVjdGVkVG9rZW5zL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjsgLy8gVGhpcyBSZWdFeHAgY29uc2lzdHMgb2YgdGhyZWUgcGFydHMgc2VwYXJhdGVkIGJ5IGB8YDpcbi8vIC0gW3lZUXFNTHdJZERlY2loSEtrbXNdbyBtYXRjaGVzIGFueSBhdmFpbGFibGUgb3JkaW5hbCBudW1iZXIgdG9rZW5cbi8vICAgKG9uZSBvZiB0aGUgY2VydGFpbiBsZXR0ZXJzIGZvbGxvd2VkIGJ5IGBvYClcbi8vIC0gKFxcdylcXDEqIG1hdGNoZXMgYW55IHNlcXVlbmNlcyBvZiB0aGUgc2FtZSBsZXR0ZXJcbi8vIC0gJycgbWF0Y2hlcyB0d28gcXVvdGUgY2hhcmFjdGVycyBpbiBhIHJvd1xuLy8gLSAnKCcnfFteJ10pKygnfCQpIG1hdGNoZXMgYW55dGhpbmcgc3Vycm91bmRlZCBieSB0d28gcXVvdGUgY2hhcmFjdGVycyAoJyksXG4vLyAgIGV4Y2VwdCBhIHNpbmdsZSBxdW90ZSBzeW1ib2wsIHdoaWNoIGVuZHMgdGhlIHNlcXVlbmNlLlxuLy8gICBUd28gcXVvdGUgY2hhcmFjdGVycyBkbyBub3QgZW5kIHRoZSBzZXF1ZW5jZS5cbi8vICAgSWYgdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc2luZ2xlIHF1b3RlXG4vLyAgIHRoZW4gdGhlIHNlcXVlbmNlIHdpbGwgY29udGludWUgdW50aWwgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLlxuLy8gLSAuIG1hdGNoZXMgYW55IHNpbmdsZSBjaGFyYWN0ZXIgdW5tYXRjaGVkIGJ5IHByZXZpb3VzIHBhcnRzIG9mIHRoZSBSZWdFeHBzXG5cbnZhciBmb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1t5WVFxTUx3SWREZWNpaEhLa21zXW98KFxcdylcXDEqfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nOyAvLyBUaGlzIFJlZ0V4cCBjYXRjaGVzIHN5bWJvbHMgZXNjYXBlZCBieSBxdW90ZXMsIGFuZCBhbHNvXG4vLyBzZXF1ZW5jZXMgb2Ygc3ltYm9scyBQLCBwLCBhbmQgdGhlIGNvbWJpbmF0aW9ucyBsaWtlIGBQUFBQUFBQcHBwcHBgXG5cbnZhciBsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IC9QK3ArfFArfHArfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nO1xudmFyIGVzY2FwZWRTdHJpbmdSZWdFeHAgPSAvXicoW15dKj8pJz8kLztcbnZhciBkb3VibGVRdW90ZVJlZ0V4cCA9IC8nJy9nO1xudmFyIHVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwID0gL1thLXpBLVpdLztcbi8qKlxuICogQG5hbWUgZm9ybWF0XG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEZvcm1hdCB0aGUgZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nIGluIHRoZSBnaXZlbiBmb3JtYXQuIFRoZSByZXN1bHQgbWF5IHZhcnkgYnkgbG9jYWxlLlxuICpcbiAqID4g4pqg77iPIFBsZWFzZSBub3RlIHRoYXQgdGhlIGBmb3JtYXRgIHRva2VucyBkaWZmZXIgZnJvbSBNb21lbnQuanMgYW5kIG90aGVyIGxpYnJhcmllcy5cbiAqID4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqIFRoZSBjaGFyYWN0ZXJzIHdyYXBwZWQgYmV0d2VlbiB0d28gc2luZ2xlIHF1b3RlcyBjaGFyYWN0ZXJzICgnKSBhcmUgZXNjYXBlZC5cbiAqIFR3byBzaW5nbGUgcXVvdGVzIGluIGEgcm93LCB3aGV0aGVyIGluc2lkZSBvciBvdXRzaWRlIGEgcXVvdGVkIHNlcXVlbmNlLCByZXByZXNlbnQgYSAncmVhbCcgc2luZ2xlIHF1b3RlLlxuICogKHNlZSB0aGUgbGFzdCBleGFtcGxlKVxuICpcbiAqIEZvcm1hdCBvZiB0aGUgc3RyaW5nIGlzIGJhc2VkIG9uIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9GaWVsZF9TeW1ib2xfVGFibGVcbiAqIHdpdGggYSBmZXcgYWRkaXRpb25zIChzZWUgbm90ZSA3IGJlbG93IHRoZSB0YWJsZSkuXG4gKlxuICogQWNjZXB0ZWQgcGF0dGVybnM6XG4gKiB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQYXR0ZXJuIHwgUmVzdWx0IGV4YW1wbGVzICAgICAgICAgICAgICAgICAgIHwgTm90ZXMgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLXxcbiAqIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEcuLkdHRyAgfCBBRCwgQkMgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHR0dHICAgIHwgQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3QgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHR0cgICB8IEEsIEIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQ2FsZW5kYXIgeWVhciAgICAgICAgICAgICAgICAgICB8IHkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5byAgICAgIHwgNDR0aCwgMXN0LCAwdGgsIDE3dGggICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXl5ICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eXkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICB8IFkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZbyAgICAgIHwgNDR0aCwgMXN0LCAxOTAwdGgsIDIwMTd0aCAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVlZICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWVkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgICB8IFIgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUiAgICAgIHwgLTQzLCAwMCwgMDEsIDE5MDAsIDIwMTcgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSICAgICB8IC0wNDMsIDAwMCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUlIgICAgfCAtMDA0MywgMDAwMCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSUiAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1LDcgfFxuICogfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgIHwgdSAgICAgICB8IC00MywgMCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1ICAgICAgfCAtNDMsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXUgICAgIHwgLTA0MywgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1dSAgICB8IC0wMDQzLCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXV1ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IFF1YXJ0ZXIgKGZvcm1hdHRpbmcpICAgICAgICAgICAgfCBRICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRUSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVFRICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IFF1YXJ0ZXIgKHN0YW5kLWFsb25lKSAgICAgICAgICAgfCBxICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxcSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXFxICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IE1vbnRoIChmb3JtYXR0aW5nKSAgICAgICAgICAgICAgfCBNICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU0gICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTSAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU1NICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1vbnRoIChzdGFuZC1hbG9uZSkgICAgICAgICAgICAgfCBMICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTEwgICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMTCAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTExMICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgfCB3ICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgd28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHd3ICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICAgfCBJICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElJICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICAgfCBkICAgICAgIHwgMSwgMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDMxc3QgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRkICAgICAgfCAwMSwgMDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICAgfCBEICAgICAgIHwgMSwgMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDM2NXRoLCAzNjZ0aCAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREICAgICAgfCAwMSwgMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgfCA5ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEREQgICAgIHwgMDAxLCAwMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRERERCAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMgICAgIHxcbiAqIHwgRGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgICAgICB8IEUuLkVFRSAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRUUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFRSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgfCBpICAgICAgIHwgMSwgMiwgMywgLi4uLCA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDd0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpICAgICAgfCAwMSwgMDIsIC4uLiwgMDcgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWkgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWlpICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaWkgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgNyAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgIHwgZSAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZSAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlZSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWVlICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKHN0YW5kLWFsb25lKSB8IGMgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2MgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjYyAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjY2MgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjYyAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhLi5hYSAgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhICAgICB8IGFtLCBwbSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYWEgICAgfCBhLm0uLCBwLm0uICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhYSAgIHwgYSwgcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgIHwgYi4uYmIgICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYiAgICAgfCBhbSwgcG0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmJiICAgIHwgYS5tLiwgcC5tLiwgbm9vbiwgbWlkbmlnaHQgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYmIgICB8IGEsIHAsIG4sIG1pICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgICB8IEIuLkJCQiAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBCQkJCICAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQkIgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgICB8IGggICAgICAgfCAxLCAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBobyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMTJ0aCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaGggICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgICB8IEggICAgICAgfCAwLCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBIbyAgICAgIHwgMHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSEggICAgICB8IDAwLCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgICB8IEsgICAgICAgfCAxLCAyLCAuLi4sIDExLCAwICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBLbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMHRoICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS0sgICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgICB8IGsgICAgICAgfCAyNCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBrbyAgICAgIHwgMjR0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga2sgICAgICB8IDI0LCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgICB8IG0gICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW0gICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgICB8IHMgICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc3MgICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgICB8IFMgICAgICAgfCAwLCAxLCAuLi4sIDkgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTUyAgICAgIHwgMDAsIDAxLCAuLi4sIDk5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1NTICAgICB8IDAwMCwgMDAxLCAuLi4sIDk5OSAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTU1MgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3LyBaKSAgICAgICAgfCBYICAgICAgIHwgLTA4LCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFggICAgICB8IC0wODAwLCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWCAgICAgfCAtMDg6MDAsICswNTozMCwgWiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFhYICAgIHwgLTA4MDAsICswNTMwLCBaLCArMTIzNDU2ICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWFggICB8IC0wODowMCwgKzA1OjMwLCBaLCArMTI6MzQ6NTYgICAgICB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgICB8IHggICAgICAgfCAtMDgsICswNTMwLCArMDAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eCAgICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4ICAgICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eHggICAgfCAtMDgwMCwgKzA1MzAsICswMDAwLCArMTIzNDU2ICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4eCAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCwgKzEyOjM0OjU2IHwgICAgICAgfFxuICogfCBUaW1lem9uZSAoR01UKSAgICAgICAgICAgICAgICAgIHwgTy4uLk9PTyB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE9PT08gICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyICAgICB8XG4gKiB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSAgfCB6Li4uenp6IHwgR01ULTgsIEdNVCs1OjMwLCBHTVQrMCAgICAgICAgICAgIHwgNiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgenp6eiAgICB8IEdNVC0wODowMCwgR01UKzA1OjMwLCBHTVQrMDA6MDAgICB8IDIsNiAgIHxcbiAqIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgICB8IHQgICAgICAgfCA1MTI5Njk1MjAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB0dCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgIHwgVCAgICAgICB8IDUxMjk2OTUyMDkwMCAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFRUICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDcgICB8XG4gKiB8IExvbmcgbG9jYWxpemVkIGRhdGUgICAgICAgICAgICAgfCBQICAgICAgIHwgMDQvMjkvMTQ1MyAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFAgICAgICB8IEFwciAyOSwgMTQ1MyAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUCAgICAgfCBBcHJpbCAyOXRoLCAxNDUzICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQICAgIHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzICAgICAgICAgIHwgMiw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgIHwgcCAgICAgICB8IDEyOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwICAgICAgfCAxMjowMDowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcHAgICAgIHwgMTI6MDA6MDAgQU0gR01UKzIgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwcCAgICB8IDEyOjAwOjAwIEFNIEdNVCswMjowMCAgICAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgQ29tYmluYXRpb24gb2YgZGF0ZSBhbmQgdGltZSAgICB8IFBwICAgICAgfCAwNC8yOS8xNDUzLCAxMjowMCBBTSAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUHBwICAgIHwgQXByIDI5LCAxNDUzLCAxMjowMDowMCBBTSAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQcHBwICB8IEFwcmlsIDI5dGgsIDE0NTMgYXQgLi4uICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUFBwcHBwfCBGcmlkYXksIEFwcmlsIDI5dGgsIDE0NTMgYXQgLi4uICAgfCAyLDcgICB8XG4gKiBOb3RlczpcbiAqIDEuIFwiRm9ybWF0dGluZ1wiIHVuaXRzIChlLmcuIGZvcm1hdHRpbmcgcXVhcnRlcikgaW4gdGhlIGRlZmF1bHQgZW4tVVMgbG9jYWxlXG4gKiAgICBhcmUgdGhlIHNhbWUgYXMgXCJzdGFuZC1hbG9uZVwiIHVuaXRzLCBidXQgYXJlIGRpZmZlcmVudCBpbiBzb21lIGxhbmd1YWdlcy5cbiAqICAgIFwiRm9ybWF0dGluZ1wiIHVuaXRzIGFyZSBkZWNsaW5lZCBhY2NvcmRpbmcgdG8gdGhlIHJ1bGVzIG9mIHRoZSBsYW5ndWFnZVxuICogICAgaW4gdGhlIGNvbnRleHQgb2YgYSBkYXRlLiBcIlN0YW5kLWFsb25lXCIgdW5pdHMgYXJlIGFsd2F5cyBub21pbmF0aXZlIHNpbmd1bGFyOlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTExMTCcsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWQnYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTU1NTScsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWR1J2BcbiAqXG4gKiAyLiBBbnkgc2VxdWVuY2Ugb2YgdGhlIGlkZW50aWNhbCBsZXR0ZXJzIGlzIGEgcGF0dGVybiwgdW5sZXNzIGl0IGlzIGVzY2FwZWQgYnlcbiAqICAgIHRoZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyAoc2VlIGJlbG93KS5cbiAqICAgIElmIHRoZSBzZXF1ZW5jZSBpcyBsb25nZXIgdGhhbiBsaXN0ZWQgaW4gdGFibGUgKGUuZy4gYEVFRUVFRUVFRUVFYClcbiAqICAgIHRoZSBvdXRwdXQgd2lsbCBiZSB0aGUgc2FtZSBhcyBkZWZhdWx0IHBhdHRlcm4gZm9yIHRoaXMgdW5pdCwgdXN1YWxseVxuICogICAgdGhlIGxvbmdlc3Qgb25lIChpbiBjYXNlIG9mIElTTyB3ZWVrZGF5cywgYEVFRUVgKS4gRGVmYXVsdCBwYXR0ZXJucyBmb3IgdW5pdHNcbiAqICAgIGFyZSBtYXJrZWQgd2l0aCBcIjJcIiBpbiB0aGUgbGFzdCBjb2x1bW4gb2YgdGhlIHRhYmxlLlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NJykgLy89PiAnTm92J2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTScpIC8vPT4gJ04nYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAzLiBTb21lIHBhdHRlcm5zIGNvdWxkIGJlIHVubGltaXRlZCBsZW5ndGggKHN1Y2ggYXMgYHl5eXl5eXl5YCkuXG4gKiAgICBUaGUgb3V0cHV0IHdpbGwgYmUgcGFkZGVkIHdpdGggemVyb3MgdG8gbWF0Y2ggdGhlIGxlbmd0aCBvZiB0aGUgcGF0dGVybi5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ3l5eXl5eXl5JykgLy89PiAnMDAwMDIwMTcnYFxuICpcbiAqIDQuIGBRUVFRUWAgYW5kIGBxcXFxcWAgY291bGQgYmUgbm90IHN0cmljdGx5IG51bWVyaWNhbCBpbiBzb21lIGxvY2FsZXMuXG4gKiAgICBUaGVzZSB0b2tlbnMgcmVwcmVzZW50IHRoZSBzaG9ydGVzdCBmb3JtIG9mIHRoZSBxdWFydGVyLlxuICpcbiAqIDUuIFRoZSBtYWluIGRpZmZlcmVuY2UgYmV0d2VlbiBgeWAgYW5kIGB1YCBwYXR0ZXJucyBhcmUgQi5DLiB5ZWFyczpcbiAqXG4gKiAgICB8IFllYXIgfCBgeWAgfCBgdWAgfFxuICogICAgfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAqICAgIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gKiAgICB8IEJDIDEgfCAgIDEgfCAgIDAgfFxuICogICAgfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAqXG4gKiAgICBBbHNvIGB5eWAgYWx3YXlzIHJldHVybnMgdGhlIGxhc3QgdHdvIGRpZ2l0cyBvZiBhIHllYXIsXG4gKiAgICB3aGlsZSBgdXVgIHBhZHMgc2luZ2xlIGRpZ2l0IHllYXJzIHRvIDIgY2hhcmFjdGVycyBhbmQgcmV0dXJucyBvdGhlciB5ZWFycyB1bmNoYW5nZWQ6XG4gKlxuICogICAgfCBZZWFyIHwgYHl5YCB8IGB1dWAgfFxuICogICAgfC0tLS0tLXwtLS0tLS18LS0tLS0tfFxuICogICAgfCAxICAgIHwgICAwMSB8ICAgMDEgfFxuICogICAgfCAxNCAgIHwgICAxNCB8ICAgMTQgfFxuICogICAgfCAzNzYgIHwgICA3NiB8ICAzNzYgfFxuICogICAgfCAxNDUzIHwgICA1MyB8IDE0NTMgfFxuICpcbiAqICAgIFRoZSBzYW1lIGRpZmZlcmVuY2UgaXMgdHJ1ZSBmb3IgbG9jYWwgYW5kIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFycyAoYFlgIGFuZCBgUmApLFxuICogICAgZXhjZXB0IGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJzIGFyZSBkZXBlbmRlbnQgb24gYG9wdGlvbnMud2Vla1N0YXJ0c09uYFxuICogICAgYW5kIGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgKGNvbXBhcmUgW2dldElTT1dlZWtZZWFyXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL2dldElTT1dlZWtZZWFyfVxuICogICAgYW5kIFtnZXRXZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRXZWVrWWVhcn0pLlxuICpcbiAqIDYuIFNwZWNpZmljIG5vbi1sb2NhdGlvbiB0aW1lem9uZXMgYXJlIGN1cnJlbnRseSB1bmF2YWlsYWJsZSBpbiBgZGF0ZS1mbnNgLFxuICogICAgc28gcmlnaHQgbm93IHRoZXNlIHRva2VucyBmYWxsIGJhY2sgdG8gR01UIHRpbWV6b25lcy5cbiAqXG4gKiA3LiBUaGVzZSBwYXR0ZXJucyBhcmUgbm90IGluIHRoZSBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiAgICAtIGBpYDogSVNPIGRheSBvZiB3ZWVrXG4gKiAgICAtIGBJYDogSVNPIHdlZWsgb2YgeWVhclxuICogICAgLSBgUmA6IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gKiAgICAtIGB0YDogc2Vjb25kcyB0aW1lc3RhbXBcbiAqICAgIC0gYFRgOiBtaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBvYDogb3JkaW5hbCBudW1iZXIgbW9kaWZpZXJcbiAqICAgIC0gYFBgOiBsb25nIGxvY2FsaXplZCBkYXRlXG4gKiAgICAtIGBwYDogbG9uZyBsb2NhbGl6ZWQgdGltZVxuICpcbiAqIDguIGBZWWAgYW5kIGBZWVlZYCB0b2tlbnMgcmVwcmVzZW50IHdlZWstbnVtYmVyaW5nIHllYXJzIGJ1dCB0aGV5IGFyZSBvZnRlbiBjb25mdXNlZCB3aXRoIHllYXJzLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqIDkuIGBEYCBhbmQgYEREYCB0b2tlbnMgcmVwcmVzZW50IGRheXMgb2YgdGhlIHllYXIgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggZGF5cyBvZiB0aGUgbW9udGguXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogLSBUaGUgc2Vjb25kIGFyZ3VtZW50IGlzIG5vdyByZXF1aXJlZCBmb3IgdGhlIHNha2Ugb2YgZXhwbGljaXRuZXNzLlxuICpcbiAqICAgYGBgamF2YXNjcmlwdFxuICogICAvLyBCZWZvcmUgdjIuMC4wXG4gKiAgIGZvcm1hdChuZXcgRGF0ZSgyMDE2LCAwLCAxKSlcbiAqXG4gKiAgIC8vIHYyLjAuMCBvbndhcmRcbiAqICAgZm9ybWF0KG5ldyBEYXRlKDIwMTYsIDAsIDEpLCBcInl5eXktTU0tZGQnVCdISDptbTpzcy5TU1N4eHhcIilcbiAqICAgYGBgXG4gKlxuICogLSBOZXcgZm9ybWF0IHN0cmluZyBBUEkgZm9yIGBmb3JtYXRgIGZ1bmN0aW9uXG4gKiAgIHdoaWNoIGlzIGJhc2VkIG9uIFtVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzVdKGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9GaWVsZF9TeW1ib2xfVGFibGUpLlxuICogICBTZWUgW3RoaXMgcG9zdF0oaHR0cHM6Ly9ibG9nLmRhdGUtZm5zLm9yZy9wb3N0L3VuaWNvZGUtdG9rZW5zLWluLWRhdGUtZm5zLXYyLXNyZWF0eWtpOTFqZykgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiAtIENoYXJhY3RlcnMgYXJlIG5vdyBlc2NhcGVkIHVzaW5nIHNpbmdsZSBxdW90ZSBzeW1ib2xzIChgJ2ApIGluc3RlYWQgb2Ygc3F1YXJlIGJyYWNrZXRzLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHBhcmFtIHtTdHJpbmd9IGZvcm1hdCAtIHRoZSBzdHJpbmcgb2YgdG9rZW5zXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHBhcmFtIHswfDF8MnwzfDR8NXw2fSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU9MV0gLSB0aGUgZGF5IG9mIEphbnVhcnksIHdoaWNoIGlzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIHdlZWstbnVtYmVyaW5nIHllYXIgdG9rZW5zIGBZWWAgYW5kIGBZWVlZYDtcbiAqICAgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgZGF5IG9mIHllYXIgdG9rZW5zIGBEYCBhbmQgYEREYDtcbiAqICAgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHJldHVybnMge1N0cmluZ30gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZ1xuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYGRhdGVgIG11c3Qgbm90IGJlIEludmFsaWQgRGF0ZVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGxvY2FsaXplYCBwcm9wZXJ0eVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGZvcm1hdExvbmdgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy53ZWVrU3RhcnRzT25gIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGRgIGluc3RlYWQgb2YgYEREYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gZm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAxMSBGZWJydWFyeSAyMDE0IGluIG1pZGRsZS1lbmRpYW4gZm9ybWF0OlxuICogdmFyIHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCAxLCAxMSksICdNTS9kZC95eXl5JylcbiAqIC8vPT4gJzAyLzExLzIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAyIEp1bHkgMjAxNCBpbiBFc3BlcmFudG86XG4gKiBpbXBvcnQgeyBlb0xvY2FsZSB9IGZyb20gJ2RhdGUtZm5zL2xvY2FsZS9lbydcbiAqIHZhciByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiksIFwiZG8gJ2RlJyBNTU1NIHl5eXlcIiwge1xuICogICBsb2NhbGU6IGVvTG9jYWxlXG4gKiB9KVxuICogLy89PiAnMi1hIGRlIGp1bGlvIDIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEVzY2FwZSBzdHJpbmcgYnkgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnM6XG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDYsIDIsIDE1KSwgXCJoICdvJydjbG9jaydcIilcbiAqIC8vPT4gXCIzIG8nY2xvY2tcIlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdChkaXJ0eURhdGUsIGRpcnR5Rm9ybWF0U3RyLCBkaXJ0eU9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBmb3JtYXRTdHIgPSBTdHJpbmcoZGlydHlGb3JtYXRTdHIpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlIHx8IGRlZmF1bHRMb2NhbGU7XG4gIHZhciBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU7XG4gIHZhciBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyAxIDogdG9JbnRlZ2VyKGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA6IHRvSW50ZWdlcihvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEoZmlyc3RXZWVrQ29udGFpbnNEYXRlID49IDEgJiYgZmlyc3RXZWVrQ29udGFpbnNEYXRlIDw9IDcpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2ZpcnN0V2Vla0NvbnRhaW5zRGF0ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNyBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGxvY2FsZVdlZWtTdGFydHNPbiA9IGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLndlZWtTdGFydHNPbjtcbiAgdmFyIGRlZmF1bHRXZWVrU3RhcnRzT24gPSBsb2NhbGVXZWVrU3RhcnRzT24gPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIobG9jYWxlV2Vla1N0YXJ0c09uKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IG9wdGlvbnMud2Vla1N0YXJ0c09uID09IG51bGwgPyBkZWZhdWx0V2Vla1N0YXJ0c09uIDogdG9JbnRlZ2VyKG9wdGlvbnMud2Vla1N0YXJ0c09uKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICBpZiAoIWxvY2FsZS5sb2NhbGl6ZSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGxvY2FsaXplIHByb3BlcnR5Jyk7XG4gIH1cblxuICBpZiAoIWxvY2FsZS5mb3JtYXRMb25nKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gZm9ybWF0TG9uZyBwcm9wZXJ0eScpO1xuICB9XG5cbiAgdmFyIG9yaWdpbmFsRGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuXG4gIGlmICghaXNWYWxpZChvcmlnaW5hbERhdGUpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB9IC8vIENvbnZlcnQgdGhlIGRhdGUgaW4gc3lzdGVtIHRpbWV6b25lIHRvIHRoZSBzYW1lIGRhdGUgaW4gVVRDKzAwOjAwIHRpbWV6b25lLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdCB3aGVuIFVUQyBmdW5jdGlvbnMgd2lsbCBiZSBpbXBsZW1lbnRlZCwgbG9jYWxlcyB3aWxsIGJlIGNvbXBhdGlibGUgd2l0aCB0aGVtLlxuICAvLyBTZWUgYW4gaXNzdWUgYWJvdXQgVVRDIGZ1bmN0aW9uczogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuXG4gIHZhciB0aW1lem9uZU9mZnNldCA9IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMob3JpZ2luYWxEYXRlKTtcbiAgdmFyIHV0Y0RhdGUgPSBzdWJNaWxsaXNlY29uZHMob3JpZ2luYWxEYXRlLCB0aW1lem9uZU9mZnNldCk7XG4gIHZhciBmb3JtYXR0ZXJPcHRpb25zID0ge1xuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogZmlyc3RXZWVrQ29udGFpbnNEYXRlLFxuICAgIHdlZWtTdGFydHNPbjogd2Vla1N0YXJ0c09uLFxuICAgIGxvY2FsZTogbG9jYWxlLFxuICAgIF9vcmlnaW5hbERhdGU6IG9yaWdpbmFsRGF0ZVxuICB9O1xuICB2YXIgcmVzdWx0ID0gZm9ybWF0U3RyLm1hdGNoKGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwKS5tYXAoZnVuY3Rpb24gKHN1YnN0cmluZykge1xuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcblxuICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gJ3AnIHx8IGZpcnN0Q2hhcmFjdGVyID09PSAnUCcpIHtcbiAgICAgIHZhciBsb25nRm9ybWF0dGVyID0gbG9uZ0Zvcm1hdHRlcnNbZmlyc3RDaGFyYWN0ZXJdO1xuICAgICAgcmV0dXJuIGxvbmdGb3JtYXR0ZXIoc3Vic3RyaW5nLCBsb2NhbGUuZm9ybWF0TG9uZywgZm9ybWF0dGVyT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1YnN0cmluZztcbiAgfSkuam9pbignJykubWF0Y2goZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkubWFwKGZ1bmN0aW9uIChzdWJzdHJpbmcpIHtcbiAgICAvLyBSZXBsYWNlIHR3byBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyB3aXRoIG9uZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyXG4gICAgaWYgKHN1YnN0cmluZyA9PT0gXCInJ1wiKSB7XG4gICAgICByZXR1cm4gXCInXCI7XG4gICAgfVxuXG4gICAgdmFyIGZpcnN0Q2hhcmFjdGVyID0gc3Vic3RyaW5nWzBdO1xuXG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyID09PSBcIidcIikge1xuICAgICAgcmV0dXJuIGNsZWFuRXNjYXBlZFN0cmluZyhzdWJzdHJpbmcpO1xuICAgIH1cblxuICAgIHZhciBmb3JtYXR0ZXIgPSBmb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcblxuICAgIGlmIChmb3JtYXR0ZXIpIHtcbiAgICAgIGlmICghb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnMgJiYgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHN1YnN0cmluZykpIHtcbiAgICAgICAgdGhyb3dQcm90ZWN0ZWRFcnJvcihzdWJzdHJpbmcsIGRpcnR5Rm9ybWF0U3RyLCBkaXJ0eURhdGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucyAmJiBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuKHN1YnN0cmluZykpIHtcbiAgICAgICAgdGhyb3dQcm90ZWN0ZWRFcnJvcihzdWJzdHJpbmcsIGRpcnR5Rm9ybWF0U3RyLCBkaXJ0eURhdGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm9ybWF0dGVyKHV0Y0RhdGUsIHN1YnN0cmluZywgbG9jYWxlLmxvY2FsaXplLCBmb3JtYXR0ZXJPcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIubWF0Y2godW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHApKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignRm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyIGAnICsgZmlyc3RDaGFyYWN0ZXIgKyAnYCcpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBjbGVhbkVzY2FwZWRTdHJpbmcoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0Lm1hdGNoKGVzY2FwZWRTdHJpbmdSZWdFeHApWzFdLnJlcGxhY2UoZG91YmxlUXVvdGVSZWdFeHAsIFwiJ1wiKTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGNvbXBhcmVBc2NcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29tcGFyZSB0aGUgdHdvIGRhdGVzIGFuZCByZXR1cm4gLTEsIDAgb3IgMS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbXBhcmUgdGhlIHR3byBkYXRlcyBhbmQgcmV0dXJuIDEgaWYgdGhlIGZpcnN0IGRhdGUgaXMgYWZ0ZXIgdGhlIHNlY29uZCxcbiAqIC0xIGlmIHRoZSBmaXJzdCBkYXRlIGlzIGJlZm9yZSB0aGUgc2Vjb25kIG9yIDAgaWYgZGF0ZXMgYXJlIGVxdWFsLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZUxlZnQgLSB0aGUgZmlyc3QgZGF0ZSB0byBjb21wYXJlXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgc2Vjb25kIGRhdGUgdG8gY29tcGFyZVxuICogQHJldHVybnMge051bWJlcn0gdGhlIHJlc3VsdCBvZiB0aGUgY29tcGFyaXNvblxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb21wYXJlIDExIEZlYnJ1YXJ5IDE5ODcgYW5kIDEwIEp1bHkgMTk4OTpcbiAqIGNvbnN0IHJlc3VsdCA9IGNvbXBhcmVBc2MobmV3IERhdGUoMTk4NywgMSwgMTEpLCBuZXcgRGF0ZSgxOTg5LCA2LCAxMCkpXG4gKiAvLz0+IC0xXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFNvcnQgdGhlIGFycmF5IG9mIGRhdGVzOlxuICogY29uc3QgcmVzdWx0ID0gW1xuICogICBuZXcgRGF0ZSgxOTk1LCA2LCAyKSxcbiAqICAgbmV3IERhdGUoMTk4NywgMSwgMTEpLFxuICogICBuZXcgRGF0ZSgxOTg5LCA2LCAxMClcbiAqIF0uc29ydChjb21wYXJlQXNjKVxuICogLy89PiBbXG4gKiAvLyAgIFdlZCBGZWIgMTEgMTk4NyAwMDowMDowMCxcbiAqIC8vICAgTW9uIEp1bCAxMCAxOTg5IDAwOjAwOjAwLFxuICogLy8gICBTdW4gSnVsIDAyIDE5OTUgMDA6MDA6MDBcbiAqIC8vIF1cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wYXJlQXNjKGRpcnR5RGF0ZUxlZnQsIGRpcnR5RGF0ZVJpZ2h0KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZUxlZnQgPSB0b0RhdGUoZGlydHlEYXRlTGVmdCk7XG4gIHZhciBkYXRlUmlnaHQgPSB0b0RhdGUoZGlydHlEYXRlUmlnaHQpO1xuICB2YXIgZGlmZiA9IGRhdGVMZWZ0LmdldFRpbWUoKSAtIGRhdGVSaWdodC5nZXRUaW1lKCk7XG5cbiAgaWYgKGRpZmYgPCAwKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9IGVsc2UgaWYgKGRpZmYgPiAwKSB7XG4gICAgcmV0dXJuIDE7IC8vIFJldHVybiAwIGlmIGRpZmYgaXMgMDsgcmV0dXJuIE5hTiBpZiBkaWZmIGlzIE5hTlxuICB9IGVsc2Uge1xuICAgIHJldHVybiBkaWZmO1xuICB9XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBkaWZmZXJlbmNlSW5DYWxlbmRhck1vbnRoc1xuICogQGNhdGVnb3J5IE1vbnRoIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIG1vbnRocyBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcy5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIG1vbnRocyBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcy5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVMZWZ0IC0gdGhlIGxhdGVyIGRhdGVcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVSaWdodCAtIHRoZSBlYXJsaWVyIGRhdGVcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHRoZSBudW1iZXIgb2YgY2FsZW5kYXIgbW9udGhzXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEhvdyBtYW55IGNhbGVuZGFyIG1vbnRocyBhcmUgYmV0d2VlbiAzMSBKYW51YXJ5IDIwMTQgYW5kIDEgU2VwdGVtYmVyIDIwMTQ/XG4gKiB2YXIgcmVzdWx0ID0gZGlmZmVyZW5jZUluQ2FsZW5kYXJNb250aHMoXG4gKiAgIG5ldyBEYXRlKDIwMTQsIDgsIDEpLFxuICogICBuZXcgRGF0ZSgyMDE0LCAwLCAzMSlcbiAqIClcbiAqIC8vPT4gOFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzKGRpcnR5RGF0ZUxlZnQsIGRpcnR5RGF0ZVJpZ2h0KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZUxlZnQgPSB0b0RhdGUoZGlydHlEYXRlTGVmdCk7XG4gIHZhciBkYXRlUmlnaHQgPSB0b0RhdGUoZGlydHlEYXRlUmlnaHQpO1xuICB2YXIgeWVhckRpZmYgPSBkYXRlTGVmdC5nZXRGdWxsWWVhcigpIC0gZGF0ZVJpZ2h0LmdldEZ1bGxZZWFyKCk7XG4gIHZhciBtb250aERpZmYgPSBkYXRlTGVmdC5nZXRNb250aCgpIC0gZGF0ZVJpZ2h0LmdldE1vbnRoKCk7XG4gIHJldHVybiB5ZWFyRGlmZiAqIDEyICsgbW9udGhEaWZmO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgZW5kT2ZEYXlcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBlbmQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBlbmQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHJldHVybnMge0RhdGV9IHRoZSBlbmQgb2YgYSBkYXlcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgZW5kIG9mIGEgZGF5IGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gZW5kT2ZEYXkobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gVHVlIFNlcCAwMiAyMDE0IDIzOjU5OjU5Ljk5OVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVuZE9mRGF5KGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgZGF0ZS5zZXRIb3VycygyMywgNTksIDU5LCA5OTkpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGVuZE9mTW9udGhcbiAqIEBjYXRlZ29yeSBNb250aCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIGVuZCBvZiBhIG1vbnRoIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgZW5kIG9mIGEgbW9udGggZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHJldHVybnMge0RhdGV9IHRoZSBlbmQgb2YgYSBtb250aFxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBlbmQgb2YgYSBtb250aCBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IGVuZE9mTW9udGgobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gVHVlIFNlcCAzMCAyMDE0IDIzOjU5OjU5Ljk5OVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVuZE9mTW9udGgoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgbW9udGggPSBkYXRlLmdldE1vbnRoKCk7XG4gIGRhdGUuc2V0RnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpLCBtb250aCArIDEsIDApO1xuICBkYXRlLnNldEhvdXJzKDIzLCA1OSwgNTksIDk5OSk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGVuZE9mRGF5IGZyb20gXCIuLi9lbmRPZkRheS9pbmRleC5qc1wiO1xuaW1wb3J0IGVuZE9mTW9udGggZnJvbSBcIi4uL2VuZE9mTW9udGgvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzTGFzdERheU9mTW9udGhcbiAqIEBjYXRlZ29yeSBNb250aCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB0aGUgbGFzdCBkYXkgb2YgYSBtb250aD9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIElzIHRoZSBnaXZlbiBkYXRlIHRoZSBsYXN0IGRheSBvZiBhIG1vbnRoP1xuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGUgaXMgdGhlIGxhc3QgZGF5IG9mIGEgbW9udGhcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJcyAyOCBGZWJydWFyeSAyMDE0IHRoZSBsYXN0IGRheSBvZiBhIG1vbnRoP1xuICogdmFyIHJlc3VsdCA9IGlzTGFzdERheU9mTW9udGgobmV3IERhdGUoMjAxNCwgMSwgMjgpKVxuICogLy89PiB0cnVlXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNMYXN0RGF5T2ZNb250aChkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHJldHVybiBlbmRPZkRheShkYXRlKS5nZXRUaW1lKCkgPT09IGVuZE9mTW9udGgoZGF0ZSkuZ2V0VGltZSgpO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGRpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzIGZyb20gXCIuLi9kaWZmZXJlbmNlSW5DYWxlbmRhck1vbnRocy9pbmRleC5qc1wiO1xuaW1wb3J0IGNvbXBhcmVBc2MgZnJvbSBcIi4uL2NvbXBhcmVBc2MvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgaXNMYXN0RGF5T2ZNb250aCBmcm9tIFwiLi4vaXNMYXN0RGF5T2ZNb250aC9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBkaWZmZXJlbmNlSW5Nb250aHNcbiAqIEBjYXRlZ29yeSBNb250aCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIG51bWJlciBvZiBmdWxsIG1vbnRocyBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcy5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgbnVtYmVyIG9mIGZ1bGwgbW9udGhzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzIHVzaW5nIHRydW5jIGFzIGEgZGVmYXVsdCByb3VuZGluZyBtZXRob2QuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBsYXRlciBkYXRlXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgZWFybGllciBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgbnVtYmVyIG9mIGZ1bGwgbW9udGhzXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEhvdyBtYW55IGZ1bGwgbW9udGhzIGFyZSBiZXR3ZWVuIDMxIEphbnVhcnkgMjAxNCBhbmQgMSBTZXB0ZW1iZXIgMjAxND9cbiAqIGNvbnN0IHJlc3VsdCA9IGRpZmZlcmVuY2VJbk1vbnRocyhuZXcgRGF0ZSgyMDE0LCA4LCAxKSwgbmV3IERhdGUoMjAxNCwgMCwgMzEpKVxuICogLy89PiA3XG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlmZmVyZW5jZUluTW9udGhzKGRpcnR5RGF0ZUxlZnQsIGRpcnR5RGF0ZVJpZ2h0KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZUxlZnQgPSB0b0RhdGUoZGlydHlEYXRlTGVmdCk7XG4gIHZhciBkYXRlUmlnaHQgPSB0b0RhdGUoZGlydHlEYXRlUmlnaHQpO1xuICB2YXIgc2lnbiA9IGNvbXBhcmVBc2MoZGF0ZUxlZnQsIGRhdGVSaWdodCk7XG4gIHZhciBkaWZmZXJlbmNlID0gTWF0aC5hYnMoZGlmZmVyZW5jZUluQ2FsZW5kYXJNb250aHMoZGF0ZUxlZnQsIGRhdGVSaWdodCkpO1xuICB2YXIgcmVzdWx0OyAvLyBDaGVjayBmb3IgdGhlIGRpZmZlcmVuY2Ugb2YgbGVzcyB0aGFuIG1vbnRoXG5cbiAgaWYgKGRpZmZlcmVuY2UgPCAxKSB7XG4gICAgcmVzdWx0ID0gMDtcbiAgfSBlbHNlIHtcbiAgICBpZiAoZGF0ZUxlZnQuZ2V0TW9udGgoKSA9PT0gMSAmJiBkYXRlTGVmdC5nZXREYXRlKCkgPiAyNykge1xuICAgICAgLy8gVGhpcyB3aWxsIGNoZWNrIGlmIHRoZSBkYXRlIGlzIGVuZCBvZiBGZWIgYW5kIGFzc2lnbiBhIGhpZ2hlciBlbmQgb2YgbW9udGggZGF0ZVxuICAgICAgLy8gdG8gY29tcGFyZSBpdCB3aXRoIEphblxuICAgICAgZGF0ZUxlZnQuc2V0RGF0ZSgzMCk7XG4gICAgfVxuXG4gICAgZGF0ZUxlZnQuc2V0TW9udGgoZGF0ZUxlZnQuZ2V0TW9udGgoKSAtIHNpZ24gKiBkaWZmZXJlbmNlKTsgLy8gTWF0aC5hYnMoZGlmZiBpbiBmdWxsIG1vbnRocyAtIGRpZmYgaW4gY2FsZW5kYXIgbW9udGhzKSA9PT0gMSBpZiBsYXN0IGNhbGVuZGFyIG1vbnRoIGlzIG5vdCBmdWxsXG4gICAgLy8gSWYgc28sIHJlc3VsdCBtdXN0IGJlIGRlY3JlYXNlZCBieSAxIGluIGFic29sdXRlIHZhbHVlXG5cbiAgICB2YXIgaXNMYXN0TW9udGhOb3RGdWxsID0gY29tcGFyZUFzYyhkYXRlTGVmdCwgZGF0ZVJpZ2h0KSA9PT0gLXNpZ247IC8vIENoZWNrIGZvciBjYXNlcyBvZiBvbmUgZnVsbCBjYWxlbmRhciBtb250aFxuXG4gICAgaWYgKGlzTGFzdERheU9mTW9udGgodG9EYXRlKGRpcnR5RGF0ZUxlZnQpKSAmJiBkaWZmZXJlbmNlID09PSAxICYmIGNvbXBhcmVBc2MoZGlydHlEYXRlTGVmdCwgZGF0ZVJpZ2h0KSA9PT0gMSkge1xuICAgICAgaXNMYXN0TW9udGhOb3RGdWxsID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmVzdWx0ID0gc2lnbiAqIChkaWZmZXJlbmNlIC0gTnVtYmVyKGlzTGFzdE1vbnRoTm90RnVsbCkpO1xuICB9IC8vIFByZXZlbnQgbmVnYXRpdmUgemVyb1xuXG5cbiAgcmV0dXJuIHJlc3VsdCA9PT0gMCA/IDAgOiByZXN1bHQ7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBkaWZmZXJlbmNlSW5NaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBsYXRlciBkYXRlXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgZWFybGllciBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kc1xuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBIb3cgbWFueSBtaWxsaXNlY29uZHMgYXJlIGJldHdlZW5cbiAqIC8vIDIgSnVseSAyMDE0IDEyOjMwOjIwLjYwMCBhbmQgMiBKdWx5IDIwMTQgMTI6MzA6MjEuNzAwP1xuICogY29uc3QgcmVzdWx0ID0gZGlmZmVyZW5jZUluTWlsbGlzZWNvbmRzKFxuICogICBuZXcgRGF0ZSgyMDE0LCA2LCAyLCAxMiwgMzAsIDIxLCA3MDApLFxuICogICBuZXcgRGF0ZSgyMDE0LCA2LCAyLCAxMiwgMzAsIDIwLCA2MDApXG4gKiApXG4gKiAvLz0+IDExMDBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaWZmZXJlbmNlSW5NaWxsaXNlY29uZHMoZGF0ZUxlZnQsIGRhdGVSaWdodCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHRvRGF0ZShkYXRlTGVmdCkuZ2V0VGltZSgpIC0gdG9EYXRlKGRhdGVSaWdodCkuZ2V0VGltZSgpO1xufSIsInZhciByb3VuZGluZ01hcCA9IHtcbiAgY2VpbDogTWF0aC5jZWlsLFxuICByb3VuZDogTWF0aC5yb3VuZCxcbiAgZmxvb3I6IE1hdGguZmxvb3IsXG4gIHRydW5jOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPCAwID8gTWF0aC5jZWlsKHZhbHVlKSA6IE1hdGguZmxvb3IodmFsdWUpO1xuICB9IC8vIE1hdGgudHJ1bmMgaXMgbm90IHN1cHBvcnRlZCBieSBJRVxuXG59O1xudmFyIGRlZmF1bHRSb3VuZGluZ01ldGhvZCA9ICd0cnVuYyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Um91bmRpbmdNZXRob2QobWV0aG9kKSB7XG4gIHJldHVybiBtZXRob2QgPyByb3VuZGluZ01hcFttZXRob2RdIDogcm91bmRpbmdNYXBbZGVmYXVsdFJvdW5kaW5nTWV0aG9kXTtcbn0iLCJpbXBvcnQgZGlmZmVyZW5jZUluTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9kaWZmZXJlbmNlSW5NaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXRSb3VuZGluZ01ldGhvZCB9IGZyb20gXCIuLi9fbGliL3JvdW5kaW5nTWV0aG9kcy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBkaWZmZXJlbmNlSW5TZWNvbmRzXG4gKiBAY2F0ZWdvcnkgU2Vjb25kIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgbnVtYmVyIG9mIHNlY29uZHMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG51bWJlciBvZiBzZWNvbmRzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZUxlZnQgLSB0aGUgbGF0ZXIgZGF0ZVxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZVJpZ2h0IC0gdGhlIGVhcmxpZXIgZGF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIGFuIG9iamVjdCB3aXRoIG9wdGlvbnMuXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMucm91bmRpbmdNZXRob2Q9J3RydW5jJ10gLSBhIHJvdW5kaW5nIG1ldGhvZCAoYGNlaWxgLCBgZmxvb3JgLCBgcm91bmRgIG9yIGB0cnVuY2ApXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgbnVtYmVyIG9mIHNlY29uZHNcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSG93IG1hbnkgc2Vjb25kcyBhcmUgYmV0d2VlblxuICogLy8gMiBKdWx5IDIwMTQgMTI6MzA6MDcuOTk5IGFuZCAyIEp1bHkgMjAxNCAxMjozMDoyMC4wMDA/XG4gKiBjb25zdCByZXN1bHQgPSBkaWZmZXJlbmNlSW5TZWNvbmRzKFxuICogICBuZXcgRGF0ZSgyMDE0LCA2LCAyLCAxMiwgMzAsIDIwLCAwKSxcbiAqICAgbmV3IERhdGUoMjAxNCwgNiwgMiwgMTIsIDMwLCA3LCA5OTkpXG4gKiApXG4gKiAvLz0+IDEyXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlmZmVyZW5jZUluU2Vjb25kcyhkYXRlTGVmdCwgZGF0ZVJpZ2h0LCBvcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGlmZiA9IGRpZmZlcmVuY2VJbk1pbGxpc2Vjb25kcyhkYXRlTGVmdCwgZGF0ZVJpZ2h0KSAvIDEwMDA7XG4gIHJldHVybiBnZXRSb3VuZGluZ01ldGhvZChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucm91bmRpbmdNZXRob2QpKGRpZmYpO1xufSIsImltcG9ydCBhc3NpZ24gZnJvbSBcIi4uL2Fzc2lnbi9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xvbmVPYmplY3QoZGlydHlPYmplY3QpIHtcbiAgcmV0dXJuIGFzc2lnbih7fSwgZGlydHlPYmplY3QpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIGRpcnR5T2JqZWN0KSB7XG4gIGlmICh0YXJnZXQgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Fzc2lnbiByZXF1aXJlcyB0aGF0IGlucHV0IHBhcmFtZXRlciBub3QgYmUgbnVsbCBvciB1bmRlZmluZWQnKTtcbiAgfVxuXG4gIGRpcnR5T2JqZWN0ID0gZGlydHlPYmplY3QgfHwge307XG5cbiAgZm9yICh2YXIgcHJvcGVydHkgaW4gZGlydHlPYmplY3QpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGRpcnR5T2JqZWN0LCBwcm9wZXJ0eSkpIHtcbiAgICAgIHRhcmdldFtwcm9wZXJ0eV0gPSBkaXJ0eU9iamVjdFtwcm9wZXJ0eV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgY29tcGFyZUFzYyBmcm9tIFwiLi4vY29tcGFyZUFzYy9pbmRleC5qc1wiO1xuaW1wb3J0IGRpZmZlcmVuY2VJbk1vbnRocyBmcm9tIFwiLi4vZGlmZmVyZW5jZUluTW9udGhzL2luZGV4LmpzXCI7XG5pbXBvcnQgZGlmZmVyZW5jZUluU2Vjb25kcyBmcm9tIFwiLi4vZGlmZmVyZW5jZUluU2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSBcIi4uL2xvY2FsZS9lbi1VUy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgY2xvbmVPYmplY3QgZnJvbSBcIi4uL19saWIvY2xvbmVPYmplY3QvaW5kZXguanNcIjtcbmltcG9ydCBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlOVVRFU19JTl9EQVkgPSAxNDQwO1xudmFyIE1JTlVURVNfSU5fQUxNT1NUX1RXT19EQVlTID0gMjUyMDtcbnZhciBNSU5VVEVTX0lOX01PTlRIID0gNDMyMDA7XG52YXIgTUlOVVRFU19JTl9UV09fTU9OVEhTID0gODY0MDA7XG4vKipcbiAqIEBuYW1lIGZvcm1hdERpc3RhbmNlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMgaW4gd29yZHMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzIGluIHdvcmRzLlxuICpcbiAqIHwgRGlzdGFuY2UgYmV0d2VlbiBkYXRlcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSZXN1bHQgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgMCAuLi4gMzAgc2VjcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBsZXNzIHRoYW4gYSBtaW51dGUgIHxcbiAqIHwgMzAgc2VjcyAuLi4gMSBtaW4gMzAgc2VjcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAxIG1pbnV0ZSAgICAgICAgICAgIHxcbiAqIHwgMSBtaW4gMzAgc2VjcyAuLi4gNDQgbWlucyAzMCBzZWNzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBbMi4uNDRdIG1pbnV0ZXMgICAgIHxcbiAqIHwgNDQgbWlucyAuLi4gMzAgc2VjcyAuLi4gODkgbWlucyAzMCBzZWNzICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYm91dCAxIGhvdXIgICAgICAgIHxcbiAqIHwgODkgbWlucyAzMCBzZWNzIC4uLiAyMyBocnMgNTkgbWlucyAzMCBzZWNzICAgICAgICAgICAgICAgICAgICAgICAgfCBhYm91dCBbMi4uMjRdIGhvdXJzIHxcbiAqIHwgMjMgaHJzIDU5IG1pbnMgMzAgc2VjcyAuLi4gNDEgaHJzIDU5IG1pbnMgMzAgc2VjcyAgICAgICAgICAgICAgICAgfCAxIGRheSAgICAgICAgICAgICAgIHxcbiAqIHwgNDEgaHJzIDU5IG1pbnMgMzAgc2VjcyAuLi4gMjkgZGF5cyAyMyBocnMgNTkgbWlucyAzMCBzZWNzICAgICAgICAgfCBbMi4uMzBdIGRheXMgICAgICAgIHxcbiAqIHwgMjkgZGF5cyAyMyBocnMgNTkgbWlucyAzMCBzZWNzIC4uLiA0NCBkYXlzIDIzIGhycyA1OSBtaW5zIDMwIHNlY3MgfCBhYm91dCAxIG1vbnRoICAgICAgIHxcbiAqIHwgNDQgZGF5cyAyMyBocnMgNTkgbWlucyAzMCBzZWNzIC4uLiA1OSBkYXlzIDIzIGhycyA1OSBtaW5zIDMwIHNlY3MgfCBhYm91dCAyIG1vbnRocyAgICAgIHxcbiAqIHwgNTkgZGF5cyAyMyBocnMgNTkgbWlucyAzMCBzZWNzIC4uLiAxIHlyICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBbMi4uMTJdIG1vbnRocyAgICAgIHxcbiAqIHwgMSB5ciAuLi4gMSB5ciAzIG1vbnRocyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYm91dCAxIHllYXIgICAgICAgIHxcbiAqIHwgMSB5ciAzIG1vbnRocyAuLi4gMSB5ciA5IG1vbnRoIHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBvdmVyIDEgeWVhciAgICAgICAgIHxcbiAqIHwgMSB5ciA5IG1vbnRocyAuLi4gMiB5cnMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhbG1vc3QgMiB5ZWFycyAgICAgIHxcbiAqIHwgTiB5cnMgLi4uIE4geXJzIDMgbW9udGhzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYm91dCBOIHllYXJzICAgICAgIHxcbiAqIHwgTiB5cnMgMyBtb250aHMgLi4uIE4geXJzIDkgbW9udGhzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBvdmVyIE4geWVhcnMgICAgICAgIHxcbiAqIHwgTiB5cnMgOSBtb250aHMgLi4uIE4rMSB5cnMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhbG1vc3QgTisxIHllYXJzICAgIHxcbiAqXG4gKiBXaXRoIGBvcHRpb25zLmluY2x1ZGVTZWNvbmRzID09IHRydWVgOlxuICogfCBEaXN0YW5jZSBiZXR3ZWVuIGRhdGVzIHwgUmVzdWx0ICAgICAgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAwIHNlY3MgLi4uIDUgc2VjcyAgICAgIHwgbGVzcyB0aGFuIDUgc2Vjb25kcyAgfFxuICogfCA1IHNlY3MgLi4uIDEwIHNlY3MgICAgIHwgbGVzcyB0aGFuIDEwIHNlY29uZHMgfFxuICogfCAxMCBzZWNzIC4uLiAyMCBzZWNzICAgIHwgbGVzcyB0aGFuIDIwIHNlY29uZHMgfFxuICogfCAyMCBzZWNzIC4uLiA0MCBzZWNzICAgIHwgaGFsZiBhIG1pbnV0ZSAgICAgICAgfFxuICogfCA0MCBzZWNzIC4uLiA2MCBzZWNzICAgIHwgbGVzcyB0aGFuIGEgbWludXRlICAgfFxuICogfCA2MCBzZWNzIC4uLiA5MCBzZWNzICAgIHwgMSBtaW51dGUgICAgICAgICAgICAgfFxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogLSBUaGUgZnVuY3Rpb24gd2FzIHJlbmFtZWQgZnJvbSBgZGlzdGFuY2VJbldvcmRzIGAgdG8gYGZvcm1hdERpc3RhbmNlYFxuICogICB0byBtYWtlIGl0cyBuYW1lIGNvbnNpc3RlbnQgd2l0aCBgZm9ybWF0YCBhbmQgYGZvcm1hdFJlbGF0aXZlYC5cbiAqXG4gKiAtIFRoZSBvcmRlciBvZiBhcmd1bWVudHMgaXMgc3dhcHBlZCB0byBtYWtlIHRoZSBmdW5jdGlvblxuICogICBjb25zaXN0ZW50IHdpdGggYGRpZmZlcmVuY2VJbi4uLmAgZnVuY3Rpb25zLlxuICpcbiAqICAgYGBgamF2YXNjcmlwdFxuICogICAvLyBCZWZvcmUgdjIuMC4wXG4gKlxuICogICBkaXN0YW5jZUluV29yZHMoXG4gKiAgICAgbmV3IERhdGUoMTk4NiwgMywgNCwgMTAsIDMyLCAwKSxcbiAqICAgICBuZXcgRGF0ZSgxOTg2LCAzLCA0LCAxMSwgMzIsIDApLFxuICogICAgIHsgYWRkU3VmZml4OiB0cnVlIH1cbiAqICAgKSAvLz0+ICdpbiBhYm91dCAxIGhvdXInXG4gKlxuICogICAvLyB2Mi4wLjAgb253YXJkXG4gKlxuICogICBmb3JtYXREaXN0YW5jZShcbiAqICAgICBuZXcgRGF0ZSgxOTg2LCAzLCA0LCAxMSwgMzIsIDApLFxuICogICAgIG5ldyBEYXRlKDE5ODYsIDMsIDQsIDEwLCAzMiwgMCksXG4gKiAgICAgeyBhZGRTdWZmaXg6IHRydWUgfVxuICogICApIC8vPT4gJ2luIGFib3V0IDEgaG91cidcbiAqICAgYGBgXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBiYXNlRGF0ZSAtIHRoZSBkYXRlIHRvIGNvbXBhcmUgd2l0aFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIGFuIG9iamVjdCB3aXRoIG9wdGlvbnMuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmluY2x1ZGVTZWNvbmRzPWZhbHNlXSAtIGRpc3RhbmNlcyBsZXNzIHRoYW4gYSBtaW51dGUgYXJlIG1vcmUgZGV0YWlsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuYWRkU3VmZml4PWZhbHNlXSAtIHJlc3VsdCBpbmRpY2F0ZXMgaWYgdGhlIHNlY29uZCBkYXRlIGlzIGVhcmxpZXIgb3IgbGF0ZXIgdGhhbiB0aGUgZmlyc3RcbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHJldHVybnMge1N0cmluZ30gdGhlIGRpc3RhbmNlIGluIHdvcmRzXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgZGF0ZWAgbXVzdCBub3QgYmUgSW52YWxpZCBEYXRlXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgYmFzZURhdGVgIG11c3Qgbm90IGJlIEludmFsaWQgRGF0ZVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGZvcm1hdERpc3RhbmNlYCBwcm9wZXJ0eVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGF0IGlzIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIDIgSnVseSAyMDE0IGFuZCAxIEphbnVhcnkgMjAxNT9cbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlKG5ldyBEYXRlKDIwMTQsIDYsIDIpLCBuZXcgRGF0ZSgyMDE1LCAwLCAxKSlcbiAqIC8vPT4gJzYgbW9udGhzJ1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGF0IGlzIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIDEgSmFudWFyeSAyMDE1IDAwOjAwOjE1XG4gKiAvLyBhbmQgMSBKYW51YXJ5IDIwMTUgMDA6MDA6MDAsIGluY2x1ZGluZyBzZWNvbmRzP1xuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2UoXG4gKiAgIG5ldyBEYXRlKDIwMTUsIDAsIDEsIDAsIDAsIDE1KSxcbiAqICAgbmV3IERhdGUoMjAxNSwgMCwgMSwgMCwgMCwgMCksXG4gKiAgIHsgaW5jbHVkZVNlY29uZHM6IHRydWUgfVxuICogKVxuICogLy89PiAnbGVzcyB0aGFuIDIwIHNlY29uZHMnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoYXQgaXMgdGhlIGRpc3RhbmNlIGZyb20gMSBKYW51YXJ5IDIwMTZcbiAqIC8vIHRvIDEgSmFudWFyeSAyMDE1LCB3aXRoIGEgc3VmZml4P1xuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2UobmV3IERhdGUoMjAxNSwgMCwgMSksIG5ldyBEYXRlKDIwMTYsIDAsIDEpLCB7XG4gKiAgIGFkZFN1ZmZpeDogdHJ1ZVxuICogfSlcbiAqIC8vPT4gJ2Fib3V0IDEgeWVhciBhZ28nXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoYXQgaXMgdGhlIGRpc3RhbmNlIGJldHdlZW4gMSBBdWd1c3QgMjAxNiBhbmQgMSBKYW51YXJ5IDIwMTUgaW4gRXNwZXJhbnRvP1xuICogaW1wb3J0IHsgZW9Mb2NhbGUgfSBmcm9tICdkYXRlLWZucy9sb2NhbGUvZW8nXG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXREaXN0YW5jZShuZXcgRGF0ZSgyMDE2LCA3LCAxKSwgbmV3IERhdGUoMjAxNSwgMCwgMSksIHtcbiAqICAgbG9jYWxlOiBlb0xvY2FsZVxuICogfSlcbiAqIC8vPT4gJ3BsaSBvbCAxIGphcm8nXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0RGlzdGFuY2UoZGlydHlEYXRlLCBkaXJ0eUJhc2VEYXRlKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZSB8fCBkZWZhdWx0TG9jYWxlO1xuXG4gIGlmICghbG9jYWxlLmZvcm1hdERpc3RhbmNlKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gZm9ybWF0RGlzdGFuY2UgcHJvcGVydHknKTtcbiAgfVxuXG4gIHZhciBjb21wYXJpc29uID0gY29tcGFyZUFzYyhkaXJ0eURhdGUsIGRpcnR5QmFzZURhdGUpO1xuXG4gIGlmIChpc05hTihjb21wYXJpc29uKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgfVxuXG4gIHZhciBsb2NhbGl6ZU9wdGlvbnMgPSBjbG9uZU9iamVjdChvcHRpb25zKTtcbiAgbG9jYWxpemVPcHRpb25zLmFkZFN1ZmZpeCA9IEJvb2xlYW4ob3B0aW9ucy5hZGRTdWZmaXgpO1xuICBsb2NhbGl6ZU9wdGlvbnMuY29tcGFyaXNvbiA9IGNvbXBhcmlzb247XG4gIHZhciBkYXRlTGVmdDtcbiAgdmFyIGRhdGVSaWdodDtcblxuICBpZiAoY29tcGFyaXNvbiA+IDApIHtcbiAgICBkYXRlTGVmdCA9IHRvRGF0ZShkaXJ0eUJhc2VEYXRlKTtcbiAgICBkYXRlUmlnaHQgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRlTGVmdCA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICAgIGRhdGVSaWdodCA9IHRvRGF0ZShkaXJ0eUJhc2VEYXRlKTtcbiAgfVxuXG4gIHZhciBzZWNvbmRzID0gZGlmZmVyZW5jZUluU2Vjb25kcyhkYXRlUmlnaHQsIGRhdGVMZWZ0KTtcbiAgdmFyIG9mZnNldEluU2Vjb25kcyA9IChnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKGRhdGVSaWdodCkgLSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKGRhdGVMZWZ0KSkgLyAxMDAwO1xuICB2YXIgbWludXRlcyA9IE1hdGgucm91bmQoKHNlY29uZHMgLSBvZmZzZXRJblNlY29uZHMpIC8gNjApO1xuICB2YXIgbW9udGhzOyAvLyAwIHVwIHRvIDIgbWluc1xuXG4gIGlmIChtaW51dGVzIDwgMikge1xuICAgIGlmIChvcHRpb25zLmluY2x1ZGVTZWNvbmRzKSB7XG4gICAgICBpZiAoc2Vjb25kcyA8IDUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgnbGVzc1RoYW5YU2Vjb25kcycsIDUsIGxvY2FsaXplT3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKHNlY29uZHMgPCAxMCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCdsZXNzVGhhblhTZWNvbmRzJywgMTAsIGxvY2FsaXplT3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKHNlY29uZHMgPCAyMCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCdsZXNzVGhhblhTZWNvbmRzJywgMjAsIGxvY2FsaXplT3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKHNlY29uZHMgPCA0MCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCdoYWxmQU1pbnV0ZScsIG51bGwsIGxvY2FsaXplT3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKHNlY29uZHMgPCA2MCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCdsZXNzVGhhblhNaW51dGVzJywgMSwgbG9jYWxpemVPcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ3hNaW51dGVzJywgMSwgbG9jYWxpemVPcHRpb25zKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG1pbnV0ZXMgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgnbGVzc1RoYW5YTWludXRlcycsIDEsIGxvY2FsaXplT3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCd4TWludXRlcycsIG1pbnV0ZXMsIGxvY2FsaXplT3B0aW9ucyk7XG4gICAgICB9XG4gICAgfSAvLyAyIG1pbnMgdXAgdG8gMC43NSBocnNcblxuICB9IGVsc2UgaWYgKG1pbnV0ZXMgPCA0NSkge1xuICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ3hNaW51dGVzJywgbWludXRlcywgbG9jYWxpemVPcHRpb25zKTsgLy8gMC43NSBocnMgdXAgdG8gMS41IGhyc1xuICB9IGVsc2UgaWYgKG1pbnV0ZXMgPCA5MCkge1xuICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ2Fib3V0WEhvdXJzJywgMSwgbG9jYWxpemVPcHRpb25zKTsgLy8gMS41IGhycyB1cCB0byAyNCBocnNcbiAgfSBlbHNlIGlmIChtaW51dGVzIDwgTUlOVVRFU19JTl9EQVkpIHtcbiAgICB2YXIgaG91cnMgPSBNYXRoLnJvdW5kKG1pbnV0ZXMgLyA2MCk7XG4gICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgnYWJvdXRYSG91cnMnLCBob3VycywgbG9jYWxpemVPcHRpb25zKTsgLy8gMSBkYXkgdXAgdG8gMS43NSBkYXlzXG4gIH0gZWxzZSBpZiAobWludXRlcyA8IE1JTlVURVNfSU5fQUxNT1NUX1RXT19EQVlTKSB7XG4gICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgneERheXMnLCAxLCBsb2NhbGl6ZU9wdGlvbnMpOyAvLyAxLjc1IGRheXMgdXAgdG8gMzAgZGF5c1xuICB9IGVsc2UgaWYgKG1pbnV0ZXMgPCBNSU5VVEVTX0lOX01PTlRIKSB7XG4gICAgdmFyIGRheXMgPSBNYXRoLnJvdW5kKG1pbnV0ZXMgLyBNSU5VVEVTX0lOX0RBWSk7XG4gICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgneERheXMnLCBkYXlzLCBsb2NhbGl6ZU9wdGlvbnMpOyAvLyAxIG1vbnRoIHVwIHRvIDIgbW9udGhzXG4gIH0gZWxzZSBpZiAobWludXRlcyA8IE1JTlVURVNfSU5fVFdPX01PTlRIUykge1xuICAgIG1vbnRocyA9IE1hdGgucm91bmQobWludXRlcyAvIE1JTlVURVNfSU5fTU9OVEgpO1xuICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ2Fib3V0WE1vbnRocycsIG1vbnRocywgbG9jYWxpemVPcHRpb25zKTtcbiAgfVxuXG4gIG1vbnRocyA9IGRpZmZlcmVuY2VJbk1vbnRocyhkYXRlUmlnaHQsIGRhdGVMZWZ0KTsgLy8gMiBtb250aHMgdXAgdG8gMTIgbW9udGhzXG5cbiAgaWYgKG1vbnRocyA8IDEyKSB7XG4gICAgdmFyIG5lYXJlc3RNb250aCA9IE1hdGgucm91bmQobWludXRlcyAvIE1JTlVURVNfSU5fTU9OVEgpO1xuICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ3hNb250aHMnLCBuZWFyZXN0TW9udGgsIGxvY2FsaXplT3B0aW9ucyk7IC8vIDEgeWVhciB1cCB0byBtYXggRGF0ZVxuICB9IGVsc2Uge1xuICAgIHZhciBtb250aHNTaW5jZVN0YXJ0T2ZZZWFyID0gbW9udGhzICUgMTI7XG4gICAgdmFyIHllYXJzID0gTWF0aC5mbG9vcihtb250aHMgLyAxMik7IC8vIE4geWVhcnMgdXAgdG8gMSB5ZWFycyAzIG1vbnRoc1xuXG4gICAgaWYgKG1vbnRoc1NpbmNlU3RhcnRPZlllYXIgPCAzKSB7XG4gICAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCdhYm91dFhZZWFycycsIHllYXJzLCBsb2NhbGl6ZU9wdGlvbnMpOyAvLyBOIHllYXJzIDMgbW9udGhzIHVwIHRvIE4geWVhcnMgOSBtb250aHNcbiAgICB9IGVsc2UgaWYgKG1vbnRoc1NpbmNlU3RhcnRPZlllYXIgPCA5KSB7XG4gICAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCdvdmVyWFllYXJzJywgeWVhcnMsIGxvY2FsaXplT3B0aW9ucyk7IC8vIE4geWVhcnMgOSBtb250aHMgdXAgdG8gTiB5ZWFyIDEyIG1vbnRoc1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCdhbG1vc3RYWWVhcnMnLCB5ZWFycyArIDEsIGxvY2FsaXplT3B0aW9ucyk7XG4gICAgfVxuICB9XG59IiwiaW1wb3J0IHsgUHJpb3JpdHlUeXBlIH0gZnJvbSBcIi4uL2VudGl0eS9Qcmlvcml0eVR5cGVcIjtcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSBcIi4uL3V0aWwvVXRpbHNcIjtcbmltcG9ydCB7IGZvcm1hdCwgZm9ybWF0RGlzdGFuY2UsIGlzQWZ0ZXIgfSBmcm9tIFwiZGF0ZS1mbnNcIjtcblxuY29uc3QgT1ZFUlZJRVdfUEFHRV9JRCA9IDA7XG5cbmV4cG9ydCBjbGFzcyBDb250ZW50VmlldyB7XG4gIGNvbnRhaW5lcjtcbiAgcHJvamVjdDtcbiAgY29udHJvbGxlcjtcbiAgbW9kZWw7XG4gIG1lbnVWaWV3O1xuXG4gIGFsbEV4cGFuZGVkO1xuXG4gIGNvbnN0cnVjdG9yKGRlcGVuZGVuY2llcykge1xuICAgIHRoaXMud3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY29udGVudC13cmFwcGVyXCIpO1xuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiY29udGFpbmVyXCIpO1xuXG4gICAgaWYgKGRlcGVuZGVuY2llcy5tZW51Vmlldykge1xuICAgICAgdGhpcy5tZW51VmlldyA9IGRlcGVuZGVuY2llcy5tZW51VmlldztcbiAgICB9XG5cbiAgICB0aGlzLmFsbEV4cGFuZGVkID0gZmFsc2U7XG5cbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIGluaXQoKSB7fVxuXG4gIHNldENvbnRyb2xsZXIoY29udHJvbGxlcikge1xuICAgIHRoaXMuY29udHJvbGxlciA9IGNvbnRyb2xsZXI7XG4gICAgdGhpcy5zZXRDdXJyZW50UHJvamVjdCgpO1xuICB9XG5cbiAgc2V0Q3VycmVudFByb2plY3QoKSB7XG4gICAgdGhpcy5wcm9qZWN0ID0gdGhpcy5jb250cm9sbGVyLmdldEN1cnJlbnRQcm9qZWN0KCk7XG4gIH1cblxuICBzZXRQcm9qZWN0KHByb2plY3QpIHtcbiAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICB9XG5cbiAgc2V0TW9kZWwobW9kZWwpIHtcbiAgICB0aGlzLm1vZGVsID0gbW9kZWw7XG4gIH1cblxuICB1cGRhdGVQcm9qZWN0KCkge1xuICAgIHRoaXMucHJvamVjdCA9IHRoaXMubW9kZWwuZ2V0Q3VycmVudFByb2plY3QoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICB0aGlzLnVwZGF0ZVByb2plY3QoKTtcbiAgICB0aGlzLnJlbmRlck1lbnUoKTtcbiAgICBpZiAodGhpcy5wcm9qZWN0LmlkID09PSBPVkVSVklFV19QQUdFX0lEKSB7XG4gICAgICB0aGlzLnJlbmRlck92ZXJ2aWV3KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVuZGVyVGFza3NMaXN0KCk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyTWVudSgpIHtcbiAgICB0aGlzLm1lbnVWaWV3LnJlbmRlcigpO1xuICB9XG5cbiAgcmVuZGVyT3ZlcnZpZXcoKSB7XG4gICAgdGhpcy5jbGVhckNvbnRhaW5lcigpO1xuXG4gICAgY29uc3QgZmxleFJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgZmxleFJvdy5jbGFzc0xpc3QuYWRkKFwiZmxleC1yb3dcIik7XG5cbiAgICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMVwiKTtcbiAgICB0aXRsZS5jbGFzc0xpc3QuYWRkKFwibGlzdC10aXRsZVwiKTtcbiAgICB0aXRsZS50ZXh0Q29udGVudCA9IFwiT3ZlcnZpZXdcIjtcbiAgICBmbGV4Um93LmFwcGVuZENoaWxkKHRpdGxlKTtcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChmbGV4Um93KTtcblxuICAgIGNvbnN0IHRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICB0ZXh0LmNsYXNzTGlzdC5hZGQoXCJsaXN0LWRlc2NyaXB0aW9uXCIpO1xuICAgIHRleHQudGV4dENvbnRlbnQgPVxuICAgICAgXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS5cIjtcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0ZXh0KTtcblxuICAgIGNvbnN0IHByb2plY3RHcmlkV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgcHJvamVjdEdyaWRXcmFwcGVyLmNsYXNzTGlzdC5hZGQoXCJwcm9qZWN0LWdyaWQtd3JhcHBlclwiKTtcblxuICAgIGNvbnN0IHByb2plY3RHcmlkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBwcm9qZWN0R3JpZC5jbGFzc0xpc3QuYWRkKFwicHJvamVjdC1ncmlkXCIpO1xuXG4gICAgdGhpcy5tb2RlbC5nZXRQcm9qZWN0T3ZlcnZpZXcoKS5tYXAoKHByb2plY3QpID0+IHtcbiAgICAgIHByb2plY3RHcmlkLmFwcGVuZENoaWxkKHRoaXMuZ2V0UHJvamVjdEdyaWRJdGVtKHByb2plY3QpKTtcbiAgICB9KTtcblxuICAgIHByb2plY3RHcmlkLmFwcGVuZENoaWxkKHRoaXMuZ2V0TmV3UHJvamVjdEdyaWRCdXR0b24oKSk7XG4gICAgcHJvamVjdEdyaWRXcmFwcGVyLmFwcGVuZENoaWxkKHByb2plY3RHcmlkKTtcblxuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHByb2plY3RHcmlkV3JhcHBlcik7XG4gICAgdGhpcy53cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMuY29udGFpbmVyKTtcbiAgfVxuXG4gIGdldFByb2plY3RHcmlkSXRlbShwcm9qZWN0KSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwicHJvamVjdC1ncmlkLWl0ZW1cIik7XG5cbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtcHJvamVjdC1pbmRleFwiLCBwcm9qZWN0LmlkKTtcblxuICAgIGNvbnN0IGJnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBiZy5jbGFzc0xpc3QuYWRkKFwiYmdcIik7XG4gICAgZWxlbWVudC5hcHBlbmRDaGlsZChiZyk7XG5cbiAgICBjb25zdCB0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0ZXh0LmNsYXNzTGlzdC5hZGQoXCJ0ZXh0XCIpO1xuXG4gICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDJcIik7XG4gICAgdGl0bGUuY2xhc3NMaXN0LmFkZChcInByb2plY3QtdGl0bGVcIik7XG4gICAgdGl0bGUudGV4dENvbnRlbnQgPSBwcm9qZWN0Lm5hbWU7XG4gICAgdGV4dC5hcHBlbmRDaGlsZCh0aXRsZSk7XG5cbiAgICBjb25zdCB0YXNrQ291bnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICB0YXNrQ291bnQuY2xhc3NMaXN0LmFkZChcInRhc2stY291bnRcIik7XG4gICAgdGFza0NvdW50LnRleHRDb250ZW50ID0gYCR7cHJvamVjdC50YXNrc30gJHtcbiAgICAgIHByb2plY3QudGFza3MgPT09IDEgPyBcInRhc2tcIiA6IFwidGFza3NcIlxuICAgIH1gO1xuICAgIHRleHQuYXBwZW5kQ2hpbGQodGFza0NvdW50KTtcblxuICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQodGV4dCk7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICBnZXROZXdQcm9qZWN0R3JpZEJ1dHRvbigpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJwcm9qZWN0LWdyaWQtaXRlbVwiLCBcIm5ldy1wcm9qZWN0LWJ0blwiKTtcblxuICAgIGNvbnN0IGJnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBiZy5jbGFzc0xpc3QuYWRkKFwiYmdcIik7XG4gICAgZWxlbWVudC5hcHBlbmRDaGlsZChiZyk7XG5cbiAgICBjb25zdCB0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0ZXh0LmNsYXNzTGlzdC5hZGQoXCJ0ZXh0XCIpO1xuXG4gICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDJcIik7XG4gICAgdGl0bGUuY2xhc3NMaXN0LmFkZChcInByb2plY3QtdGl0bGVcIik7XG4gICAgdGl0bGUuaW5uZXJIVE1MID0gXCI8aSBjbGFzcz0nZmEgZmEtcGx1cyc+PC9pPlwiO1xuICAgIHRleHQuYXBwZW5kQ2hpbGQodGl0bGUpO1xuXG4gICAgY29uc3QgdGFza0NvdW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgdGFza0NvdW50LmNsYXNzTGlzdC5hZGQoXCJ0YXNrLWNvdW50XCIpO1xuICAgIHRhc2tDb3VudC50ZXh0Q29udGVudCA9IFwiTmV3IHByb2plY3RcIjtcbiAgICB0ZXh0LmFwcGVuZENoaWxkKHRhc2tDb3VudCk7XG5cbiAgICBlbGVtZW50LmFwcGVuZENoaWxkKHRleHQpO1xuXG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByZW5kZXJUYXNrc0xpc3QoKSB7XG4gICAgdGhpcy5jbGVhckNvbnRhaW5lcigpO1xuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJmYWRlLWluLWFuaW1hdGlvblwiKTtcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmNyZWF0ZVByb2plY3RUaXRsZUFuZE1lbnUoKSk7XG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5jcmVhdGVQcm9qZWN0RGVzY3JpcHRpb24oKSk7XG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5jcmVhdGVUYXNrcygpKTtcblxuICAgIHRoaXMud3JhcHBlci5yZW1vdmVDaGlsZChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNvbnRhaW5lclwiKSk7XG4gICAgdGhpcy53cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMuY29udGFpbmVyKTtcbiAgfVxuXG4gIGNsZWFyQ29udGFpbmVyKCkge1xuICAgIHRoaXMuY29udGFpbmVyLnRleHRDb250ZW50ID0gXCJcIjtcbiAgfVxuXG4gIGNyZWF0ZVByb2plY3RUaXRsZUFuZE1lbnUoKSB7XG4gICAgY29uc3QgZmxleFJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgZmxleFJvdy5jbGFzc0xpc3QuYWRkKFwiZmxleC1yb3dcIik7XG5cbiAgICBjb25zdCBoZWFkaW5nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgxXCIpO1xuICAgIGhlYWRpbmcuY2xhc3NMaXN0LmFkZChcImxpc3QtdGl0bGVcIik7XG4gICAgaGVhZGluZy50ZXh0Q29udGVudCA9IHRoaXMucHJvamVjdC50aXRsZTtcblxuICAgIGNvbnN0IG1lbnUxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBtZW51MS5jbGFzc0xpc3QuYWRkKFwicHVzaC1yaWdodFwiLCBcImFsaWduLWNlbnRlclwiKTtcblxuICAgIGNvbnN0IGljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaVwiKTtcbiAgICBpY29uLmNsYXNzTGlzdC5hZGQoXCJmYXNcIiwgXCJmYS1lbGxpcHNpcy12XCIpO1xuXG4gICAgbWVudTEuYXBwZW5kQ2hpbGQoaWNvbik7XG5cbiAgICBmbGV4Um93LmFwcGVuZENoaWxkKGhlYWRpbmcpO1xuICAgIGZsZXhSb3cuYXBwZW5kQ2hpbGQobWVudTEpO1xuXG4gICAgcmV0dXJuIGZsZXhSb3c7XG4gIH1cblxuICBjcmVhdGVQcm9qZWN0RGVzY3JpcHRpb24oKSB7XG4gICAgY29uc3QgZGVzY3JpcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICBkZXNjcmlwdGlvbi5jbGFzc0xpc3QuYWRkKFwibGlzdC1kZXNjcmlwdGlvblwiKTtcbiAgICBkZXNjcmlwdGlvbi50ZXh0Q29udGVudCA9IHRoaXMucHJvamVjdC5kZXNjcmlwdGlvbjtcblxuICAgIHJldHVybiBkZXNjcmlwdGlvbjtcbiAgfVxuXG4gIGNyZWF0ZVRhc2tzKCkge1xuICAgIGNvbnN0IHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHdyYXBwZXIuY2xhc3NMaXN0LmFkZChcInRhc2tzLXdyYXBwZXJcIik7XG5cbiAgICBjb25zdCBzZWN0aW9uVG9kbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgc2VjdGlvblRvZG8uY2xhc3NMaXN0LmFkZChcImZsZXgtcm93XCIpO1xuXG4gICAgY29uc3QgaGVhZGluZ1RvZG8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGhlYWRpbmdUb2RvLmNsYXNzTGlzdC5hZGQoXCJ0YXNrcy10aXRsZVwiKTtcbiAgICBoZWFkaW5nVG9kby50ZXh0Q29udGVudCA9IFwiVG9kb1wiO1xuXG4gICAgc2VjdGlvblRvZG8uYXBwZW5kQ2hpbGQoaGVhZGluZ1RvZG8pO1xuXG4gICAgY29uc3QgZXhwYW5kQWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBleHBhbmRBbGwuY2xhc3NMaXN0LmFkZChcInB1c2gtcmlnaHRcIik7XG5cbiAgICBjb25zdCBleHBhbmRBbGxTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgZXhwYW5kQWxsU3Bhbi5jbGFzc0xpc3QuYWRkKFwiZm9udC1zbVwiKTtcbiAgICBleHBhbmRBbGxTcGFuLmlkID0gXCJleHBhbmQtYWxsLWhpZGUtYWxsLXNwYW5cIjtcbiAgICBpZiAodGhpcy5hbGxFeHBhbmRlZCkge1xuICAgICAgY29uc29sZS5sb2coJ2FsbCBleHBhbmRlZCcpO1xuICAgICAgZXhwYW5kQWxsU3Bhbi50ZXh0Q29udGVudCA9IFwiQ29sbGFwc2UgYWxsXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKCdhbGwgY29sbGFwc2VkJylcbiAgICAgIGV4cGFuZEFsbFNwYW4udGV4dENvbnRlbnQgPSBcIkV4cGFuZCBhbGxcIjtcbiAgICB9XG5cbiAgICBleHBhbmRBbGwuYXBwZW5kQ2hpbGQoZXhwYW5kQWxsU3Bhbik7XG4gICAgc2VjdGlvblRvZG8uYXBwZW5kQ2hpbGQoZXhwYW5kQWxsKTtcbiAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHNlY3Rpb25Ub2RvKTtcblxuICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKTtcbiAgICBmb3IgKGxldCB0YXNrIG9mIHRoaXMucHJvamVjdC50YXNrcykge1xuICAgICAgLy8gZm9ybS5hcHBlbmRDaGlsZCh0YXNrLmdldERPTUVsZW1lbnQoKSk7XG4gICAgICAvLyBvclxuICAgICAgZm9ybS5hcHBlbmRDaGlsZCh0aGlzLmdldFRhc2tET01FbGVtZW50KHRhc2spKTtcbiAgICB9XG5cbiAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGZvcm0pO1xuXG4gICAgaWYgKHRoaXMucHJvamVjdC5kb25lICYmIHRoaXMucHJvamVjdC5kb25lLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGhlYWRpbmdEb25lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGhlYWRpbmdEb25lLmNsYXNzTGlzdC5hZGQoXCJ0YXNrcy10aXRsZVwiKTtcbiAgICAgIGhlYWRpbmdEb25lLnRleHRDb250ZW50ID0gXCJEb25lXCI7XG5cbiAgICAgIGNvbnN0IGRvbmVGb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIik7XG4gICAgICBmb3IgKGxldCBkb25lVGFzayBvZiB0aGlzLnByb2plY3QuZG9uZSkge1xuICAgICAgICBkb25lRm9ybS5hcHBlbmRDaGlsZCh0aGlzLmdldFRhc2tET01FbGVtZW50KGRvbmVUYXNrKSk7XG4gICAgICB9XG5cbiAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoaGVhZGluZ0RvbmUpO1xuICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZChkb25lRm9ybSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHdyYXBwZXI7XG4gIH1cblxuICBnZXRUYXNrRE9NRWxlbWVudCh0YXNrKSB7XG4gICAgY29uc3QgREFURV9GTlNfRk9STUFUX1NUUklORyA9IFwiRUVFRSBkIExMTEwgeVwiO1xuXG4gICAgbGV0IGJhY2tncm91bmRDb2xvckNsYXNzO1xuICAgIGxldCBib3JkZXJDb2xvckNsYXNzO1xuXG4gICAgc3dpdGNoICh0YXNrLnByaW9yaXR5KSB7XG4gICAgICBjYXNlIFByaW9yaXR5VHlwZS5ERUZBVUxUOlxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3JDbGFzcyA9IFwiYmctbGlnaHRcIjtcbiAgICAgICAgYm9yZGVyQ29sb3JDbGFzcyA9IFwicHJpb3JpdHktZGVmYXVsdC1ib3JkZXJcIjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgUHJpb3JpdHlUeXBlLkhJR0g6XG4gICAgICAgIGJhY2tncm91bmRDb2xvckNsYXNzID0gXCJiZy1kYW5nZXJcIjtcbiAgICAgICAgYm9yZGVyQ29sb3JDbGFzcyA9IFwicHJpb3JpdHktaGlnaC1ib3JkZXJcIjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgUHJpb3JpdHlUeXBlLk1FRElVTTpcbiAgICAgICAgYmFja2dyb3VuZENvbG9yQ2xhc3MgPSBcImJnLW1lZGl1bVwiO1xuICAgICAgICBib3JkZXJDb2xvckNsYXNzID0gXCJwcmlvcml0eS1tZWRpdW0tYm9yZGVyXCI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFByaW9yaXR5VHlwZS5MT1c6XG4gICAgICAgIGJhY2tncm91bmRDb2xvckNsYXNzID0gXCJiZy1sb3dcIjtcbiAgICAgICAgYm9yZGVyQ29sb3JDbGFzcyA9IFwicHJpb3JpdHktbG93LWJvcmRlclwiO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBjb25zdCB0YXNrRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGFza0VsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhc2tcIiwgYm9yZGVyQ29sb3JDbGFzcyk7XG4gICAgdGFza0VsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS1pbmRleFwiLCB0YXNrLmlkKTtcblxuICAgIGNvbnN0IHRhc2tDb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0YXNrQ29udGVudC5jbGFzc0xpc3QuYWRkKFwidGFzay1jb250ZW50XCIpO1xuXG4gICAgY29uc3QgY2hlY2tib3hJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICBjaGVja2JveElucHV0LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJjaGVja2JveFwiKTtcbiAgICBpZiAodGFzay5pc0NvbXBsZXRlKSB7XG4gICAgICBjaGVja2JveElucHV0LnNldEF0dHJpYnV0ZShcImNoZWNrZWRcIiwgXCJcIik7XG4gICAgfVxuICAgIGNoZWNrYm94SW5wdXQuaWQgPSBgdGFzay0ke3Rhc2suaWR9YDtcblxuICAgIHRhc2tDb250ZW50LmFwcGVuZENoaWxkKGNoZWNrYm94SW5wdXQpO1xuXG4gICAgY29uc3QgY2hlY2tib3hXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBjaGVja2JveFdyYXBwZXIuY2xhc3NMaXN0LmFkZChcImNoZWNrYm94LXdyYXBwZXJcIik7XG4gICAgY29uc3QgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgbGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsIGB0YXNrLSR7dGFzay5pZH1gKTtcbiAgICBjb25zdCBzcGFuQ2hlY2tib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICBzcGFuQ2hlY2tib3guY2xhc3NMaXN0LmFkZChcImNoZWNrYm94XCIpO1xuICAgIGNvbnN0IHNwYW5DaGVjayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgIHNwYW5DaGVjay5jbGFzc0xpc3QuYWRkKFwiY2hlY2tcIik7XG5cbiAgICBzcGFuQ2hlY2tib3guYXBwZW5kQ2hpbGQoc3BhbkNoZWNrKTtcbiAgICBsYWJlbC5hcHBlbmRDaGlsZChzcGFuQ2hlY2tib3gpO1xuICAgIGNoZWNrYm94V3JhcHBlci5hcHBlbmRDaGlsZChsYWJlbCk7XG5cbiAgICB0YXNrQ29udGVudC5hcHBlbmRDaGlsZChjaGVja2JveFdyYXBwZXIpO1xuXG4gICAgY29uc3QgdGFza1RleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRhc2tUZXh0LmNsYXNzTGlzdC5hZGQoXCJ0YXNrLXRleHRcIik7XG5cbiAgICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGl0bGUuY2xhc3NMaXN0LmFkZChcInRpdGxlXCIpO1xuICAgIHRpdGxlLnRleHRDb250ZW50ID0gdGFzay50aXRsZTtcblxuICAgIHRhc2tUZXh0LmFwcGVuZENoaWxkKHRpdGxlKTtcblxuICAgIGNvbnN0IHRhc2tEZXRhaWxzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0YXNrRGV0YWlscy5jbGFzc0xpc3QuYWRkKFwidGFzay1kZXRhaWxzXCIpO1xuICAgIC8vIEJ1ZyBmaXggaWRlYSAoYWRkIHByb3BlcnR5IGlzQ29sbGFwc2VkIHRvIFRhc2spXG4gICAgaWYgKHRhc2suaXNDb2xsYXBzZWQpIHtcbiAgICAgIHRhc2tEZXRhaWxzLmNsYXNzTGlzdC5hZGQoXCJoaWRlXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXNrRGV0YWlscy5jbGFzc0xpc3QucmVtb3ZlKCdoaWRlJyk7XG4gICAgfVxuXG4gICAgY29uc3QgdGFza0Rlc2NyaXB0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0YXNrRGVzY3JpcHRpb24uY2xhc3NMaXN0LmFkZChcImRlc2NyaXB0aW9uXCIsIFwiZm9udC1zbVwiKTtcbiAgICB0YXNrRGVzY3JpcHRpb24udGV4dENvbnRlbnQgPSB0YXNrLmRlc2NyaXB0aW9uO1xuXG4gICAgY29uc3QgZmxleFJvdzEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGZsZXhSb3cxLmNsYXNzTGlzdC5hZGQoXCJmbGV4LXJvd1wiKTtcblxuICAgIGNvbnN0IHByaW9yaXR5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBwcmlvcml0eS5jbGFzc0xpc3QuYWRkKFwicHJpb3JpdHlcIiwgYmFja2dyb3VuZENvbG9yQ2xhc3MsIFwiZm9udC1zbVwiKTtcbiAgICBwcmlvcml0eS50ZXh0Q29udGVudCA9IFV0aWxzLmNhcGl0YWxpemUodGFzay5wcmlvcml0eSk7XG5cbiAgICBjb25zdCBkdWVEYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBkdWVEYXRlLmNsYXNzTGlzdC5hZGQoXCJkdWUtZGF0ZVwiLCBcImZvbnQtc21cIik7XG5cbiAgICBjb25zdCBkdWVEYXRlU3RyaW5nID0gZm9ybWF0KHRhc2suZHVlRGF0ZSwgREFURV9GTlNfRk9STUFUX1NUUklORyk7XG5cbiAgICBsZXQgZHVlSW47XG4gICAgY29uc3QgZGlzdGFuY2UgPSBmb3JtYXREaXN0YW5jZSh0YXNrLmR1ZURhdGUsIG5ldyBEYXRlKCkpO1xuICAgIGlmIChpc0FmdGVyKG5ldyBEYXRlKCksIHRhc2suZHVlRGF0ZSkpIHtcbiAgICAgIC8vIE92ZXJkdWVcbiAgICAgIGR1ZUluID0gYE92ZXJkdWUgJHtkaXN0YW5jZX1gO1xuICAgIH0gZWxzZSB7XG4gICAgICBkdWVJbiA9IGBEdWUgaW4gJHtkaXN0YW5jZX1gO1xuICAgIH1cblxuICAgIGR1ZURhdGUuaW5uZXJIVE1MID0gYCR7ZHVlSW59IDxzcGFuIGNsYXNzPSdkYXRlJz4oJHtkdWVEYXRlU3RyaW5nfSk8L3NwYW4+YDtcblxuICAgIHRhc2tEZXRhaWxzLmFwcGVuZENoaWxkKHRhc2tEZXNjcmlwdGlvbik7XG5cbiAgICBmbGV4Um93MS5hcHBlbmRDaGlsZChwcmlvcml0eSk7XG4gICAgZmxleFJvdzEuYXBwZW5kQ2hpbGQoZHVlRGF0ZSk7XG4gICAgdGFza0RldGFpbHMuYXBwZW5kQ2hpbGQoZmxleFJvdzEpO1xuXG4gICAgdGFza1RleHQuYXBwZW5kQ2hpbGQodGFza0RldGFpbHMpO1xuXG4gICAgdGFza0NvbnRlbnQuYXBwZW5kQ2hpbGQodGFza1RleHQpO1xuICAgIHRhc2tFbGVtZW50LmFwcGVuZENoaWxkKHRhc2tDb250ZW50KTtcblxuICAgIGNvbnN0IHRhc2tNZW51ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0YXNrTWVudS5jbGFzc0xpc3QuYWRkKFwidGFzay1tZW51XCIpO1xuXG4gICAgY29uc3QgY2hldnJvbkljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaVwiKTtcbiAgICBjaGV2cm9uSWNvbi5jbGFzc0xpc3QuYWRkKFwiaWNvblwiLCBcImNoZXZyb25cIik7XG4gICAgaWYgKHRhc2suaXNDb2xsYXBzZWQpIHtcbiAgICAgIGNoZXZyb25JY29uLmNsYXNzTGlzdC5hZGQoXCJmYXNcIiwgXCJmYS1jaGV2cm9uLWRvd25cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNoZXZyb25JY29uLmNsYXNzTGlzdC5hZGQoXCJmYXNcIiwgXCJmYS1jaGV2cm9uLXVwXCIpO1xuICAgIH1cbiAgICB0YXNrTWVudS5hcHBlbmRDaGlsZChjaGV2cm9uSWNvbik7XG5cbiAgICBjb25zdCBtb3JlSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpXCIpO1xuICAgIG1vcmVJY29uLmNsYXNzTGlzdC5hZGQoXCJmYXNcIiwgXCJmYS1lbGxpcHNpcy12XCIsIFwiaWNvblwiLCBcIm1vcmVcIik7XG4gICAgdGFza01lbnUuYXBwZW5kQ2hpbGQobW9yZUljb24pO1xuXG4gICAgY29uc3QgbW9yZU1lbnUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIG1vcmVNZW51LmNsYXNzTGlzdC5hZGQoXCJtb3JlLW1lbnVcIiwgXCJoaWRlXCIpO1xuXG4gICAgY29uc3QgbGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiKTtcblxuICAgIGNvbnN0IGVkaXRMaXN0SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcbiAgICBlZGl0TGlzdEl0ZW0uY2xhc3NMaXN0LmFkZChcIm1vcmUtbWVudS1vcHRpb25cIiwgXCJlZGl0XCIpO1xuICAgIGVkaXRMaXN0SXRlbS5pbm5lckhUTUwgPSBcIjxpIGNsYXNzPSdmYXIgZmEtZWRpdCBpY29uJz48L2k+IEVkaXRcIjtcblxuICAgIGNvbnN0IGRlbGV0ZUxpc3RJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgIGRlbGV0ZUxpc3RJdGVtLmNsYXNzTGlzdC5hZGQoXCJtb3JlLW1lbnUtb3B0aW9uXCIsIFwiZGVsZXRlXCIpO1xuICAgIGRlbGV0ZUxpc3RJdGVtLmlubmVySFRNTCA9IFwiPGkgY2xhc3M9J2ZhciBmYS10cmFzaC1hbHQgaWNvbic+PC9pPiBEZWxldGVcIjtcblxuICAgIGxpc3QuYXBwZW5kQ2hpbGQoZWRpdExpc3RJdGVtKTtcbiAgICBsaXN0LmFwcGVuZENoaWxkKGRlbGV0ZUxpc3RJdGVtKTtcblxuICAgIG1vcmVNZW51LmFwcGVuZENoaWxkKGxpc3QpO1xuICAgIHRhc2tNZW51LmFwcGVuZENoaWxkKG1vcmVNZW51KTtcblxuICAgIHRhc2tFbGVtZW50LmFwcGVuZENoaWxkKHRhc2tNZW51KTtcblxuICAgIHJldHVybiB0YXNrRWxlbWVudDtcbiAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIFV0aWxzIHtcbiBcbiAgc3RhdGljIGNhcGl0YWxpemUoc3RyKSB7XG4gICAgY29uc3QgY2FwaXRhbGl6ZWRTdHJpbmcgPSBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XG4gICAgcmV0dXJuIGNhcGl0YWxpemVkU3RyaW5nO1xuICB9XG5cbn0iLCJleHBvcnQgY2xhc3MgTWVudVZpZXcge1xuICBtb2RlbDtcbiAgY29udHJvbGxlcjtcblxuICBjb25zdHJ1Y3RvcihkZXBlbmRlbmNpZXMpIHtcbiAgICBpZiAoZGVwZW5kZW5jaWVzLm1vZGVsKSB7XG4gICAgICB0aGlzLm1vZGVsID0gZGVwZW5kZW5jaWVzLm1vZGVsO1xuICAgIH1cbiAgfVxuXG4gIHNldENvbnRyb2xsZXIoY29udHJvbGxlcikge1xuICAgIHRoaXMuY29udHJvbGxlciA9IGNvbnRyb2xsZXI7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgbWVudUxlZnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1lbnUtbGVmdFwiKTtcbiAgICBjb25zdCBtZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tZW51XCIpO1xuICAgIG1lbnVMZWZ0LnJlcGxhY2VDaGlsZCh0aGlzLmdldE1lbnVET00oKSwgbWVudSk7XG4gIH1cblxuICBnZXRNZW51RE9NKCkge1xuICAgIGNvbnN0IERFRkFVTFRfTElTVF9JVEVNX0lDT05fQ0xBU1NFUyA9IFtcImZhc1wiLCBcImZhLXRhc2tzXCJdO1xuXG4gICAgY29uc3QgbWVudSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgbWVudS5jbGFzc0xpc3QuYWRkKFwibWVudVwiKTtcblxuICAgIGNvbnN0IGxpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidWxcIik7XG4gICAgbGlzdC5jbGFzc0xpc3QuYWRkKFwiZmxleC1ncm93XCIpO1xuXG4gICAgbGV0IHByb2plY3RzID0gdGhpcy5tb2RlbC5nZXRQcm9qZWN0cygpO1xuXG4gICAgLy8gT3ZlcnZpZXcgYW5kIHByb2plY3RzXG4gICAgZm9yIChsZXQgcHJvamVjdCBvZiB0aGlzLm1vZGVsLmdldFByb2plY3RzKCkpIHtcbiAgICAgIC8vIGxldCB0YXNrc0Ftb3VudCA9IHRoaXMuY2FsY3VsYXRlUHJvamVjdFRhc2tzQW1vdW50KHByb2plY3QpO1xuICAgICAgaWYgKHByb2plY3QuaWQgPT09IDApIHtcbiAgICAgICAgbGlzdC5hcHBlbmRDaGlsZCh0aGlzLmdldE92ZXJ2aWV3TWVudUl0ZW0ocHJvamVjdCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGlzdC5hcHBlbmRDaGlsZChcbiAgICAgICAgICB0aGlzLmdldE1lbnVJdGVtKHByb2plY3QsIERFRkFVTFRfTElTVF9JVEVNX0lDT05fQ0xBU1NFUylcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBsaW5lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBsaW5lLmNsYXNzTGlzdC5hZGQoXCJsaW5lXCIpO1xuICAgIGxpc3QuYXBwZW5kQ2hpbGQobGluZSk7XG5cbiAgICAvLyBEb25lXG4gICAgY29uc3QgZG9uZSA9IHRoaXMuZ2V0TWVudUl0ZW0oeyB0aXRsZTogXCJEb25lXCIsIHRhc2tzOiBbXSB9LCBbXG4gICAgICBcImZhclwiLFxuICAgICAgXCJmYS1jYWxlbmRhci1jaGVja1wiLFxuICAgIF0pO1xuICAgIGxpc3QuYXBwZW5kQ2hpbGQoZG9uZSk7XG5cbiAgICBtZW51LmFwcGVuZENoaWxkKGxpc3QpO1xuXG4gICAgLy8gTG9nc1xuICAgIGNvbnN0IHB1c2hCb3R0b20gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidWxcIik7XG4gICAgcHVzaEJvdHRvbS5jbGFzc0xpc3QuYWRkKFwicHVzaC1ib3R0b21cIik7XG5cbiAgICBjb25zdCBsb2dzTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuICAgIGxvZ3NMaW5rLmhyZWYgPSBcIiNcIjtcbiAgICBsb2dzTGluay5jbGFzc0xpc3QuYWRkKFwibWVudS1pdGVtXCIpO1xuICAgIGNvbnN0IGxvZ3NMaW5rTGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgbG9nc0xpbmtMaS5pbm5lckhUTUwgPSBgPGkgY2xhc3M9J2ZhIGZhLWNvZyc+PC9pPiBMb2dzYDtcbiAgICBsb2dzTGluay5hcHBlbmRDaGlsZChsb2dzTGlua0xpKTtcbiAgICBwdXNoQm90dG9tLmFwcGVuZENoaWxkKGxvZ3NMaW5rKTtcblxuICAgIGNvbnN0IGxvZ291dExpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICBsb2dvdXRMaW5rLmhyZWYgPSBcIiNcIjtcbiAgICBsb2dvdXRMaW5rLmNsYXNzTGlzdC5hZGQoXCJtZW51LWl0ZW1cIik7XG4gICAgY29uc3QgbG9nb3V0TGlua0xpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgIGxvZ291dExpbmtMaS5pbm5lckhUTUwgPSBgPGkgY2xhc3M9J2ZhIGZhLXNpZ24tb3V0LWFsdCc+PC9pPiBMb2cgb3V0YDtcbiAgICBsb2dvdXRMaW5rLmFwcGVuZENoaWxkKGxvZ291dExpbmtMaSk7XG4gICAgcHVzaEJvdHRvbS5hcHBlbmRDaGlsZChsb2dvdXRMaW5rKTtcblxuICAgIG1lbnUuYXBwZW5kQ2hpbGQocHVzaEJvdHRvbSk7XG5cbiAgICByZXR1cm4gbWVudTtcbiAgfVxuXG4gIGNhbGN1bGF0ZVByb2plY3RUYXNrc0Ftb3VudChwcm9qZWN0KSB7XG4gICAgcmV0dXJuIHByb2plY3QudGFza3MucmVkdWNlKChhY2N1bXVsYXRvciwgY3VycmVudFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yICsgKGN1cnJlbnRWYWx1ZS5pc0NvbXBsZXRlID8gMCA6IDEpO1xuICAgIH0sIDApO1xuICB9XG5cbiAgZ2V0T3ZlcnZpZXdNZW51SXRlbShwcm9qZWN0KSB7XG4gICAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuICAgIGxpbmsuaHJlZiA9IFwiI1wiO1xuICAgIGxpbmsuc2V0QXR0cmlidXRlKFwiZGF0YS1tZW51LWluZGV4XCIsIHByb2plY3QuaWQpO1xuICAgIGxpbmsuY2xhc3NMaXN0LmFkZChcIm1lbnUtaXRlbVwiKTtcbiAgICBpZiAodGhpcy5tb2RlbC5nZXRDdXJyZW50UHJvamVjdElkKCkgPT09IHByb2plY3QuaWQpIHtcbiAgICAgIGxpbmsuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcbiAgICB9XG5cbiAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcblxuICAgIGNvbnN0IGZsZXhSb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGZsZXhSb3cuY2xhc3NMaXN0LnRvZ2dsZShcImZsZXgtcm93XCIpO1xuXG4gICAgY29uc3QgaWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpXCIpO1xuICAgIGljb24uY2xhc3NMaXN0LmFkZChcImZhXCIsIFwiZmEtaG9tZVwiKTtcblxuICAgIGNvbnN0IG1lbnVJdGVtVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgbWVudUl0ZW1UZXh0LmNsYXNzTGlzdC50b2dnbGUoXCJtZW51LWl0ZW0tdGV4dFwiKTtcblxuICAgIGNvbnN0IHByb2plY3RzQW1vdW50ID0gdGhpcy5tb2RlbC5nZXRQcm9qZWN0c0NvdW50KCk7XG4gICAgbWVudUl0ZW1UZXh0LmlubmVySFRNTCA9IGAke1xuICAgICAgcHJvamVjdC50aXRsZVxuICAgIH0gPHAgY2xhc3M9J3Rhc2tzLWFtb3VudCc+JHtwcm9qZWN0c0Ftb3VudH0gXG4gICAgJHtwcm9qZWN0c0Ftb3VudCA9PT0gMSA/IFwicHJvamVjdFwiIDogXCJwcm9qZWN0c1wifTwvcD5gO1xuXG4gICAgZmxleFJvdy5hcHBlbmRDaGlsZChpY29uKTtcbiAgICBmbGV4Um93LmFwcGVuZENoaWxkKG1lbnVJdGVtVGV4dCk7XG4gICAgbGkuYXBwZW5kQ2hpbGQoZmxleFJvdyk7XG4gICAgbGluay5hcHBlbmRDaGlsZChsaSk7XG5cbiAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgLy8gY2hhbmdlIHByb2plY3RcbiAgICAgIHRoaXMuY29udHJvbGxlci5jaGFuZ2VDdXJyZW50UHJvamVjdChwcm9qZWN0LmlkKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBsaW5rO1xuICB9XG5cbiAgZ2V0TWVudUl0ZW0ocHJvamVjdCwgaWNvbkNsYXNzZXNBcnJheSkge1xuICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICBsaW5rLmhyZWYgPSBcIiNcIjtcbiAgICBsaW5rLnNldEF0dHJpYnV0ZShcImRhdGEtbWVudS1pbmRleFwiLCBwcm9qZWN0LmlkKTtcbiAgICBsaW5rLmNsYXNzTGlzdC5hZGQoXCJtZW51LWl0ZW1cIik7XG4gICAgaWYgKHRoaXMubW9kZWwuZ2V0Q3VycmVudFByb2plY3RJZCgpID09PSBwcm9qZWN0LmlkKSB7XG4gICAgICBsaW5rLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XG4gICAgfVxuXG4gICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG5cbiAgICBjb25zdCBmbGV4Um93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBmbGV4Um93LmNsYXNzTGlzdC50b2dnbGUoXCJmbGV4LXJvd1wiKTtcblxuICAgIGNvbnN0IGljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaVwiKTtcbiAgICBpY29uLmNsYXNzTGlzdC5hZGQoLi4uaWNvbkNsYXNzZXNBcnJheSk7XG5cbiAgICBjb25zdCBtZW51SXRlbVRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIG1lbnVJdGVtVGV4dC5jbGFzc0xpc3QudG9nZ2xlKFwibWVudS1pdGVtLXRleHRcIik7XG5cbiAgICBpZiAocHJvamVjdC50YXNrcykge1xuICAgICAgY29uc3QgdG9kb1Rhc2tzID0gdGhpcy5jYWxjdWxhdGVQcm9qZWN0VGFza3NBbW91bnQocHJvamVjdCk7XG4gICAgICBtZW51SXRlbVRleHQuaW5uZXJIVE1MID0gYCR7XG4gICAgICAgIHByb2plY3QudGl0bGVcbiAgICAgIH0gPHAgY2xhc3M9J3Rhc2tzLWFtb3VudCc+JHt0b2RvVGFza3N9ICR7XG4gICAgICAgIHRvZG9UYXNrcyA9PT0gMSA/IFwiVGFza1wiIDogXCJUYXNrc1wiXG4gICAgICB9PC9wPmA7XG4gICAgfVxuXG4gICAgZmxleFJvdy5hcHBlbmRDaGlsZChpY29uKTtcbiAgICBmbGV4Um93LmFwcGVuZENoaWxkKG1lbnVJdGVtVGV4dCk7XG4gICAgbGkuYXBwZW5kQ2hpbGQoZmxleFJvdyk7XG4gICAgbGluay5hcHBlbmRDaGlsZChsaSk7XG5cbiAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgLy8gY2hhbmdlIHByb2plY3RcbiAgICAgIHRoaXMuY29udHJvbGxlci5jaGFuZ2VDdXJyZW50UHJvamVjdChwcm9qZWN0LmlkKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBsaW5rO1xuICB9XG59XG4iLCJpbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9BcHBcIjtcblxubGV0IGFwcCA9IG5ldyBBcHAoKTtcbmFwcC5pbml0KCk7XG4iLCJpbXBvcnQgeyBNb2RlbCB9IGZyb20gXCIuL21vZGVsL01vZGVsXCI7XG5pbXBvcnQgeyBEaXNwbGF5Q29udHJvbGxlciB9IGZyb20gXCIuL2NvbnRyb2xsZXIvRGlzcGxheUNvbnRyb2xsZXJcIjtcbmltcG9ydCB7IENvbnRlbnRWaWV3IH0gZnJvbSBcIi4vdmlldy9Db250ZW50Vmlld1wiO1xuaW1wb3J0IHsgTWVudVZpZXcgfSBmcm9tIFwiLi92aWV3L01lbnVWaWV3XCI7XG5cbmV4cG9ydCBjbGFzcyBBcHAge1xuICBtb2RlbDtcbiAgY29udHJvbGxlcjtcbiAgdmlldztcbiAgbWVudVZpZXc7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5tb2RlbCA9IG5ldyBNb2RlbCgpO1xuICAgIFxuICAgIHRoaXMubWVudVZpZXcgPSBuZXcgTWVudVZpZXcoeyBtb2RlbDogdGhpcy5tb2RlbCB9KTtcbiAgICBcbiAgICB0aGlzLnZpZXcgPSBuZXcgQ29udGVudFZpZXcoeyBtZW51VmlldzogdGhpcy5tZW51VmlldyB9KTtcbiAgICB0aGlzLnZpZXcuc2V0TW9kZWwodGhpcy5tb2RlbCk7XG5cbiAgICB0aGlzLmNvbnRyb2xsZXIgPSBuZXcgRGlzcGxheUNvbnRyb2xsZXIoe1xuICAgICAgdmlldzogdGhpcy52aWV3LFxuICAgICAgbW9kZWw6IHRoaXMubW9kZWwsXG4gICAgfSk7XG5cbiAgICB0aGlzLnZpZXcuc2V0Q29udHJvbGxlcih0aGlzLmNvbnRyb2xsZXIpO1xuXG4gICAgdGhpcy5tZW51Vmlldy5zZXRDb250cm9sbGVyKHRoaXMuY29udHJvbGxlcik7XG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMuY29udHJvbGxlci5pbml0KCk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJJRFN1cHBsaWVyIiwidmFsdWUiLCJzZXRTdGFydGluZ1ZhbHVlIiwidGhpcyIsImdldElEIiwicmVzZXQiLCJzdGFydGluZ0luZGV4IiwiVGFzayIsImNyZWF0ZWREYXRlIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsImR1ZURhdGUiLCJwcmlvcml0eSIsImlzQ29tcGxldGUiLCJpc0NvbGxhcHNlZCIsImxvZyIsIm5vdGVzIiwiY2hlY2tsaXN0IiwiY29uc3RydWN0b3IiLCJpZCIsInN0YXRpYyIsIm5leHRJbmRleCIsIkRhdGUiLCJtYXJrQXNDb21wbGV0ZSIsIm1hcmtBc05vdENvbXBsZXRlIiwidG9nZ2xlQ29tcGxldGUiLCJzZXRJc0NvbGxhcHNlZCIsInRvZ2dsZUlzQ29sbGFwc2VkIiwiZ2V0RE9NRWxlbWVudCIsImJhY2tncm91bmRDb2xvckNsYXNzIiwiYm9yZGVyQ29sb3JDbGFzcyIsIlByaW9yaXR5VHlwZSIsIkRFRkFVTFQiLCJISUdIIiwiTUVESVVNIiwiTE9XIiwidGFza0VsZW1lbnQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJzZXRBdHRyaWJ1dGUiLCJ0YXNrQ29udGVudCIsImNoZWNrYm94SW5wdXQiLCJhcHBlbmRDaGlsZCIsImNoZWNrYm94V3JhcHBlciIsImxhYmVsIiwic3BhbkNoZWNrYm94Iiwic3BhbkNoZWNrIiwidGFza1RleHQiLCJ0ZXh0Q29udGVudCIsInRhc2tEZXRhaWxzIiwidGFza0Rlc2NyaXB0aW9uIiwiZmxleFJvdzEiLCJVdGlscyIsImNhcGl0YWxpemUiLCJpbm5lckhUTUwiLCJ0YXNrTWVudSIsImNoZXZyb25JY29uIiwibW9yZUljb24iLCJtb3JlTWVudSIsImxpc3QiLCJlZGl0TGlzdEl0ZW0iLCJkZWxldGVMaXN0SXRlbSIsInNhbXBsZURhdGEiLCJwcm9qZWN0cyIsInRhc2tzIiwiZG9uZSIsImxvZ3MiLCJNb2RlbCIsImN1cnJlbnRQcm9qZWN0IiwiY3VycmVudFByb2plY3RJZCIsImRhdGEiLCJwcm9qZWN0SURTdXBwbGllciIsImluaXQiLCJsZW5ndGgiLCJzdGFydGluZ0lkZW50aWZpZXIiLCJnZXRJbml0aWFsUHJvamVjdCIsInNldEN1cnJlbnRQcm9qZWN0IiwicHJvamVjdCIsInNldEN1cnJlbnRQcm9qZWN0SWQiLCJwcm9qZWN0SWQiLCJmaWx0ZXIiLCJwYXJzZUludCIsImdldFByb2plY3RCeUlkIiwiZ2V0Q3VycmVudFByb2plY3QiLCJnZXRDdXJyZW50UHJvamVjdElkIiwiZ2V0UHJvamVjdHMiLCJnZXREYXRhIiwiZ2V0UHJvamVjdE92ZXJ2aWV3IiwibWFwIiwicHVzaCIsIm5hbWUiLCJjYWxjdWxhdGVUYXNrcyIsImdldFByb2plY3RzQ291bnQiLCJyZWR1Y2UiLCJhY2MiLCJjdXJyZW50IiwiZ2V0VGFza0J5SWQiLCJ0YXNrIiwiZG9uZVRhc2siLCJjb25zb2xlIiwiZXJyb3IiLCJzZXRUYXNrQXNDb21wbGV0ZSIsImFkZFRhc2siLCJ1bnNoaWZ0Iiwic2V0VGFza0lzQ29tcGxldGUiLCJ0YXNrSWQiLCJyZW1vdmVGcm9tIiwiYWRkVG8iLCJ0YXNrSW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiZGVsZXRlVGFza0J5SWQiLCJpbmRleCIsImRvbmVJbmRleCIsImFkZFByb2plY3QiLCJyZXF1aXJlZEFyZ3MiLCJyZXF1aXJlZCIsImFyZ3MiLCJUeXBlRXJyb3IiLCJ0b0RhdGUiLCJhcmd1bWVudCIsImFyZ3VtZW50cyIsImFyZ1N0ciIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsImdldFRpbWUiLCJ3YXJuIiwiRXJyb3IiLCJzdGFjayIsIk5hTiIsImlzQWZ0ZXIiLCJkaXJ0eURhdGUiLCJkaXJ0eURhdGVUb0NvbXBhcmUiLCJkYXRlIiwiZGF0ZVRvQ29tcGFyZSIsIk5ld1Rhc2tNb2RhbFZhbGlkYXRpb25Db250cm9sbGVyIiwidmFsaWRhdGlvbk1lc3NhZ2VzIiwiaXNGb3JtRW1wdHkiLCJ2YWxpZFRhc2siLCJmb3JtIiwicXVlcnlTZWxlY3RvciIsInJlc2V0VmFsaWRhdGlvbk1lc3NhZ2VzIiwiYWRkQmx1ckV2ZW50TGlzdGVuZXJzIiwiY2xlYXJWYWxpZGF0aW9uTWVzc2FnZXMiLCJpc1ZhbGlkIiwidmFsaWRhdGVJbnB1dHMiLCJtc2ciLCJ2YWxpZGF0ZVRpdGxlSW5wdXQiLCJ2YWxpZGF0ZURlc2NyaXB0aW9uSW5wdXQiLCJ2YWxpZGF0ZUR1ZURhdGVJbnB1dCIsInZhbGlkYXRpb25Nc2dTcGFuIiwiaW5jbHVkZXMiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJnZXRUYXNrIiwiZ2V0UHJpb3JpdHlWYWx1ZSIsIk5ld1Byb2plY3RGb3JtVmFsaWRhdGlvbkNvbnRyb2xsZXIiLCJ2YWxpZFByb2plY3QiLCJnZXRQcm9qZWN0IiwiRGlzcGxheUNvbnRyb2xsZXIiLCJjb250ZW50IiwidGFza0NvbnRyb2xsZXIiLCJ2aWV3IiwibW9kZWwiLCJmb3JtVmFsaWRhdGlvbiIsImRlcGVuZGVuY2llcyIsInByb2plY3RGb3JtVmFsaWRhdGlvbiIsImF0dGFjaEV2ZW50TGlzdGVuZXJzIiwicmVuZGVyIiwiY2hhbmdlQ3VycmVudFByb2plY3QiLCJuZXdUYXNrQnRuIiwic2V0VGltZW91dCIsImFkZE5ld0xpc3RFbGVtZW50c0V2ZW50TGlzdGVuZXJzIiwicmVtb3ZlIiwiYWRkT3ZlcnZpZXdQYWdlRXZlbnRMaXN0ZW5lcnMiLCJhZGRTaG93TmV3VGFza01vZGFsRXZlbnRMaXN0ZW5lciIsImFkZEhpZGVOZXdUYXNrTW9kYWxFdmVudExpc3RlbmVyIiwiYWRkTmV3VGFza1N1Ym1pdExpc3RlbmVyIiwiYWRkVG9nZ2xlRGFya01vZGVDbGlja0xpc3RlbmVyIiwiYWRkVG9nZ2xlQ29tcGxldGVFdmVudExpc3RlbmVyIiwiYWRkVGFza0RldGFpbHNUb2dnbGVFdmVudExpc3RlbmVycyIsImFkZEV4cGFuZEhpZGVBbGxFdmVudExpc3RlbmVyIiwiYWRkVG9nZ2xlTW9yZU1lbnVMaXN0ZW5lciIsImFkZERlbGV0ZVRhc2tDbGlja0xpc3RlbmVyIiwiYWRkRWRpdFRhc2tDbGlja0xpc3RlbmVyIiwiYWRkSGlkZURlbGV0ZVRhc2tNb2RhbEV2ZW50TGlzdGVuZXIiLCJhZGRDb25maXJtRGVsZXRlVGFza0J1dHRvbkNsaWNrTGlzdGVuZXIiLCJjaGVja2JveGVzIiwiY2hlY2tib3giLCJ0YXJnZXQiLCJzcGxpdCIsInRvZ2dsZVRhc2tDb21wbGV0ZSIsImNoZWNrZWQiLCJidXR0b25zIiwiYnV0dG9uIiwicGFyZW50Tm9kZSIsInRvZ2dsZVRhc2tEZXRhaWxzIiwidG9nZ2xlIiwiaWNvbiIsImdldEF0dHJpYnV0ZSIsImJ0biIsIlN0cmluZyIsImlubmVyVGV4dCIsInRyaW0iLCJhbGxFeHBhbmRlZCIsInNob3dUYXNrRGV0YWlscyIsImhpZGVUYXNrRGV0YWlscyIsInRhc2tFbCIsImNoZXZyb24iLCJtb2RhbFdyYXBwZXIiLCJzaG93TmV3VGFza01vZGFsIiwicmVzZXRNb2RhbEZvcm0iLCJ3aW5kb3ciLCJzY3JvbGxUbyIsInN0b3BQcm9wYWdhdGlvbiIsImNvbnRhaW5zIiwiYW5pbWF0ZU1vZGFsQ2xvc2luZyIsIndyYXBwZXIiLCJtb2RhbCIsInByZXZlbnREZWZhdWx0Iiwic3VibWl0TmV3VGFza01vZGFsIiwiYnRucyIsIm1lbnUiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJtZW51cyIsImRlbGV0ZUJ0bnMiLCJwYXJlbnRFbGVtZW50IiwiaGFuZGxlRGVsZXRlVGFzayIsImJpbmQiLCJmb3JFYWNoIiwiaXRlbSIsImNvbmZpcm1EZWxldGluZ1Rhc2siLCJkZWxldGVUYXNrIiwic2hvd0NvbmZpcm1EZWxldGVNb2RhbCIsImNvbmZpcm1CdXR0b24iLCJhbmltYXRlRGVsZXRlVGFza01vZGFsQ2xvc2luZyIsImVkaXRCdG5zIiwiaGFuZGxlRWRpdFRhc2siLCJhZGRQcm9qZWN0VGlsZUNsaWNrTGlzdGVuZXIiLCJhZGROZXdQcm9qZWN0QnV0dG9uTGlzdGVuZXIiLCJhZGRIaWRlTmV3UHJvamVjdE1vZGFsRXZlbnRMaXN0ZW5lciIsImFkZE5ld1Byb2plY3RTdWJtaXRMaXN0ZW5lciIsInRpbGUiLCJvcGVuTmV3UHJvamVjdE1vZGFsIiwicmVzZXROZXdQcm9qZWN0TW9kYWxGb3JtIiwiYW5pbWF0ZU5ld1Byb2plY3RNb2RhbENsb3NpbmciLCJzdWJtaXROZXdQcm9qZWN0TW9kYWwiLCJpc0RhdGUiLCJpc05hTiIsIk51bWJlciIsImZvcm1hdERpc3RhbmNlTG9jYWxlIiwibGVzc1RoYW5YU2Vjb25kcyIsIm9uZSIsIm90aGVyIiwieFNlY29uZHMiLCJoYWxmQU1pbnV0ZSIsImxlc3NUaGFuWE1pbnV0ZXMiLCJ4TWludXRlcyIsImFib3V0WEhvdXJzIiwieEhvdXJzIiwieERheXMiLCJhYm91dFhXZWVrcyIsInhXZWVrcyIsImFib3V0WE1vbnRocyIsInhNb250aHMiLCJhYm91dFhZZWFycyIsInhZZWFycyIsIm92ZXJYWWVhcnMiLCJhbG1vc3RYWWVhcnMiLCJidWlsZEZvcm1hdExvbmdGbiIsIm9wdGlvbnMiLCJ1bmRlZmluZWQiLCJ3aWR0aCIsImRlZmF1bHRXaWR0aCIsImZvcm1hdCIsImZvcm1hdHMiLCJmb3JtYXRMb25nIiwiZnVsbCIsImxvbmciLCJtZWRpdW0iLCJzaG9ydCIsInRpbWUiLCJkYXRlVGltZSIsImZvcm1hdFJlbGF0aXZlTG9jYWxlIiwibGFzdFdlZWsiLCJ5ZXN0ZXJkYXkiLCJ0b2RheSIsInRvbW9ycm93IiwibmV4dFdlZWsiLCJidWlsZExvY2FsaXplRm4iLCJkaXJ0eUluZGV4IiwiZGlydHlPcHRpb25zIiwidmFsdWVzQXJyYXkiLCJjb250ZXh0IiwiZm9ybWF0dGluZ1ZhbHVlcyIsImRlZmF1bHRGb3JtYXR0aW5nV2lkdGgiLCJfZGVmYXVsdFdpZHRoIiwiX3dpZHRoIiwidmFsdWVzIiwiYXJndW1lbnRDYWxsYmFjayIsImJ1aWxkTWF0Y2hGbiIsInN0cmluZyIsIm1hdGNoUGF0dGVybiIsIm1hdGNoUGF0dGVybnMiLCJkZWZhdWx0TWF0Y2hXaWR0aCIsIm1hdGNoUmVzdWx0IiwibWF0Y2giLCJtYXRjaGVkU3RyaW5nIiwicGFyc2VQYXR0ZXJucyIsImRlZmF1bHRQYXJzZVdpZHRoIiwia2V5IiwiQXJyYXkiLCJpc0FycmF5IiwiZmluZEluZGV4IiwicGF0dGVybiIsInRlc3QiLCJmaW5kS2V5IiwidmFsdWVDYWxsYmFjayIsInJlc3QiLCJzbGljZSIsIm9iamVjdCIsInByZWRpY2F0ZSIsImhhc093blByb3BlcnR5IiwiYXJyYXkiLCJjb2RlIiwiZm9ybWF0RGlzdGFuY2UiLCJ0b2tlbiIsImNvdW50IiwicmVzdWx0IiwidG9rZW5WYWx1ZSIsInJlcGxhY2UiLCJhZGRTdWZmaXgiLCJjb21wYXJpc29uIiwiZm9ybWF0UmVsYXRpdmUiLCJfZGF0ZSIsIl9iYXNlRGF0ZSIsIl9vcHRpb25zIiwibG9jYWxpemUiLCJvcmRpbmFsTnVtYmVyIiwiZGlydHlOdW1iZXIiLCJudW1iZXIiLCJyZW0xMDAiLCJlcmEiLCJuYXJyb3ciLCJhYmJyZXZpYXRlZCIsIndpZGUiLCJxdWFydGVyIiwibW9udGgiLCJkYXkiLCJkYXlQZXJpb2QiLCJhbSIsInBtIiwibWlkbmlnaHQiLCJub29uIiwibW9ybmluZyIsImFmdGVybm9vbiIsImV2ZW5pbmciLCJuaWdodCIsInBhcnNlUGF0dGVybiIsInBhcnNlUmVzdWx0IiwiYW55Iiwid2Vla1N0YXJ0c09uIiwiZmlyc3RXZWVrQ29udGFpbnNEYXRlIiwidG9JbnRlZ2VyIiwiTWF0aCIsImNlaWwiLCJmbG9vciIsImFkZE1pbGxpc2Vjb25kcyIsImRpcnR5QW1vdW50IiwidGltZXN0YW1wIiwiYW1vdW50Iiwic3ViTWlsbGlzZWNvbmRzIiwiTUlMTElTRUNPTkRTX0lOX0RBWSIsInN0YXJ0T2ZVVENJU09XZWVrIiwiZ2V0VVRDRGF5IiwiZGlmZiIsInNldFVUQ0RhdGUiLCJnZXRVVENEYXRlIiwic2V0VVRDSG91cnMiLCJnZXRVVENJU09XZWVrWWVhciIsInllYXIiLCJnZXRVVENGdWxsWWVhciIsImZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIiLCJzZXRVVENGdWxsWWVhciIsInN0YXJ0T2ZOZXh0WWVhciIsImZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIiLCJzdGFydE9mVGhpc1llYXIiLCJzdGFydE9mVVRDSVNPV2Vla1llYXIiLCJmb3VydGhPZkphbnVhcnkiLCJNSUxMSVNFQ09ORFNfSU5fV0VFSyIsInN0YXJ0T2ZVVENXZWVrIiwibG9jYWxlIiwibG9jYWxlV2Vla1N0YXJ0c09uIiwiZGVmYXVsdFdlZWtTdGFydHNPbiIsIlJhbmdlRXJyb3IiLCJnZXRVVENXZWVrWWVhciIsImxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsImRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUiLCJmaXJzdFdlZWtPZk5leHRZZWFyIiwiZmlyc3RXZWVrT2ZUaGlzWWVhciIsInN0YXJ0T2ZVVENXZWVrWWVhciIsImZpcnN0V2VlayIsImFkZExlYWRpbmdaZXJvcyIsInRhcmdldExlbmd0aCIsInNpZ24iLCJvdXRwdXQiLCJhYnMiLCJzaWduZWRZZWFyIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwibnVtYmVyT2ZEaWdpdHMiLCJtaWxsaXNlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJwb3ciLCJmb3JtYXRUaW1lem9uZVNob3J0Iiwib2Zmc2V0IiwiZGlydHlEZWxpbWl0ZXIiLCJhYnNPZmZzZXQiLCJob3VycyIsIm1pbnV0ZXMiLCJkZWxpbWl0ZXIiLCJmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXMiLCJmb3JtYXRUaW1lem9uZSIsIkciLCJ5IiwidW5pdCIsImxpZ2h0Rm9ybWF0dGVycyIsIlkiLCJzaWduZWRXZWVrWWVhciIsIndlZWtZZWFyIiwiUiIsInUiLCJRIiwicSIsIk0iLCJMIiwidyIsIndlZWsiLCJyb3VuZCIsImdldFVUQ1dlZWsiLCJJIiwiaXNvV2VlayIsImdldFVUQ0lTT1dlZWsiLCJkIiwiRCIsImRheU9mWWVhciIsInNldFVUQ01vbnRoIiwic3RhcnRPZlllYXJUaW1lc3RhbXAiLCJkaWZmZXJlbmNlIiwiZ2V0VVRDRGF5T2ZZZWFyIiwiRSIsImRheU9mV2VlayIsImxvY2FsRGF5T2ZXZWVrIiwiYyIsImkiLCJpc29EYXlPZldlZWsiLCJhIiwiZGF5UGVyaW9kRW51bVZhbHVlIiwidG9Mb3dlckNhc2UiLCJiIiwiQiIsImgiLCJIIiwiSyIsImsiLCJtIiwicyIsIlMiLCJYIiwiX2xvY2FsaXplIiwidGltZXpvbmVPZmZzZXQiLCJfb3JpZ2luYWxEYXRlIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJ4IiwiTyIsInoiLCJ0Iiwib3JpZ2luYWxEYXRlIiwiVCIsImRhdGVMb25nRm9ybWF0dGVyIiwidGltZUxvbmdGb3JtYXR0ZXIiLCJsb25nRm9ybWF0dGVycyIsInAiLCJQIiwiZGF0ZVRpbWVGb3JtYXQiLCJkYXRlUGF0dGVybiIsInRpbWVQYXR0ZXJuIiwiZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyIsInV0Y0RhdGUiLCJVVEMiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMiLCJwcm90ZWN0ZWRXZWVrWWVhclRva2VucyIsImlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4iLCJpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4iLCJ0aHJvd1Byb3RlY3RlZEVycm9yIiwiaW5wdXQiLCJjb25jYXQiLCJmb3JtYXR0aW5nVG9rZW5zUmVnRXhwIiwibG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHAiLCJlc2NhcGVkU3RyaW5nUmVnRXhwIiwiZG91YmxlUXVvdGVSZWdFeHAiLCJ1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCIsImNsZWFuRXNjYXBlZFN0cmluZyIsImNvbXBhcmVBc2MiLCJkaXJ0eURhdGVMZWZ0IiwiZGlydHlEYXRlUmlnaHQiLCJkYXRlTGVmdCIsImRhdGVSaWdodCIsImRpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzIiwieWVhckRpZmYiLCJtb250aERpZmYiLCJlbmRPZkRheSIsInNldEhvdXJzIiwiZW5kT2ZNb250aCIsInNldEZ1bGxZZWFyIiwiaXNMYXN0RGF5T2ZNb250aCIsImRpZmZlcmVuY2VJbk1vbnRocyIsInNldERhdGUiLCJzZXRNb250aCIsImlzTGFzdE1vbnRoTm90RnVsbCIsImRpZmZlcmVuY2VJbk1pbGxpc2Vjb25kcyIsInJvdW5kaW5nTWFwIiwidHJ1bmMiLCJnZXRSb3VuZGluZ01ldGhvZCIsIm1ldGhvZCIsImRpZmZlcmVuY2VJblNlY29uZHMiLCJyb3VuZGluZ01ldGhvZCIsImNsb25lT2JqZWN0IiwiZGlydHlPYmplY3QiLCJwcm9wZXJ0eSIsIk1JTlVURVNfSU5fREFZIiwiTUlOVVRFU19JTl9NT05USCIsIkNvbnRlbnRWaWV3IiwiY29udGFpbmVyIiwiY29udHJvbGxlciIsIm1lbnVWaWV3Iiwic2V0Q29udHJvbGxlciIsInNldFByb2plY3QiLCJzZXRNb2RlbCIsInVwZGF0ZVByb2plY3QiLCJyZW5kZXJNZW51IiwicmVuZGVyT3ZlcnZpZXciLCJyZW5kZXJUYXNrc0xpc3QiLCJjbGVhckNvbnRhaW5lciIsImZsZXhSb3ciLCJ0ZXh0IiwicHJvamVjdEdyaWRXcmFwcGVyIiwicHJvamVjdEdyaWQiLCJnZXRQcm9qZWN0R3JpZEl0ZW0iLCJnZXROZXdQcm9qZWN0R3JpZEJ1dHRvbiIsImVsZW1lbnQiLCJiZyIsInRhc2tDb3VudCIsImNyZWF0ZVByb2plY3RUaXRsZUFuZE1lbnUiLCJjcmVhdGVQcm9qZWN0RGVzY3JpcHRpb24iLCJjcmVhdGVUYXNrcyIsInJlbW92ZUNoaWxkIiwiaGVhZGluZyIsIm1lbnUxIiwic2VjdGlvblRvZG8iLCJoZWFkaW5nVG9kbyIsImV4cGFuZEFsbCIsImV4cGFuZEFsbFNwYW4iLCJnZXRUYXNrRE9NRWxlbWVudCIsImhlYWRpbmdEb25lIiwiZG9uZUZvcm0iLCJzdHIiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsImR1ZURhdGVTdHJpbmciLCJkaXJ0eUZvcm1hdFN0ciIsImZvcm1hdFN0ciIsImZvcm1hdHRlck9wdGlvbnMiLCJzdWJzdHJpbmciLCJmaXJzdENoYXJhY3RlciIsImxvbmdGb3JtYXR0ZXIiLCJqb2luIiwiZm9ybWF0dGVyIiwidXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zIiwidXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucyIsImR1ZUluIiwiZGlzdGFuY2UiLCJkaXJ0eUJhc2VEYXRlIiwibG9jYWxpemVPcHRpb25zIiwiQm9vbGVhbiIsIm1vbnRocyIsInNlY29uZHMiLCJvZmZzZXRJblNlY29uZHMiLCJpbmNsdWRlU2Vjb25kcyIsImRheXMiLCJuZWFyZXN0TW9udGgiLCJtb250aHNTaW5jZVN0YXJ0T2ZZZWFyIiwieWVhcnMiLCJNZW51VmlldyIsIm1lbnVMZWZ0IiwicmVwbGFjZUNoaWxkIiwiZ2V0TWVudURPTSIsIkRFRkFVTFRfTElTVF9JVEVNX0lDT05fQ0xBU1NFUyIsImdldE92ZXJ2aWV3TWVudUl0ZW0iLCJnZXRNZW51SXRlbSIsImxpbmUiLCJwdXNoQm90dG9tIiwibG9nc0xpbmsiLCJocmVmIiwibG9nc0xpbmtMaSIsImxvZ291dExpbmsiLCJsb2dvdXRMaW5rTGkiLCJjYWxjdWxhdGVQcm9qZWN0VGFza3NBbW91bnQiLCJhY2N1bXVsYXRvciIsImN1cnJlbnRWYWx1ZSIsImxpbmsiLCJsaSIsIm1lbnVJdGVtVGV4dCIsInByb2plY3RzQW1vdW50IiwiaWNvbkNsYXNzZXNBcnJheSIsInRvZG9UYXNrcyJdLCJzb3VyY2VSb290IjoiIn0=
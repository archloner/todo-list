(()=>{"use strict";let e=0;class t{createdDate;title;description;dueDate;priority;isComplete;log;notes;checklist;constructor(t,n,a,i){this.id=class{static nextIndex(){return e++}static reset(){e=0}}.nextIndex(),this.title=t,this.description=n,this.dueDate=a,this.priority=i,this.createdDate=new Date,this.isComplete=!1,this.notes=null,this.checklist=[],this.log=[]}isComplete(){return!0===isComplete}markAsComplete(){this.isComplete=!0}markAsNotComplete(){this.isComplete=!1}getDOMElement(){let e,t;switch(this.priority){case PriorityType.DEFAULT:e="bg-light",t="priority-default-border";break;case PriorityType.HIGH:e="bg-danger",t="priority-high-border";break;case PriorityType.MEDIUM:e="bg-medium",t="priority-medium-border";break;case PriorityType.LOW:e="bg-low",t="priority-low-border"}const n=document.createElement("div");n.classList.add("task",t),n.setAttribute("data-index",this.id);const a=document.createElement("div");a.classList.add("task-content");const i=document.createElement("input");i.setAttribute("type","checkbox"),this.isComplete&&i.setAttribute("checked",""),i.id=`task-${this.id}`,a.appendChild(i);const r=document.createElement("div");r.classList.add("checkbox-wrapper");const o=document.createElement("label");o.setAttribute("for",`task-${this.id}`);const s=document.createElement("span");s.classList.add("checkbox");const d=document.createElement("span");d.classList.add("check"),s.appendChild(d),o.appendChild(s),r.appendChild(o),a.appendChild(r);const c=document.createElement("div");c.classList.add("task-text");const l=document.createElement("div");l.classList.add("title"),l.textContent=this.title,c.appendChild(l);const u=document.createElement("div");u.classList.add("task-details","hide");const m=document.createElement("div");m.classList.add("description","font-sm"),m.textContent=this.description;const h=document.createElement("div");h.classList.add("flex-row");const p=document.createElement("div");p.classList.add("priority",e,"font-sm"),p.textContent=Utils.capitalize(this.priority);const g=document.createElement("div");g.classList.add("due-date","font-sm"),g.innerHTML=`Due date <span class='date'>${this.dueDate}</span>`,u.appendChild(m),h.appendChild(p),h.appendChild(g),u.appendChild(h),c.appendChild(u),a.appendChild(c),n.appendChild(a);const f=document.createElement("div");f.classList.add("task-menu");const w=document.createElement("i");w.classList.add("fas","fa-chevron-down","icon","chevron"),f.appendChild(w);const v=document.createElement("i");v.classList.add("fas","fa-ellipsis-v","icon","more"),f.appendChild(v);const C=document.createElement("more-menu");C.classList.add("more-menu","hide");const k=document.createElement("ul"),b=document.createElement("li");b.classList.add("more-menu-option","edit"),b.innerHTML="<i class='far fa-edit icon'></i> Edit";const y=document.createElement("li");return y.classList.add("more-menu-option","delete"),y.innerHTML="<i class='far fa-trash-alt icon'></i> Delete",k.appendChild(b),k.appendChild(y),C.appendChild(k),f.appendChild(C),n.appendChild(f),n}}class n{static LOW="low";static MEDIUM="medium";static HIGH="high";static DEFAULT="default"}const a={projects:[{id:0,title:"Overview",description:"Look at all your projects and choose which one you want to check"},{id:1,title:"Website redesign",description:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ",tasks:[new t("Update about page header","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,1,20),n.DEFAULT),new t("Fix bug in deployment script","Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,19),n.MEDIUM),new t("Update contact page header","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,1,20),n.DEFAULT),new t("About page wording","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,22),n.HIGH),new t("New landing page layout","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,17),n.MEDIUM),new t("Update global iconset","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,1,27),n.LOW),new t("New case study thumbnails","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,28),n.DEFAULT)],done:[],todoCount:0},{id:2,title:"Groceries",description:"List of groceries to buy on the nearest trip to the shop. Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit.",tasks:[new t("Buy Pizza","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,30),n.HIGH),new t("Tomatoes","Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,30),n.DEFAULT)],done:[]},{id:3,title:"Workout",description:"Exercises to do to stay fit. Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit.",tasks:[new t("50 BrzuszkÃ³w","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,30),n.DEFAULT),new t("50 Pompek","Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,30),n.DEFAULT)],done:[]},{id:4,title:"Reading",description:"List of books to read. Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit.",tasks:[new t("Lord of The Rings: The Fellowship of the Ring","Lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,30),n.MEDIUM),new t("Do Androids Dream of Electric Sheep","Lorem ipsum dolor sit amet, consectetur adipiscing elit, lorem ipsum dolor sit amet, consectetur adipiscing elit",new Date(2022,0,30),n.LOW)],done:[]}]};class i{currentProject;currentProjectId;projects;data;constructor(){this.data=a,this.projects=this.data.projects,this.currentProject=this.getInitialProject(),this.currentProjectId=0}setCurrentProject(e){this.currentProject=e}setCurrentProjectId(e){this.currentProject=this.projects.filter((t=>t.id===e))[0],this.currentProjectId=parseInt(e),this.setCurrentProject(this.getProjectById(this.currentProjectId))}getCurrentProject(){return this.currentProject}getCurrentProjectId(){return this.currentProjectId}getProjects(){return this.data.projects}getProjectById(e){const t=this.data.projects.filter((t=>t.id===e))[0];return console.log(t),t}getProjectOverview(){let e=[];return this.data.projects.map((t=>{0!==t.id&&e.push({name:t.title,id:t.id,tasks:this.calculateTasks(t.tasks)})})),e}getProjectsCount(){return this.getProjectOverview().length}calculateTasks(e){return e.reduce(((e,t)=>e+(t.isComplete?0:1)),0)}getData(){return this.data}getInitialProject(){return this.projects.filter((e=>0===e.id))[0]}setTaskAsComplete(e){e.isComplete=!0}addTask(e){this.currentProject.tasks.unshift(e)}setTaskIsComplete(e,t){let n,a;!0===t?(n=this.currentProject.tasks,a=this.currentProject.done):(n=this.currentProject.done,a=this.currentProject.tasks);const i=n.filter((t=>t.id===e))[0];i.isComplete=t;const r=n.indexOf(i);n.splice(r,1),a.unshift(i)}}function r(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function o(e){r(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function s(e,t){r(2,arguments);var n=o(e),a=o(t);return n.getTime()>a.getTime()}class d{validationMessages;isFormEmpty;validTask;form=document.querySelector(".new-task-modal");constructor(){this.validTask={},this.isFormEmpty=!0,this.init()}init(){this.resetValidationMessages(),this.addBlurEventListeners()}resetValidationMessages(){this.validationMessages={title:[],description:[],dueDate:[]},this.clearValidationMessages()}isValid(){this.validateInputs();for(let e in this.validationMessages)if(0!==this.validationMessages[e].length)return!1;return!0}validateInputs(){this.validateTitleInput(),this.validateDescriptionInput(),this.validateDueDateInput()}validateTitleInput(){const e=this.form.querySelector("#task-title").value,t=this.form.querySelector("#form-label-title .validation-msg");if(t.textContent="",e)this.validTask.title=e;else{const e="*  Please enter task title";this.validationMessages.title.includes(e)||this.validationMessages.title.push(e),t.textContent=e}}validateDescriptionInput(){const e=this.form.querySelector("#task-description").value,t=this.form.querySelector("#form-label-description .validation-msg");if(t.textContent="",e)this.validTask.description=e;else{const e="* Please enter task description";this.validationMessages.description.includes(e)||this.validationMessages.description.push(e),t.textContent=e}}validateDueDateInput(){const e=this.form.querySelector("#task-due-date").value,t=this.form.querySelector("#form-label-due-date .validation-msg");if(t.textContent="",e&&s(new Date(e),new Date))this.validTask.dueDate=new Date(e);else{const e="* Please enter task due date that's in the future";this.validationMessages.dueDate.includes(e)||this.validationMessages.dueDate.push(e),t.textContent=e}}addBlurEventListeners(){this.form.querySelector("#task-title").addEventListener("blur",(e=>{this.validateTitleInput()})),this.form.querySelector("#task-description").addEventListener("blur",(e=>{this.validateDescriptionInput()})),this.form.querySelector("#task-due-date").addEventListener("input",(e=>{this.validateDueDateInput()}))}clearValidationMessages(){const e=document.querySelectorAll(".validation-msg");for(let t of e)t.textContent=""}getTask(){const e=new t(this.validTask.title,this.validTask.description,this.validTask.dueDate);return e.priority=this.getPriorityValue(),e}getPriorityValue(){return this.form.querySelector('#new-task-form input[type="radio"]:checked').value}}class c{content;taskController;view;model;formValidation;constructor(e){this.content=document.querySelector(".wrapper"),this.formValidation=new d,e.view&&(this.view=e.view),e.model&&(this.model=e.model)}init(){this.attachEventListeners(),this.render()}getCurrentProject(){return this.model.getCurrentProject()}changeCurrentProject(e){console.log(e),this.model.setCurrentProjectId(e),this.render()}render(){this.view.render(),setTimeout((()=>{0!==this.model.getCurrentProjectId()?this.addNewListElementsEventListeners():this.addOverviewPageEventListeners()}),500)}attachEventListeners(){this.addShowNewTaskModalEventListener(),this.addHideNewTaskModalEventListener(),this.addNewTaskSubmitListener(),this.addToggleDarkModeClickListener()}addNewListElementsEventListeners(){this.addToggleCompleteEventListener(),this.addTaskDetailsToggleEventListeners(),this.addExpandHideAllEventListener(),this.addToggleMoreMenuListener(),this.addDeleteTaskClickListener(),this.addEditTaskClickListener()}addToggleCompleteEventListener(){const e=document.querySelectorAll('input[type="checkbox"]');for(let t of e)t.addEventListener("change",(e=>{const t=parseInt(e.target.id.split("-")[1]);this.toggleTaskComplete(t,e.target.checked)}))}toggleTaskComplete(e,t){console.log("toggle task complete"),this.model.setTaskIsComplete(e,t),this.render()}addTaskDetailsToggleEventListeners(){const e=document.querySelectorAll(".task-menu .fa-chevron-down");for(let t of e)t.addEventListener("click",(e=>{const t=e.target.parentNode.parentNode;this.toggleTaskDetails(t)}))}toggleTaskDetails(e){if(e){e.querySelector(".task-details").classList.toggle("hide");const t=e.querySelector(".icon");t.classList.toggle("fa-chevron-up"),t.classList.toggle("fa-chevron-down")}}addExpandHideAllEventListener(){const e="Expand all",t=document.querySelector("#expand-all-hide-all-span");t.addEventListener("click",(n=>{const a=document.querySelectorAll(".task");if(a)if(new String(t.innerText.trim()).includes(e)){for(let e of a)this.showTaskDetails(e);t.textContent="Collapse all"}else{for(let e of a)this.hideTaskDetails(e);t.textContent=e}}))}showTaskDetails(e){e.querySelector(".task-details").classList.remove("hide");const t=e.querySelector(".task-menu .icon");t.classList.remove("fa-chevron-down"),t.classList.add("fa-chevron-up")}hideTaskDetails(e){e.querySelector(".task-details").classList.add("hide");const t=e.querySelector(".task-menu .icon");t.classList.remove("fa-chevron-up"),t.classList.add("fa-chevron-down")}addShowNewTaskModalEventListener(){const e=document.querySelector(".new-task-btn"),t=document.querySelector("#new-task-modal-wrapper");e.addEventListener("click",(e=>{this.showNewTaskModal(t)}))}showNewTaskModal(e){this.resetModalForm(),window.scrollTo(0,0),e.classList.remove("hide")}resetModalForm(){document.querySelector("#new-task-form").reset()}addHideNewTaskModalEventListener(){document.querySelector("#new-task-modal-wrapper").addEventListener("click",(e=>{e.stopPropagation(),e.target.classList.contains("modal-wrapper")&&this.animateModalClosing()})),document.querySelector(".modal-wrapper .close-btn").addEventListener("click",(e=>{this.animateModalClosing()}))}animateModalClosing(){const e=document.querySelector("#new-task-modal-wrapper"),t=e.querySelector(".new-task-modal");t.classList.add("modal-dissmis-animation"),e.classList.remove("wrapper-fade-in-animation"),e.classList.add("wrapper-fade-out-animation"),setTimeout((()=>{e.classList.add("hide"),t.classList.remove("modal-dissmis-animation"),e.classList.remove("wrapper-fade-out-animation"),e.classList.add("wrapper-fade-in-animation")}),600)}addNewTaskSubmitListener(){document.querySelector("#new-task-submit").addEventListener("click",(e=>{if(e.preventDefault(),this.formValidation.init(),this.formValidation.isValid()){const e=this.formValidation.getTask();console.log(e),this.submitNewTaskModal(e),this.animateModalClosing()}}))}submitNewTaskModal(e){console.log("New task submited! "),this.model.addTask(e),this.render(),console.log(this.model.getCurrentProject().tasks.length)}addToggleMoreMenuListener(){const e=document.querySelectorAll(".task-menu .more");for(let t of e)t.addEventListener("click",(e=>{const n=t.nextElementSibling;setTimeout((()=>{n.classList.toggle("hide")}),50)}));document.addEventListener("click",(e=>{if(!e.target.classList.contains("more-menu")&&!e.target.classList.contains("more-menu-option")){const e=document.querySelectorAll(".more-menu:not(.hide)");for(let t of e)t.classList.add("hide")}}))}addDeleteTaskClickListener(){const e=document.querySelectorAll(".more-menu-option.delete");for(let t of e){const e=t.parentElement.parentElement.parentElement.parentElement.parentElement.getAttribute("data-index");t.addEventListener("click",this.handleDeleteTask.bind(this,e))}}handleDeleteTask(e){console.log("Deleting task with id "+e)}addEditTaskClickListener(){const e=document.querySelectorAll(".more-menu-option.edit");for(let t of e){const e=t.parentElement.parentElement.parentElement.parentElement.parentElement.getAttribute("data-index");t.addEventListener("click",this.handleEditTask.bind(this,e))}}handleEditTask(e){console.log("Editing task with id "+e)}addToggleDarkModeClickListener(){console.log("Darkmode toggle listener attached");const e=document.querySelector(".dark-mode-icon");e?e.addEventListener("click",(e=>{const t=document.querySelector("body");console.log(t),t.classList.toggle("dark-mode")})):console.log("Dark-mode switch button not found")}addOverviewPageEventListeners(){this.addProjectTileClickListener(),this.addNewProjectButtonListener()}addProjectTileClickListener(){document.querySelectorAll(".project-grid-item:not(.new-project-btn)").forEach((e=>{e.addEventListener("click",(e=>{console.log(e.target);const t=e.target;console.log(t.parentElement);const n=t.parentElement.getAttribute("data-project-index");this.changeCurrentProject(n)}))}))}addNewProjectButtonListener(){document.querySelectorAll(".new-project-btn").forEach((e=>{e.addEventListener("click",(e=>{this.openNewProjectModal()}))}))}openNewProjectModal(){console.log("New project modal opened")}}function l(e){return r(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}function u(e){if(r(1,arguments),!l(e)&&"number"!=typeof e)return!1;var t=o(e);return!isNaN(Number(t))}var m={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function h(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,a=e.formats[n]||e.formats[e.defaultWidth];return a}}var p,g={date:h({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:h({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:h({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},f={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function w(e){return function(t,n){var a,i=n||{};if("formatting"===(i.context?String(i.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,o=i.width?String(i.width):r;a=e.formattingValues[o]||e.formattingValues[r]}else{var s=e.defaultWidth,d=i.width?String(i.width):e.defaultWidth;a=e.values[d]||e.values[s]}return a[e.argumentCallback?e.argumentCallback(t):t]}}function v(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=n.width,i=a&&e.matchPatterns[a]||e.matchPatterns[e.defaultMatchWidth],r=t.match(i);if(!r)return null;var o,s=r[0],d=a&&e.parsePatterns[a]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(d)?k(d,(function(e){return e.test(s)})):C(d,(function(e){return e.test(s)}));o=e.valueCallback?e.valueCallback(c):c,o=n.valueCallback?n.valueCallback(o):o;var l=t.slice(s.length);return{value:o,rest:l}}}function C(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function k(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}const b={code:"en-US",formatDistance:function(e,t,n){var a,i=m[e];return a="string"==typeof i?i:1===t?i.one:i.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:g,formatRelative:function(e,t,n,a){return f[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:w({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:w({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:w({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:w({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:w({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(p={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(p.matchPattern);if(!n)return null;var a=n[0],i=e.match(p.parsePattern);if(!i)return null;var r=p.valueCallback?p.valueCallback(i[0]):i[0];r=t.valueCallback?t.valueCallback(r):r;var o=e.slice(a.length);return{value:r,rest:o}}),era:v({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:v({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:v({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:v({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:v({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function y(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function L(e,t){r(2,arguments);var n=o(e).getTime(),a=y(t);return new Date(n+a)}function E(e,t){r(2,arguments);var n=y(t);return L(e,-n)}var T=864e5;function M(e){r(1,arguments);var t=1,n=o(e),a=n.getUTCDay(),i=(a<t?7:0)+a-t;return n.setUTCDate(n.getUTCDate()-i),n.setUTCHours(0,0,0,0),n}function D(e){r(1,arguments);var t=o(e),n=t.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(n+1,0,4),a.setUTCHours(0,0,0,0);var i=M(a),s=new Date(0);s.setUTCFullYear(n,0,4),s.setUTCHours(0,0,0,0);var d=M(s);return t.getTime()>=i.getTime()?n+1:t.getTime()>=d.getTime()?n:n-1}function x(e){r(1,arguments);var t=D(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var a=M(n);return a}var P=6048e5;function j(e,t){r(1,arguments);var n=t||{},a=n.locale,i=a&&a.options&&a.options.weekStartsOn,s=null==i?0:y(i),d=null==n.weekStartsOn?s:y(n.weekStartsOn);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=o(e),l=c.getUTCDay(),u=(l<d?7:0)+l-d;return c.setUTCDate(c.getUTCDate()-u),c.setUTCHours(0,0,0,0),c}function S(e,t){r(1,arguments);var n=o(e),a=n.getUTCFullYear(),i=t||{},s=i.locale,d=s&&s.options&&s.options.firstWeekContainsDate,c=null==d?1:y(d),l=null==i.firstWeekContainsDate?c:y(i.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=new Date(0);u.setUTCFullYear(a+1,0,l),u.setUTCHours(0,0,0,0);var m=j(u,t),h=new Date(0);h.setUTCFullYear(a,0,l),h.setUTCHours(0,0,0,0);var p=j(h,t);return n.getTime()>=m.getTime()?a+1:n.getTime()>=p.getTime()?a:a-1}function U(e,t){r(1,arguments);var n=t||{},a=n.locale,i=a&&a.options&&a.options.firstWeekContainsDate,o=null==i?1:y(i),s=null==n.firstWeekContainsDate?o:y(n.firstWeekContainsDate),d=S(e,t),c=new Date(0);c.setUTCFullYear(d,0,s),c.setUTCHours(0,0,0,0);var l=j(c,t);return l}var q=6048e5;function N(e,t){for(var n=e<0?"-":"",a=Math.abs(e).toString();a.length<t;)a="0"+a;return n+a}const A=function(e,t){var n=e.getUTCFullYear(),a=n>0?n:1-n;return N("yy"===t?a%100:a,t.length)},O=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):N(n+1,2)},I=function(e,t){return N(e.getUTCDate(),t.length)},W=function(e,t){return N(e.getUTCHours()%12||12,t.length)},H=function(e,t){return N(e.getUTCHours(),t.length)},Y=function(e,t){return N(e.getUTCMinutes(),t.length)},F=function(e,t){return N(e.getUTCSeconds(),t.length)},V=function(e,t){var n=t.length,a=e.getUTCMilliseconds();return N(Math.floor(a*Math.pow(10,n-3)),t.length)};function z(e,t){var n=e>0?"-":"+",a=Math.abs(e),i=Math.floor(a/60),r=a%60;if(0===r)return n+String(i);var o=t||"";return n+String(i)+o+N(r,2)}function X(e,t){return e%60==0?(e>0?"-":"+")+N(Math.abs(e)/60,2):B(e,t)}function B(e,t){var n=t||"",a=e>0?"-":"+",i=Math.abs(e);return a+N(Math.floor(i/60),2)+n+N(i%60,2)}const G={G:function(e,t,n){var a=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var a=e.getUTCFullYear(),i=a>0?a:1-a;return n.ordinalNumber(i,{unit:"year"})}return A(e,t)},Y:function(e,t,n,a){var i=S(e,a),r=i>0?i:1-i;return"YY"===t?N(r%100,2):"Yo"===t?n.ordinalNumber(r,{unit:"year"}):N(r,t.length)},R:function(e,t){return N(D(e),t.length)},u:function(e,t){return N(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(a);case"QQ":return N(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(a);case"qq":return N(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(e,t,n){var a=e.getUTCMonth();switch(t){case"M":case"MM":return O(e,t);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(e,t,n){var a=e.getUTCMonth();switch(t){case"L":return String(a+1);case"LL":return N(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(e,t,n,a){var i=function(e,t){r(1,arguments);var n=o(e),a=j(n,t).getTime()-U(n,t).getTime();return Math.round(a/q)+1}(e,a);return"wo"===t?n.ordinalNumber(i,{unit:"week"}):N(i,t.length)},I:function(e,t,n){var a=function(e){r(1,arguments);var t=o(e),n=M(t).getTime()-x(t).getTime();return Math.round(n/P)+1}(e);return"Io"===t?n.ordinalNumber(a,{unit:"week"}):N(a,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):I(e,t)},D:function(e,t,n){var a=function(e){r(1,arguments);var t=o(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var a=t.getTime(),i=n-a;return Math.floor(i/T)+1}(e);return"Do"===t?n.ordinalNumber(a,{unit:"dayOfYear"}):N(a,t.length)},E:function(e,t,n){var a=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(e,t,n,a){var i=e.getUTCDay(),r=(i-a.weekStartsOn+8)%7||7;switch(t){case"e":return String(r);case"ee":return N(r,2);case"eo":return n.ordinalNumber(r,{unit:"day"});case"eee":return n.day(i,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(i,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(i,{width:"short",context:"formatting"});default:return n.day(i,{width:"wide",context:"formatting"})}},c:function(e,t,n,a){var i=e.getUTCDay(),r=(i-a.weekStartsOn+8)%7||7;switch(t){case"c":return String(r);case"cc":return N(r,t.length);case"co":return n.ordinalNumber(r,{unit:"day"});case"ccc":return n.day(i,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(i,{width:"narrow",context:"standalone"});case"cccccc":return n.day(i,{width:"short",context:"standalone"});default:return n.day(i,{width:"wide",context:"standalone"})}},i:function(e,t,n){var a=e.getUTCDay(),i=0===a?7:a;switch(t){case"i":return String(i);case"ii":return N(i,t.length);case"io":return n.ordinalNumber(i,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(e,t,n){var a=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(e,t,n){var a,i=e.getUTCHours();switch(a=12===i?"noon":0===i?"midnight":i/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(e,t,n){var a,i=e.getUTCHours();switch(a=i>=17?"evening":i>=12?"afternoon":i>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var a=e.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return W(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):H(e,t)},K:function(e,t,n){var a=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(a,{unit:"hour"}):N(a,t.length)},k:function(e,t,n){var a=e.getUTCHours();return 0===a&&(a=24),"ko"===t?n.ordinalNumber(a,{unit:"hour"}):N(a,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):Y(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):F(e,t)},S:function(e,t){return V(e,t)},X:function(e,t,n,a){var i=(a._originalDate||e).getTimezoneOffset();if(0===i)return"Z";switch(t){case"X":return X(i);case"XXXX":case"XX":return B(i);default:return B(i,":")}},x:function(e,t,n,a){var i=(a._originalDate||e).getTimezoneOffset();switch(t){case"x":return X(i);case"xxxx":case"xx":return B(i);default:return B(i,":")}},O:function(e,t,n,a){var i=(a._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+z(i,":");default:return"GMT"+B(i,":")}},z:function(e,t,n,a){var i=(a._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+z(i,":");default:return"GMT"+B(i,":")}},t:function(e,t,n,a){var i=a._originalDate||e;return N(Math.floor(i.getTime()/1e3),t.length)},T:function(e,t,n,a){return N((a._originalDate||e).getTime(),t.length)}};function $(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function R(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}var Q={p:R,P:function(e,t){var n,a=e.match(/(P+)(p+)?/)||[],i=a[1],r=a[2];if(!r)return $(e,t);switch(i){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",$(i,t)).replace("{{time}}",R(r,t))}};const J=Q;function _(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var K=["D","DD"],Z=["YY","YYYY"];function ee(e){return-1!==K.indexOf(e)}function te(e){return-1!==Z.indexOf(e)}function ne(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var ae=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ie=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,re=/^'([^]*?)'?$/,oe=/''/g,se=/[a-zA-Z]/;function de(e){return e.match(re)[1].replace(oe,"'")}function ce(e,t){r(2,arguments);var n=o(e),a=o(t),i=n.getTime()-a.getTime();return i<0?-1:i>0?1:i}function le(e,t){r(2,arguments);var n=o(e),a=o(t),i=n.getFullYear()-a.getFullYear(),s=n.getMonth()-a.getMonth();return 12*i+s}function ue(e){r(1,arguments);var t=o(e);return t.setHours(23,59,59,999),t}function me(e){r(1,arguments);var t=o(e),n=t.getMonth();return t.setFullYear(t.getFullYear(),n+1,0),t.setHours(23,59,59,999),t}function he(e){r(1,arguments);var t=o(e);return ue(t).getTime()===me(t).getTime()}function pe(e,t){r(2,arguments);var n,a=o(e),i=o(t),s=ce(a,i),d=Math.abs(le(a,i));if(d<1)n=0;else{1===a.getMonth()&&a.getDate()>27&&a.setDate(30),a.setMonth(a.getMonth()-s*d);var c=ce(a,i)===-s;he(o(e))&&1===d&&1===ce(e,i)&&(c=!1),n=s*(d-Number(c))}return 0===n?0:n}function ge(e,t){return r(2,arguments),o(e).getTime()-o(t).getTime()}var fe={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(e){return e<0?Math.ceil(e):Math.floor(e)}};function we(e){return e?fe[e]:fe.trunc}function ve(e,t,n){r(2,arguments);var a=ge(e,t)/1e3;return we(null==n?void 0:n.roundingMethod)(a)}function Ce(e){return function(e,t){if(null==e)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in t=t||{})Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}({},e)}var ke=1440,be=43200;class ye{container;project;controller;model;menuView;constructor(e){this.wrapper=document.querySelector(".content-wrapper"),this.container=document.createElement("div"),this.container.classList.add("container"),e.menuView&&(this.menuView=e.menuView),this.init()}init(){}setController(e){this.controller=e,this.setCurrentProject()}setCurrentProject(){this.project=this.controller.getCurrentProject()}setProject(e){this.project=e}setModel(e){console.log("model set"),this.model=e}updateProject(){this.project=this.model.getCurrentProject()}render(){console.log("[SingleProjectView.render()]"),this.updateProject(),this.renderMenu(),0===this.project.id?this.renderOverview():this.renderTasksList()}renderMenu(){this.menuView.render()}renderOverview(){console.log("SignleProjectView.renderOverview()"),this.clearContainer();const e=document.createElement("div");e.classList.add("flex-row");const t=document.createElement("h1");t.classList.add("list-title"),t.textContent="Overview",e.appendChild(t),this.container.appendChild(e);const n=document.createElement("p");n.classList.add("list-description"),n.textContent="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",this.container.appendChild(n);const a=document.createElement("div");a.classList.add("project-grid-wrapper");const i=document.createElement("div");i.classList.add("project-grid"),this.model.getProjectOverview().map((e=>{console.log(e),i.appendChild(this.getProjectGridItem(e))})),i.appendChild(this.getNewProjectGridButton()),a.appendChild(i),this.container.appendChild(a),this.wrapper.appendChild(this.container)}getProjectGridItem(e){const t=document.createElement("div");t.classList.add("project-grid-item"),t.setAttribute("data-project-index",e.id);const n=document.createElement("div");n.classList.add("bg"),t.appendChild(n);const a=document.createElement("div");a.classList.add("text");const i=document.createElement("h2");i.classList.add("project-title"),i.textContent=e.name,a.appendChild(i);const r=document.createElement("span");return r.classList.add("task-count"),r.textContent=`${e.tasks} ${1===e.tasks?"task":"tasks"}`,a.appendChild(r),t.appendChild(a),console.log(t),t}getNewProjectGridButton(){const e=document.createElement("div");e.classList.add("project-grid-item","new-project-btn");const t=document.createElement("div");t.classList.add("bg"),e.appendChild(t);const n=document.createElement("div");n.classList.add("text");const a=document.createElement("h2");a.classList.add("project-title"),a.innerHTML="<i class='fa fa-plus'></i>",n.appendChild(a);const i=document.createElement("span");return i.classList.add("task-count"),i.textContent="New project",n.appendChild(i),e.appendChild(n),e}renderTasksList(){this.clearContainer(),this.container.classList.add("fade-in-animation"),this.container.appendChild(this.createProjectTitleAndMenu()),this.container.appendChild(this.createProjectDescription()),this.container.appendChild(this.createTasks()),this.wrapper.removeChild(document.querySelector(".container")),this.wrapper.appendChild(this.container)}clearContainer(){this.container.textContent=""}createProjectTitleAndMenu(){const e=document.createElement("div");e.classList.add("flex-row");const t=document.createElement("h1");t.classList.add("list-title"),t.textContent=this.project.title;const n=document.createElement("div");n.classList.add("push-right","align-center");const a=document.createElement("i");return a.classList.add("fas","fa-ellipsis-v"),n.appendChild(a),e.appendChild(t),e.appendChild(n),e}createProjectDescription(){const e=document.createElement("p");return e.classList.add("list-description"),e.textContent=this.project.description,e}createTasks(){const e=document.createElement("div");e.classList.add("tasks-wrapper");const t=document.createElement("div");t.classList.add("flex-row");const n=document.createElement("div");n.classList.add("tasks-title"),n.textContent="Todo",t.appendChild(n);const a=document.createElement("div");a.classList.add("push-right");const i=document.createElement("span");i.classList.add("font-sm"),i.id="expand-all-hide-all-span",i.textContent="Expand all",a.appendChild(i),t.appendChild(a),e.appendChild(t);const r=document.createElement("form");for(let e of this.project.tasks)r.appendChild(this.getTaskDOMElement(e));if(e.appendChild(r),this.project.done&&this.project.done.length>0){const t=document.createElement("div");t.classList.add("tasks-title"),t.textContent="Done";const n=document.createElement("form");for(let e of this.project.done)n.appendChild(this.getTaskDOMElement(e));e.appendChild(t),e.appendChild(n)}return e}getTaskDOMElement(e){let t,a;switch(e.priority){case n.DEFAULT:t="bg-light",a="priority-default-border";break;case n.HIGH:t="bg-danger",a="priority-high-border";break;case n.MEDIUM:t="bg-medium",a="priority-medium-border";break;case n.LOW:t="bg-low",a="priority-low-border"}const i=document.createElement("div");i.classList.add("task",a),i.setAttribute("data-index",e.id);const d=document.createElement("div");d.classList.add("task-content");const c=document.createElement("input");c.setAttribute("type","checkbox"),e.isComplete&&c.setAttribute("checked",""),c.id=`task-${e.id}`,d.appendChild(c);const l=document.createElement("div");l.classList.add("checkbox-wrapper");const m=document.createElement("label");m.setAttribute("for",`task-${e.id}`);const h=document.createElement("span");h.classList.add("checkbox");const p=document.createElement("span");p.classList.add("check"),h.appendChild(p),m.appendChild(h),l.appendChild(m),d.appendChild(l);const g=document.createElement("div");g.classList.add("task-text");const f=document.createElement("div");f.classList.add("title"),f.textContent=e.title,g.appendChild(f);const w=document.createElement("div");w.classList.add("task-details","hide");const v=document.createElement("div");v.classList.add("description","font-sm"),v.textContent=e.description;const C=document.createElement("div");C.classList.add("flex-row");const k=document.createElement("div");k.classList.add("priority",t,"font-sm"),k.textContent=class{static capitalize(e){return e.charAt(0).toUpperCase()+e.slice(1)}}.capitalize(e.priority);const L=document.createElement("div");L.classList.add("due-date","font-sm");const T=function(e,t,n){r(2,arguments);var a=String(t),i=n||{},s=i.locale||b,d=s.options&&s.options.firstWeekContainsDate,c=null==d?1:y(d),l=null==i.firstWeekContainsDate?c:y(i.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=s.options&&s.options.weekStartsOn,h=null==m?0:y(m),p=null==i.weekStartsOn?h:y(i.weekStartsOn);if(!(p>=0&&p<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!s.localize)throw new RangeError("locale must contain localize property");if(!s.formatLong)throw new RangeError("locale must contain formatLong property");var g=o(e);if(!u(g))throw new RangeError("Invalid time value");var f=_(g),w=E(g,f),v={firstWeekContainsDate:l,weekStartsOn:p,locale:s,_originalDate:g};return a.match(ie).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,J[t])(e,s.formatLong,v):e})).join("").match(ae).map((function(n){if("''"===n)return"'";var a=n[0];if("'"===a)return de(n);var r=G[a];if(r)return!i.useAdditionalWeekYearTokens&&te(n)&&ne(n,t,e),!i.useAdditionalDayOfYearTokens&&ee(n)&&ne(n,t,e),r(w,n,s.localize,v);if(a.match(se))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return n})).join("")}(e.dueDate,"EEEE d LLLL y");let M;const D=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};r(2,arguments);var a=n.locale||b;if(!a.formatDistance)throw new RangeError("locale must contain formatDistance property");var i=ce(e,t);if(isNaN(i))throw new RangeError("Invalid time value");var s,d,c=Ce(n);c.addSuffix=Boolean(n.addSuffix),c.comparison=i,i>0?(s=o(t),d=o(e)):(s=o(e),d=o(t));var l,u=ve(d,s),m=(_(d)-_(s))/1e3,h=Math.round((u-m)/60);if(h<2)return n.includeSeconds?u<5?a.formatDistance("lessThanXSeconds",5,c):u<10?a.formatDistance("lessThanXSeconds",10,c):u<20?a.formatDistance("lessThanXSeconds",20,c):u<40?a.formatDistance("halfAMinute",null,c):u<60?a.formatDistance("lessThanXMinutes",1,c):a.formatDistance("xMinutes",1,c):0===h?a.formatDistance("lessThanXMinutes",1,c):a.formatDistance("xMinutes",h,c);if(h<45)return a.formatDistance("xMinutes",h,c);if(h<90)return a.formatDistance("aboutXHours",1,c);if(h<ke){var p=Math.round(h/60);return a.formatDistance("aboutXHours",p,c)}if(h<2520)return a.formatDistance("xDays",1,c);if(h<be){var g=Math.round(h/ke);return a.formatDistance("xDays",g,c)}if(h<86400)return l=Math.round(h/be),a.formatDistance("aboutXMonths",l,c);if((l=pe(d,s))<12){var f=Math.round(h/be);return a.formatDistance("xMonths",f,c)}var w=l%12,v=Math.floor(l/12);return w<3?a.formatDistance("aboutXYears",v,c):w<9?a.formatDistance("overXYears",v,c):a.formatDistance("almostXYears",v+1,c)}(e.dueDate,new Date);M=s(new Date,e.dueDate)?`Overdue ${D}`:`Due in ${D}`,L.innerHTML=`${M} <span class='date'>(${T})</span>`,w.appendChild(v),C.appendChild(k),C.appendChild(L),w.appendChild(C),g.appendChild(w),d.appendChild(g),i.appendChild(d);const x=document.createElement("div");x.classList.add("task-menu");const P=document.createElement("i");P.classList.add("fas","fa-chevron-down","icon","chevron"),x.appendChild(P);const j=document.createElement("i");j.classList.add("fas","fa-ellipsis-v","icon","more"),x.appendChild(j);const S=document.createElement("more-menu");S.classList.add("more-menu","hide");const U=document.createElement("ul"),q=document.createElement("li");q.classList.add("more-menu-option","edit"),q.innerHTML="<i class='far fa-edit icon'></i> Edit";const N=document.createElement("li");return N.classList.add("more-menu-option","delete"),N.innerHTML="<i class='far fa-trash-alt icon'></i> Delete",U.appendChild(q),U.appendChild(N),S.appendChild(U),x.appendChild(S),i.appendChild(x),i}}class Le{model;controller;constructor(e){e.model&&(this.model=e.model)}setController(e){this.controller=e}render(){const e=document.querySelector(".menu-left"),t=document.querySelector(".menu");e.replaceChild(this.getMenuDOM(),t)}getMenuDOM(){const e=["fas","fa-tasks"],t=document.createElement("div");t.classList.add("menu");const n=document.createElement("ul");n.classList.add("flex-grow"),this.model.getProjects();for(let t of this.model.getProjects())0===t.id?n.appendChild(this.getOverviewMenuItem(t)):n.appendChild(this.getMenuItem(t,e));const a=document.createElement("div");a.classList.add("line"),n.appendChild(a);const i=this.getMenuItem({title:"Done",tasks:[]},["far","fa-calendar-check"]);n.appendChild(i),t.appendChild(n);const r=document.createElement("ul");r.classList.add("push-bottom");const o=document.createElement("a");o.href="#",o.classList.add("menu-item");const s=document.createElement("li");s.innerHTML="<i class='fa fa-cog'></i> Logs",o.appendChild(s),r.appendChild(o);const d=document.createElement("a");d.href="#",d.classList.add("menu-item");const c=document.createElement("li");return c.innerHTML="<i class='fa fa-sign-out-alt'></i> Log out",d.appendChild(c),r.appendChild(d),t.appendChild(r),t}calculateProjectTasksAmount(e){return e.tasks.reduce(((e,t,n)=>e+(t.isComplete?0:1)),0)}getOverviewMenuItem(e){const t=document.createElement("a");t.href="#",t.setAttribute("data-menu-index",e.id),t.classList.add("menu-item"),this.model.getCurrentProjectId()===e.id&&t.classList.add("active");const n=document.createElement("li"),a=document.createElement("div");a.classList.toggle("flex-row");const i=document.createElement("i");i.classList.add("fa","fa-home");const r=document.createElement("div");r.classList.toggle("menu-item-text");const o=this.model.getProjectsCount();return r.innerHTML=`${e.title} <p class='tasks-amount'>${o} \n    ${1===o?"project":"projects"}</p>`,a.appendChild(i),a.appendChild(r),n.appendChild(a),t.appendChild(n),t.addEventListener("click",(t=>{t.preventDefault(),this.controller.changeCurrentProject(e.id)})),t}getMenuItem(e,t){const n=document.createElement("a");n.href="#",n.setAttribute("data-menu-index",e.id),n.classList.add("menu-item"),this.model.getCurrentProjectId()===e.id&&n.classList.add("active");const a=document.createElement("li"),i=document.createElement("div");i.classList.toggle("flex-row");const r=document.createElement("i");r.classList.add(...t);const o=document.createElement("div");if(o.classList.toggle("menu-item-text"),e.tasks){const t=this.calculateProjectTasksAmount(e);o.innerHTML=`${e.title} <p class='tasks-amount'>${t} ${1===t?"Task":"Tasks"}</p>`}return i.appendChild(r),i.appendChild(o),a.appendChild(i),n.appendChild(a),n.addEventListener("click",(t=>{t.preventDefault(),this.controller.changeCurrentProject(e.id)})),n}}(new class{model;controller;view;menuView;constructor(){this.model=new i,this.menuView=new Le({model:this.model}),this.view=new ye({menuView:this.menuView}),this.view.setModel(this.model),this.controller=new c({view:this.view,model:this.model}),this.view.setController(this.controller),this.menuView.setController(this.controller)}init(){this.controller.init()}}).init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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dENHLEtBQU12SSxLQUFLdUksS0FDWEMsTUFBT3hJLEtBQUt3SSxRQUdkeEksS0FBS3VJLEtBQUttWCxjQUFjMWYsS0FBS3dmLFlBRTdCeGYsS0FBS3lmLFNBQVNDLGNBQWMxZixLQUFLd2YsWUFHbkN0WSxPQUNFbEgsS0FBS3dmLFdBQVd0WSxVRDNCaEJBLFEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvdXRpbC9JbmRleFN1cHBsaWVyLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9lbnRpdHkvVGFzay5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvZW50aXR5L1ByaW9yaXR5VHlwZS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvbW9kZWwvU2FtcGxlRGF0YS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvbW9kZWwvTW9kZWwuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3RvRGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzQWZ0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2NvbnRyb2xsZXIvTmV3VGFza01vZGFsVmFsaWRhdGlvbkNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2NvbnRyb2xsZXIvRGlzcGxheUNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1ZhbGlkL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL21hdGNoL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi90b0ludGVnZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9hZGRNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdWJNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0RheU9mWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDSVNPV2Vla1llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9saWdodEZvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2Zvcm1hdC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2NvbXBhcmVBc2MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9kaWZmZXJlbmNlSW5DYWxlbmRhck1vbnRocy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2VuZE9mRGF5L2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZW5kT2ZNb250aC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzTGFzdERheU9mTW9udGgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9kaWZmZXJlbmNlSW5Nb250aHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9kaWZmZXJlbmNlSW5NaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3JvdW5kaW5nTWV0aG9kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2RpZmZlcmVuY2VJblNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Nsb25lT2JqZWN0L2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9mb3JtYXREaXN0YW5jZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvdmlldy9TaW5nbGVQcm9qZWN0Vmlldy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvdXRpbC9VdGlscy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvdmlldy9NZW51Vmlldy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL0FwcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgc3RhcnRpbmdJbmRleCA9IDA7XG5cbmV4cG9ydCBjbGFzcyBJbmRleFN1cHBsaWVyIHtcblxuICBzdGF0aWMgbmV4dEluZGV4KCkge1xuICAgIHJldHVybiBzdGFydGluZ0luZGV4Kys7XG4gIH1cblxuICBzdGF0aWMgcmVzZXQoKSB7XG4gICAgc3RhcnRpbmdJbmRleCA9IDA7XG4gIH1cblxufSIsImltcG9ydCB7IEluZGV4U3VwcGxpZXIgfSBmcm9tIFwiLi4vdXRpbC9JbmRleFN1cHBsaWVyXCI7XG5cbmV4cG9ydCBjbGFzcyBUYXNrIHtcbiAgY3JlYXRlZERhdGU7XG4gIHRpdGxlO1xuICBkZXNjcmlwdGlvbjtcbiAgZHVlRGF0ZTtcbiAgcHJpb3JpdHk7XG4gIGlzQ29tcGxldGU7XG4gIGxvZztcbiAgLy8gb3B0aW9uYWw/XG4gIG5vdGVzO1xuICBjaGVja2xpc3Q7XG5cbiAgY29uc3RydWN0b3IodGl0bGUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcmlvcml0eSkge1xuICAgIHRoaXMuaWQgPSBJbmRleFN1cHBsaWVyLm5leHRJbmRleCgpO1xuICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgdGhpcy5kdWVEYXRlID0gZHVlRGF0ZTtcbiAgICB0aGlzLnByaW9yaXR5ID0gcHJpb3JpdHk7XG4gICAgdGhpcy5jcmVhdGVkRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgdGhpcy5pc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgdGhpcy5ub3RlcyA9IG51bGw7XG4gICAgdGhpcy5jaGVja2xpc3QgPSBbXTtcbiAgICB0aGlzLmxvZyA9IFtdO1xuICB9XG5cbiAgaXNDb21wbGV0ZSgpIHtcbiAgICByZXR1cm4gaXNDb21wbGV0ZSA9PT0gdHJ1ZTtcbiAgfVxuXG4gIG1hcmtBc0NvbXBsZXRlKCkge1xuICAgIHRoaXMuaXNDb21wbGV0ZSA9IHRydWU7XG4gIH1cblxuICBtYXJrQXNOb3RDb21wbGV0ZSgpIHtcbiAgICB0aGlzLmlzQ29tcGxldGUgPSBmYWxzZTtcbiAgfVxuXG4gIGdldERPTUVsZW1lbnQoKSB7XG4gICAgbGV0IGJhY2tncm91bmRDb2xvckNsYXNzO1xuICAgIGxldCBib3JkZXJDb2xvckNsYXNzO1xuXG4gICAgc3dpdGNoICh0aGlzLnByaW9yaXR5KSB7XG4gICAgICBjYXNlIFByaW9yaXR5VHlwZS5ERUZBVUxUOlxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3JDbGFzcyA9IFwiYmctbGlnaHRcIjtcbiAgICAgICAgYm9yZGVyQ29sb3JDbGFzcyA9IFwicHJpb3JpdHktZGVmYXVsdC1ib3JkZXJcIjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgUHJpb3JpdHlUeXBlLkhJR0g6XG4gICAgICAgIGJhY2tncm91bmRDb2xvckNsYXNzID0gXCJiZy1kYW5nZXJcIjtcbiAgICAgICAgYm9yZGVyQ29sb3JDbGFzcyA9IFwicHJpb3JpdHktaGlnaC1ib3JkZXJcIjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgUHJpb3JpdHlUeXBlLk1FRElVTTpcbiAgICAgICAgYmFja2dyb3VuZENvbG9yQ2xhc3MgPSBcImJnLW1lZGl1bVwiO1xuICAgICAgICBib3JkZXJDb2xvckNsYXNzID0gXCJwcmlvcml0eS1tZWRpdW0tYm9yZGVyXCI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFByaW9yaXR5VHlwZS5MT1c6XG4gICAgICAgIGJhY2tncm91bmRDb2xvckNsYXNzID0gXCJiZy1sb3dcIjtcbiAgICAgICAgYm9yZGVyQ29sb3JDbGFzcyA9IFwicHJpb3JpdHktbG93LWJvcmRlclwiO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBjb25zdCB0YXNrRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGFza0VsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhc2tcIiwgYm9yZGVyQ29sb3JDbGFzcyk7XG4gICAgdGFza0VsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS1pbmRleFwiLCB0aGlzLmlkKTtcblxuICAgIGNvbnN0IHRhc2tDb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0YXNrQ29udGVudC5jbGFzc0xpc3QuYWRkKFwidGFzay1jb250ZW50XCIpO1xuXG4gICAgY29uc3QgY2hlY2tib3hJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICBjaGVja2JveElucHV0LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJjaGVja2JveFwiKTtcbiAgICBpZiAodGhpcy5pc0NvbXBsZXRlKSB7XG4gICAgICBjaGVja2JveElucHV0LnNldEF0dHJpYnV0ZSgnY2hlY2tlZCcsICcnKVxuICAgIH1cbiAgICBjaGVja2JveElucHV0LmlkID0gYHRhc2stJHt0aGlzLmlkfWA7XG5cbiAgICB0YXNrQ29udGVudC5hcHBlbmRDaGlsZChjaGVja2JveElucHV0KTtcblxuICAgIGNvbnN0IGNoZWNrYm94V3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgY2hlY2tib3hXcmFwcGVyLmNsYXNzTGlzdC5hZGQoXCJjaGVja2JveC13cmFwcGVyXCIpO1xuICAgIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAgIGxhYmVsLnNldEF0dHJpYnV0ZShcImZvclwiLCBgdGFzay0ke3RoaXMuaWR9YCk7XG4gICAgY29uc3Qgc3BhbkNoZWNrYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgc3BhbkNoZWNrYm94LmNsYXNzTGlzdC5hZGQoXCJjaGVja2JveFwiKTtcbiAgICBjb25zdCBzcGFuQ2hlY2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICBzcGFuQ2hlY2suY2xhc3NMaXN0LmFkZChcImNoZWNrXCIpO1xuXG4gICAgc3BhbkNoZWNrYm94LmFwcGVuZENoaWxkKHNwYW5DaGVjayk7XG4gICAgbGFiZWwuYXBwZW5kQ2hpbGQoc3BhbkNoZWNrYm94KTtcbiAgICBjaGVja2JveFdyYXBwZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xuXG4gICAgdGFza0NvbnRlbnQuYXBwZW5kQ2hpbGQoY2hlY2tib3hXcmFwcGVyKTtcblxuICAgIGNvbnN0IHRhc2tUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0YXNrVGV4dC5jbGFzc0xpc3QuYWRkKFwidGFzay10ZXh0XCIpO1xuXG4gICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRpdGxlLmNsYXNzTGlzdC5hZGQoXCJ0aXRsZVwiKTtcbiAgICB0aXRsZS50ZXh0Q29udGVudCA9IHRoaXMudGl0bGU7XG5cbiAgICB0YXNrVGV4dC5hcHBlbmRDaGlsZCh0aXRsZSk7XG5cbiAgICBjb25zdCB0YXNrRGV0YWlscyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGFza0RldGFpbHMuY2xhc3NMaXN0LmFkZChcInRhc2stZGV0YWlsc1wiLCBcImhpZGVcIik7XG5cbiAgICBjb25zdCB0YXNrRGVzY3JpcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRhc2tEZXNjcmlwdGlvbi5jbGFzc0xpc3QuYWRkKFwiZGVzY3JpcHRpb25cIiwgXCJmb250LXNtXCIpO1xuICAgIHRhc2tEZXNjcmlwdGlvbi50ZXh0Q29udGVudCA9IHRoaXMuZGVzY3JpcHRpb247XG5cbiAgICBjb25zdCBmbGV4Um93MSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgZmxleFJvdzEuY2xhc3NMaXN0LmFkZChcImZsZXgtcm93XCIpO1xuXG4gICAgY29uc3QgcHJpb3JpdHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHByaW9yaXR5LmNsYXNzTGlzdC5hZGQoXCJwcmlvcml0eVwiLCBiYWNrZ3JvdW5kQ29sb3JDbGFzcywgXCJmb250LXNtXCIpO1xuICAgIHByaW9yaXR5LnRleHRDb250ZW50ID0gVXRpbHMuY2FwaXRhbGl6ZSh0aGlzLnByaW9yaXR5KTtcblxuICAgIGNvbnN0IGR1ZURhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkdWVEYXRlLmNsYXNzTGlzdC5hZGQoJ2R1ZS1kYXRlJywgJ2ZvbnQtc20nKTtcbiAgICBkdWVEYXRlLmlubmVySFRNTCA9IGBEdWUgZGF0ZSA8c3BhbiBjbGFzcz0nZGF0ZSc+JHt0aGlzLmR1ZURhdGV9PC9zcGFuPmBcblxuICAgIHRhc2tEZXRhaWxzLmFwcGVuZENoaWxkKHRhc2tEZXNjcmlwdGlvbik7XG5cbiAgICBmbGV4Um93MS5hcHBlbmRDaGlsZChwcmlvcml0eSk7XG4gICAgZmxleFJvdzEuYXBwZW5kQ2hpbGQoZHVlRGF0ZSk7XG4gICAgdGFza0RldGFpbHMuYXBwZW5kQ2hpbGQoZmxleFJvdzEpO1xuICAgIFxuICAgIHRhc2tUZXh0LmFwcGVuZENoaWxkKHRhc2tEZXRhaWxzKTtcblxuICAgIHRhc2tDb250ZW50LmFwcGVuZENoaWxkKHRhc2tUZXh0KTtcbiAgICB0YXNrRWxlbWVudC5hcHBlbmRDaGlsZCh0YXNrQ29udGVudCk7XG5cbiAgICBjb25zdCB0YXNrTWVudSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRhc2tNZW51LmNsYXNzTGlzdC5hZGQoJ3Rhc2stbWVudScpXG5cbiAgICBjb25zdCBjaGV2cm9uSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKTtcbiAgICBjaGV2cm9uSWNvbi5jbGFzc0xpc3QuYWRkKCdmYXMnLCAnZmEtY2hldnJvbi1kb3duJywgJ2ljb24nLCAnY2hldnJvbicpO1xuICAgIHRhc2tNZW51LmFwcGVuZENoaWxkKGNoZXZyb25JY29uKTtcblxuICAgIGNvbnN0IG1vcmVJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpO1xuICAgIG1vcmVJY29uLmNsYXNzTGlzdC5hZGQoJ2ZhcycsICdmYS1lbGxpcHNpcy12JywgJ2ljb24nLCAnbW9yZScpO1xuICAgIHRhc2tNZW51LmFwcGVuZENoaWxkKG1vcmVJY29uKTtcblxuICAgIGNvbnN0IG1vcmVNZW51ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbW9yZS1tZW51Jyk7XG4gICAgbW9yZU1lbnUuY2xhc3NMaXN0LmFkZCgnbW9yZS1tZW51JywgJ2hpZGUnKTtcblxuICAgIGNvbnN0IGxpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuXG4gICAgY29uc3QgZWRpdExpc3RJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICBlZGl0TGlzdEl0ZW0uY2xhc3NMaXN0LmFkZCgnbW9yZS1tZW51LW9wdGlvbicsICdlZGl0Jyk7XG4gICAgZWRpdExpc3RJdGVtLmlubmVySFRNTCA9IFwiPGkgY2xhc3M9J2ZhciBmYS1lZGl0IGljb24nPjwvaT4gRWRpdFwiO1xuXG4gICAgY29uc3QgZGVsZXRlTGlzdEl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgIGRlbGV0ZUxpc3RJdGVtLmNsYXNzTGlzdC5hZGQoJ21vcmUtbWVudS1vcHRpb24nLCAnZGVsZXRlJyk7XG4gICAgZGVsZXRlTGlzdEl0ZW0uaW5uZXJIVE1MID0gXCI8aSBjbGFzcz0nZmFyIGZhLXRyYXNoLWFsdCBpY29uJz48L2k+IERlbGV0ZVwiO1xuXG4gICAgbGlzdC5hcHBlbmRDaGlsZChlZGl0TGlzdEl0ZW0pO1xuICAgIGxpc3QuYXBwZW5kQ2hpbGQoZGVsZXRlTGlzdEl0ZW0pO1xuXG4gICAgbW9yZU1lbnUuYXBwZW5kQ2hpbGQobGlzdCk7XG4gICAgdGFza01lbnUuYXBwZW5kQ2hpbGQobW9yZU1lbnUpO1xuXG4gICAgdGFza0VsZW1lbnQuYXBwZW5kQ2hpbGQodGFza01lbnUpO1xuXG4gICAgcmV0dXJuIHRhc2tFbGVtZW50O1xuICB9XG5cbn0iLCJleHBvcnQgY2xhc3MgUHJpb3JpdHlUeXBlIHtcbiAgc3RhdGljIExPVyA9ICdsb3cnO1xuICBzdGF0aWMgTUVESVVNID0gJ21lZGl1bSc7XG4gIHN0YXRpYyBISUdIID0gJ2hpZ2gnO1xuICBzdGF0aWMgREVGQVVMVCA9ICdkZWZhdWx0Jztcbn0iLCJpbXBvcnQgeyBUYXNrIH0gZnJvbSBcIi4uL2VudGl0eS9UYXNrXCI7XG5pbXBvcnQgeyBQcmlvcml0eVR5cGUgfSBmcm9tIFwiLi4vZW50aXR5L1ByaW9yaXR5VHlwZVwiO1xuXG4vLyBjb25zdHJ1Y3Rvcih0aXRsZSwgZGVzY3JpcHRpb24sIGR1ZURhdGUsIHByaW9yaXR5KVxuZXhwb3J0IGNvbnN0IHNhbXBsZURhdGEgPSB7XG4gIHByb2plY3RzOiBbXG4gICAge1xuICAgICAgaWQ6IDAsXG4gICAgICB0aXRsZTogXCJPdmVydmlld1wiLFxuICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgIFwiTG9vayBhdCBhbGwgeW91ciBwcm9qZWN0cyBhbmQgY2hvb3NlIHdoaWNoIG9uZSB5b3Ugd2FudCB0byBjaGVja1wiLFxuICAgIH0sXG4gICAge1xuICAgICAgaWQ6IDEsXG4gICAgICB0aXRsZTogXCJXZWJzaXRlIHJlZGVzaWduXCIsXG4gICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gXCIsXG4gICAgICB0YXNrczogW1xuICAgICAgICBuZXcgVGFzayhcbiAgICAgICAgICBcIlVwZGF0ZSBhYm91dCBwYWdlIGhlYWRlclwiLFxuICAgICAgICAgIFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdFwiLFxuICAgICAgICAgIG5ldyBEYXRlKDIwMjIsIDEsIDIwKSxcbiAgICAgICAgICBQcmlvcml0eVR5cGUuREVGQVVMVFxuICAgICAgICApLFxuICAgICAgICBuZXcgVGFzayhcbiAgICAgICAgICBcIkZpeCBidWcgaW4gZGVwbG95bWVudCBzY3JpcHRcIixcbiAgICAgICAgICBcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIGxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIGxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIGxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIGxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIGxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIGxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXRcIixcbiAgICAgICAgICBuZXcgRGF0ZSgyMDIyLCAwLCAxOSksXG4gICAgICAgICAgUHJpb3JpdHlUeXBlLk1FRElVTVxuICAgICAgICApLFxuICAgICAgICBuZXcgVGFzayhcbiAgICAgICAgICBcIlVwZGF0ZSBjb250YWN0IHBhZ2UgaGVhZGVyXCIsXG4gICAgICAgICAgXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0XCIsXG4gICAgICAgICAgbmV3IERhdGUoMjAyMiwgMSwgMjApLFxuICAgICAgICAgIFByaW9yaXR5VHlwZS5ERUZBVUxUXG4gICAgICAgICksXG4gICAgICAgIG5ldyBUYXNrKFxuICAgICAgICAgIFwiQWJvdXQgcGFnZSB3b3JkaW5nXCIsXG4gICAgICAgICAgXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0XCIsXG4gICAgICAgICAgbmV3IERhdGUoMjAyMiwgMCwgMjIpLFxuICAgICAgICAgIFByaW9yaXR5VHlwZS5ISUdIXG4gICAgICAgICksXG4gICAgICAgIG5ldyBUYXNrKFxuICAgICAgICAgIFwiTmV3IGxhbmRpbmcgcGFnZSBsYXlvdXRcIixcbiAgICAgICAgICBcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXRcIixcbiAgICAgICAgICBuZXcgRGF0ZSgyMDIyLCAwLCAxNyksXG4gICAgICAgICAgUHJpb3JpdHlUeXBlLk1FRElVTVxuICAgICAgICApLFxuICAgICAgICBuZXcgVGFzayhcbiAgICAgICAgICBcIlVwZGF0ZSBnbG9iYWwgaWNvbnNldFwiLFxuICAgICAgICAgIFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdFwiLFxuICAgICAgICAgIG5ldyBEYXRlKDIwMjIsIDEsIDI3KSxcbiAgICAgICAgICBQcmlvcml0eVR5cGUuTE9XXG4gICAgICAgICksXG4gICAgICAgIG5ldyBUYXNrKFxuICAgICAgICAgIFwiTmV3IGNhc2Ugc3R1ZHkgdGh1bWJuYWlsc1wiLFxuICAgICAgICAgIFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdFwiLFxuICAgICAgICAgIG5ldyBEYXRlKDIwMjIsIDAsIDI4KSxcbiAgICAgICAgICBQcmlvcml0eVR5cGUuREVGQVVMVFxuICAgICAgICApLFxuICAgICAgXSxcbiAgICAgIGRvbmU6IFtdLFxuICAgICAgdG9kb0NvdW50OiAwLCAvLyA/IHVwZGF0ZSBvbiBldmVyeSBpc0NvbXBsZXRlIGNoYW5nZVxuICAgIH0sXG4gICAge1xuICAgICAgaWQ6IDIsXG4gICAgICB0aXRsZTogXCJHcm9jZXJpZXNcIixcbiAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICBcIkxpc3Qgb2YgZ3JvY2VyaWVzIHRvIGJ1eSBvbiB0aGUgbmVhcmVzdCB0cmlwIHRvIHRoZSBzaG9wLiBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBsb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LlwiLFxuICAgICAgdGFza3M6IFtcbiAgICAgICAgbmV3IFRhc2soXG4gICAgICAgICAgXCJCdXkgUGl6emFcIixcbiAgICAgICAgICBcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXRcIixcbiAgICAgICAgICBuZXcgRGF0ZSgyMDIyLCAwLCAzMCksXG4gICAgICAgICAgUHJpb3JpdHlUeXBlLkhJR0hcbiAgICAgICAgKSxcbiAgICAgICAgbmV3IFRhc2soXG4gICAgICAgICAgXCJUb21hdG9lc1wiLFxuICAgICAgICAgIFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgbG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdFwiLFxuICAgICAgICAgIG5ldyBEYXRlKDIwMjIsIDAsIDMwKSxcbiAgICAgICAgICBQcmlvcml0eVR5cGUuREVGQVVMVFxuICAgICAgICApLFxuICAgICAgXSxcbiAgICAgIGRvbmU6IFtdLFxuICAgIH0sXG4gICAge1xuICAgICAgaWQ6IDMsXG4gICAgICB0aXRsZTogXCJXb3Jrb3V0XCIsXG4gICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgXCJFeGVyY2lzZXMgdG8gZG8gdG8gc3RheSBmaXQuIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIGxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuXCIsXG4gICAgICB0YXNrczogW1xuICAgICAgICBuZXcgVGFzayhcbiAgICAgICAgICBcIjUwIEJyenVzemvDs3dcIixcbiAgICAgICAgICBcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXRcIixcbiAgICAgICAgICBuZXcgRGF0ZSgyMDIyLCAwLCAzMCksXG4gICAgICAgICAgUHJpb3JpdHlUeXBlLkRFRkFVTFRcbiAgICAgICAgKSxcbiAgICAgICAgbmV3IFRhc2soXG4gICAgICAgICAgXCI1MCBQb21wZWtcIixcbiAgICAgICAgICBcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIGxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXRcIixcbiAgICAgICAgICBuZXcgRGF0ZSgyMDIyLCAwLCAzMCksXG4gICAgICAgICAgUHJpb3JpdHlUeXBlLkRFRkFVTFRcbiAgICAgICAgKSxcbiAgICAgIF0sXG4gICAgICBkb25lOiBbXSxcbiAgICB9LFxuICAgIHtcbiAgICAgIGlkOiA0LFxuICAgICAgdGl0bGU6IFwiUmVhZGluZ1wiLFxuICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgIFwiTGlzdCBvZiBib29rcyB0byByZWFkLiBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBsb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LlwiLFxuICAgICAgdGFza3M6IFtcbiAgICAgICAgbmV3IFRhc2soXG4gICAgICAgICAgXCJMb3JkIG9mIFRoZSBSaW5nczogVGhlIEZlbGxvd3NoaXAgb2YgdGhlIFJpbmdcIixcbiAgICAgICAgICBcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXRcIixcbiAgICAgICAgICBuZXcgRGF0ZSgyMDIyLCAwLCAzMCksXG4gICAgICAgICAgUHJpb3JpdHlUeXBlLk1FRElVTVxuICAgICAgICApLFxuICAgICAgICBuZXcgVGFzayhcbiAgICAgICAgICBcIkRvIEFuZHJvaWRzIERyZWFtIG9mIEVsZWN0cmljIFNoZWVwXCIsXG4gICAgICAgICAgXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBsb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0XCIsXG4gICAgICAgICAgbmV3IERhdGUoMjAyMiwgMCwgMzApLFxuICAgICAgICAgIFByaW9yaXR5VHlwZS5MT1dcbiAgICAgICAgKSxcbiAgICAgIF0sXG4gICAgICBkb25lOiBbXSxcbiAgICB9LFxuICBdLFxufTtcbiIsImltcG9ydCB7IHNhbXBsZURhdGEgfSBmcm9tIFwiLi9TYW1wbGVEYXRhXCI7XG5cbmNvbnN0IERFRkFVTFRfUFJPSkVDVF9JRCA9IDA7XG5cbmV4cG9ydCBjbGFzcyBNb2RlbCB7XG4gIGN1cnJlbnRQcm9qZWN0O1xuICBjdXJyZW50UHJvamVjdElkO1xuICBwcm9qZWN0cztcbiAgZGF0YTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmRhdGEgPSBzYW1wbGVEYXRhO1xuICAgIHRoaXMucHJvamVjdHMgPSB0aGlzLmRhdGEucHJvamVjdHM7XG4gICAgdGhpcy5jdXJyZW50UHJvamVjdCA9IHRoaXMuZ2V0SW5pdGlhbFByb2plY3QoKTtcbiAgICB0aGlzLmN1cnJlbnRQcm9qZWN0SWQgPSBERUZBVUxUX1BST0pFQ1RfSUQ7XG4gIH1cblxuICBzZXRDdXJyZW50UHJvamVjdChwcm9qZWN0KSB7XG4gICAgdGhpcy5jdXJyZW50UHJvamVjdCA9IHByb2plY3Q7XG4gIH1cblxuICBzZXRDdXJyZW50UHJvamVjdElkKHByb2plY3RJZCkge1xuICAgIHRoaXMuY3VycmVudFByb2plY3QgPSB0aGlzLnByb2plY3RzLmZpbHRlcihcbiAgICAgIChwcm9qZWN0KSA9PiBwcm9qZWN0LmlkID09PSBwcm9qZWN0SWRcbiAgICApWzBdO1xuICAgIHRoaXMuY3VycmVudFByb2plY3RJZCA9IHBhcnNlSW50KHByb2plY3RJZCk7XG4gICAgdGhpcy5zZXRDdXJyZW50UHJvamVjdCh0aGlzLmdldFByb2plY3RCeUlkKHRoaXMuY3VycmVudFByb2plY3RJZCkpO1xuICB9XG5cbiAgZ2V0Q3VycmVudFByb2plY3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFByb2plY3Q7XG4gIH1cblxuICBnZXRDdXJyZW50UHJvamVjdElkKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRQcm9qZWN0SWQ7XG4gIH1cblxuICBnZXRQcm9qZWN0cygpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLnByb2plY3RzO1xuICB9XG5cbiAgZ2V0UHJvamVjdEJ5SWQocHJvamVjdElkKSB7XG4gICAgY29uc3QgcHJvamVjdCA9IHRoaXMuZGF0YS5wcm9qZWN0cy5maWx0ZXIoXG4gICAgICAocHJvamVjdCkgPT4gcHJvamVjdC5pZCA9PT0gcHJvamVjdElkXG4gICAgKVswXTtcbiAgICBjb25zb2xlLmxvZyhwcm9qZWN0KTtcbiAgICByZXR1cm4gcHJvamVjdDtcbiAgfVxuXG4gIGdldFByb2plY3RPdmVydmlldygpIHtcbiAgICBsZXQgcHJvamVjdHMgPSBbXTtcbiAgICB0aGlzLmRhdGEucHJvamVjdHMubWFwKChwcm9qZWN0KSA9PiB7XG4gICAgICBpZiAocHJvamVjdC5pZCAhPT0gMCkge1xuICAgICAgICBwcm9qZWN0cy5wdXNoKHtcbiAgICAgICAgICBuYW1lOiBwcm9qZWN0LnRpdGxlLFxuICAgICAgICAgIGlkOiBwcm9qZWN0LmlkLFxuICAgICAgICAgIHRhc2tzOiB0aGlzLmNhbGN1bGF0ZVRhc2tzKHByb2plY3QudGFza3MpLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gcHJvamVjdHM7XG4gIH1cblxuICBnZXRQcm9qZWN0c0NvdW50KCkge1xuICAgIHJldHVybiB0aGlzLmdldFByb2plY3RPdmVydmlldygpLmxlbmd0aDtcbiAgfVxuXG4gIGNhbGN1bGF0ZVRhc2tzKHRhc2tzKSB7XG4gICAgcmV0dXJuIHRhc2tzLnJlZHVjZShcbiAgICAgIChhY2MsIGN1cnJlbnQpID0+IGFjYyArIChjdXJyZW50LmlzQ29tcGxldGUgPyAwIDogMSksXG4gICAgICAwXG4gICAgKTtcbiAgfVxuXG4gIGdldERhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YTtcbiAgfVxuXG4gIGdldEluaXRpYWxQcm9qZWN0KCkge1xuICAgIHJldHVybiB0aGlzLnByb2plY3RzLmZpbHRlcihcbiAgICAgIChwcm9qZWN0KSA9PiBwcm9qZWN0LmlkID09PSBERUZBVUxUX1BST0pFQ1RfSURcbiAgICApWzBdO1xuICB9XG5cbiAgc2V0VGFza0FzQ29tcGxldGUodGFzaykge1xuICAgIHRhc2suaXNDb21wbGV0ZSA9IHRydWU7XG4gIH1cblxuICBhZGRUYXNrKHRhc2spIHtcbiAgICB0aGlzLmN1cnJlbnRQcm9qZWN0LnRhc2tzLnVuc2hpZnQodGFzayk7XG4gIH1cblxuICBzZXRUYXNrSXNDb21wbGV0ZSh0YXNrSWQsIGlzQ29tcGxldGUpIHtcbiAgICBsZXQgcmVtb3ZlRnJvbTtcbiAgICBsZXQgYWRkVG87XG4gICAgaWYgKGlzQ29tcGxldGUgPT09IHRydWUpIHtcbiAgICAgIHJlbW92ZUZyb20gPSB0aGlzLmN1cnJlbnRQcm9qZWN0LnRhc2tzO1xuICAgICAgYWRkVG8gPSB0aGlzLmN1cnJlbnRQcm9qZWN0LmRvbmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZUZyb20gPSB0aGlzLmN1cnJlbnRQcm9qZWN0LmRvbmU7XG4gICAgICBhZGRUbyA9IHRoaXMuY3VycmVudFByb2plY3QudGFza3M7XG4gICAgfVxuXG4gICAgY29uc3QgdGFzayA9IHJlbW92ZUZyb20uZmlsdGVyKCh0YXNrKSA9PiB0YXNrLmlkID09PSB0YXNrSWQpWzBdO1xuICAgIHRhc2suaXNDb21wbGV0ZSA9IGlzQ29tcGxldGU7XG5cbiAgICBjb25zdCB0YXNrSW5kZXggPSByZW1vdmVGcm9tLmluZGV4T2YodGFzayk7XG5cbiAgICAvLyBNb3ZlIHRhc2sgZnJvbSBvbmUgYXJyYXkgdG8gb3RoZXJcbiAgICByZW1vdmVGcm9tLnNwbGljZSh0YXNrSW5kZXgsIDEpO1xuICAgIGFkZFRvLnVuc2hpZnQodGFzayk7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlcXVpcmVkQXJncyhyZXF1aXJlZCwgYXJncykge1xuICBpZiAoYXJncy5sZW5ndGggPCByZXF1aXJlZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocmVxdWlyZWQgKyAnIGFyZ3VtZW50JyArIChyZXF1aXJlZCA+IDEgPyAncycgOiAnJykgKyAnIHJlcXVpcmVkLCBidXQgb25seSAnICsgYXJncy5sZW5ndGggKyAnIHByZXNlbnQnKTtcbiAgfVxufSIsImltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHRvRGF0ZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgaXRzIGNsb25lLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhIG51bWJlciwgaXQgaXMgdHJlYXRlZCBhcyBhIHRpbWVzdGFtcC5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgbm9uZSBvZiB0aGUgYWJvdmUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIEludmFsaWQgRGF0ZS5cbiAqXG4gKiAqKk5vdGUqKjogKmFsbCogRGF0ZSBhcmd1bWVudHMgcGFzc2VkIHRvIGFueSAqZGF0ZS1mbnMqIGZ1bmN0aW9uIGlzIHByb2Nlc3NlZCBieSBgdG9EYXRlYC5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBhcmd1bWVudCAtIHRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDbG9uZSB0aGUgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZShuZXcgRGF0ZSgyMDE0LCAxLCAxMSwgMTEsIDMwLCAzMCkpXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHRoZSB0aW1lc3RhbXAgdG8gZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZSgxMzkyMDk4NDMwMDAwKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0RhdGUoYXJndW1lbnQpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBhcmdTdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnQpOyAvLyBDbG9uZSB0aGUgZGF0ZVxuXG4gIGlmIChhcmd1bWVudCBpbnN0YW5jZW9mIERhdGUgfHwgdHlwZW9mIGFyZ3VtZW50ID09PSAnb2JqZWN0JyAmJiBhcmdTdHIgPT09ICdbb2JqZWN0IERhdGVdJykge1xuICAgIC8vIFByZXZlbnQgdGhlIGRhdGUgdG8gbG9zZSB0aGUgbWlsbGlzZWNvbmRzIHdoZW4gcGFzc2VkIHRvIG5ldyBEYXRlKCkgaW4gSUUxMFxuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudC5nZXRUaW1lKCkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBhcmd1bWVudCA9PT0gJ251bWJlcicgfHwgYXJnU3RyID09PSAnW29iamVjdCBOdW1iZXJdJykge1xuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCh0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgU3RyaW5nXScpICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcIlN0YXJ0aW5nIHdpdGggdjIuMC4wLWJldGEuMSBkYXRlLWZucyBkb2Vzbid0IGFjY2VwdCBzdHJpbmdzIGFzIGRhdGUgYXJndW1lbnRzLiBQbGVhc2UgdXNlIGBwYXJzZUlTT2AgdG8gcGFyc2Ugc3RyaW5ncy4gU2VlOiBodHRwczovL2dpdC5pby9manVsZVwiKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcblxuICAgICAgY29uc29sZS53YXJuKG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNBZnRlclxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZmlyc3QgZGF0ZSBhZnRlciB0aGUgc2Vjb25kIG9uZT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIElzIHRoZSBmaXJzdCBkYXRlIGFmdGVyIHRoZSBzZWNvbmQgb25lP1xuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRoYXQgc2hvdWxkIGJlIGFmdGVyIHRoZSBvdGhlciBvbmUgdG8gcmV0dXJuIHRydWVcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVUb0NvbXBhcmUgLSB0aGUgZGF0ZSB0byBjb21wYXJlIHdpdGhcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZmlyc3QgZGF0ZSBpcyBhZnRlciB0aGUgc2Vjb25kIGRhdGVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSXMgMTAgSnVseSAxOTg5IGFmdGVyIDExIEZlYnJ1YXJ5IDE5ODc/XG4gKiB2YXIgcmVzdWx0ID0gaXNBZnRlcihuZXcgRGF0ZSgxOTg5LCA2LCAxMCksIG5ldyBEYXRlKDE5ODcsIDEsIDExKSlcbiAqIC8vPT4gdHJ1ZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQWZ0ZXIoZGlydHlEYXRlLCBkaXJ0eURhdGVUb0NvbXBhcmUpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXRlVG9Db21wYXJlID0gdG9EYXRlKGRpcnR5RGF0ZVRvQ29tcGFyZSk7XG4gIHJldHVybiBkYXRlLmdldFRpbWUoKSA+IGRhdGVUb0NvbXBhcmUuZ2V0VGltZSgpO1xufSIsImltcG9ydCB7IGlzQWZ0ZXIgfSBmcm9tIFwiZGF0ZS1mbnNcIjtcbmltcG9ydCB7IFRhc2sgfSBmcm9tIFwiLi4vZW50aXR5L1Rhc2tcIjtcblxuZXhwb3J0IGNsYXNzIE5ld1Rhc2tNb2RhbFZhbGlkYXRpb25Db250cm9sbGVyIHtcbiAgdmFsaWRhdGlvbk1lc3NhZ2VzO1xuICBpc0Zvcm1FbXB0eTtcbiAgdmFsaWRUYXNrO1xuICBmb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uZXctdGFzay1tb2RhbFwiKTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnZhbGlkVGFzayA9IHt9O1xuICAgIHRoaXMuaXNGb3JtRW1wdHkgPSB0cnVlO1xuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLnJlc2V0VmFsaWRhdGlvbk1lc3NhZ2VzKCk7XG4gICAgdGhpcy5hZGRCbHVyRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIHJlc2V0VmFsaWRhdGlvbk1lc3NhZ2VzKCkge1xuICAgIHRoaXMudmFsaWRhdGlvbk1lc3NhZ2VzID0ge1xuICAgICAgdGl0bGU6IFtdLFxuICAgICAgZGVzY3JpcHRpb246IFtdLFxuICAgICAgZHVlRGF0ZTogW10sXG4gICAgfTtcbiAgICB0aGlzLmNsZWFyVmFsaWRhdGlvbk1lc3NhZ2VzKCk7XG4gIH1cblxuICBpc1ZhbGlkKCkge1xuICAgIHRoaXMudmFsaWRhdGVJbnB1dHMoKTtcbiAgICBcbiAgICBmb3IgKGxldCBtc2cgaW4gdGhpcy52YWxpZGF0aW9uTWVzc2FnZXMpIHtcbiAgICAgIGlmICh0aGlzLnZhbGlkYXRpb25NZXNzYWdlc1ttc2ddLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YWxpZGF0ZUlucHV0cygpIHtcbiAgICB0aGlzLnZhbGlkYXRlVGl0bGVJbnB1dCgpO1xuICAgIHRoaXMudmFsaWRhdGVEZXNjcmlwdGlvbklucHV0KCk7XG4gICAgdGhpcy52YWxpZGF0ZUR1ZURhdGVJbnB1dCgpO1xuICB9XG5cbiAgdmFsaWRhdGVUaXRsZUlucHV0KCkge1xuICAgIGNvbnN0IHRpdGxlID0gdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3IoXCIjdGFzay10aXRsZVwiKS52YWx1ZTtcbiAgICBjb25zdCB2YWxpZGF0aW9uTXNnU3BhbiA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKFxuICAgICAgXCIjZm9ybS1sYWJlbC10aXRsZSAudmFsaWRhdGlvbi1tc2dcIlxuICAgICk7XG5cbiAgICB2YWxpZGF0aW9uTXNnU3Bhbi50ZXh0Q29udGVudCA9IFwiXCI7XG5cbiAgICBpZiAodGl0bGUpIHtcbiAgICAgIHRoaXMudmFsaWRUYXNrLnRpdGxlID0gdGl0bGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG1zZyA9IFwiKiAgUGxlYXNlIGVudGVyIHRhc2sgdGl0bGVcIjtcbiAgICAgIGlmICghdGhpcy52YWxpZGF0aW9uTWVzc2FnZXMudGl0bGUuaW5jbHVkZXMobXNnKSkge1xuICAgICAgICB0aGlzLnZhbGlkYXRpb25NZXNzYWdlcy50aXRsZS5wdXNoKG1zZyk7XG4gICAgICB9XG4gICAgICB2YWxpZGF0aW9uTXNnU3Bhbi50ZXh0Q29udGVudCA9IG1zZztcbiAgICB9XG4gIH1cblxuICB2YWxpZGF0ZURlc2NyaXB0aW9uSW5wdXQoKSB7XG4gICAgY29uc3QgZGVzY3JpcHRpb24gPSB0aGlzLmZvcm0ucXVlcnlTZWxlY3RvcihcIiN0YXNrLWRlc2NyaXB0aW9uXCIpLnZhbHVlO1xuICAgIGNvbnN0IHZhbGlkYXRpb25Nc2dTcGFuID0gdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBcIiNmb3JtLWxhYmVsLWRlc2NyaXB0aW9uIC52YWxpZGF0aW9uLW1zZ1wiXG4gICAgKTtcblxuICAgIHZhbGlkYXRpb25Nc2dTcGFuLnRleHRDb250ZW50ID0gXCJcIjtcblxuICAgIGlmIChkZXNjcmlwdGlvbikge1xuICAgICAgdGhpcy52YWxpZFRhc2suZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbXNnID0gXCIqIFBsZWFzZSBlbnRlciB0YXNrIGRlc2NyaXB0aW9uXCI7XG4gICAgICBpZiAoIXRoaXMudmFsaWRhdGlvbk1lc3NhZ2VzLmRlc2NyaXB0aW9uLmluY2x1ZGVzKG1zZykpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0aW9uTWVzc2FnZXMuZGVzY3JpcHRpb24ucHVzaChtc2cpO1xuICAgICAgfVxuICAgICAgdmFsaWRhdGlvbk1zZ1NwYW4udGV4dENvbnRlbnQgPSBtc2c7XG4gICAgfVxuICB9XG5cbiAgdmFsaWRhdGVEdWVEYXRlSW5wdXQoKSB7XG4gICAgY29uc3QgZHVlRGF0ZSA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKFwiI3Rhc2stZHVlLWRhdGVcIikudmFsdWU7XG4gICAgY29uc3QgdmFsaWRhdGlvbk1zZ1NwYW4gPSB0aGlzLmZvcm0ucXVlcnlTZWxlY3RvcihcbiAgICAgIFwiI2Zvcm0tbGFiZWwtZHVlLWRhdGUgLnZhbGlkYXRpb24tbXNnXCJcbiAgICApO1xuXG4gICAgdmFsaWRhdGlvbk1zZ1NwYW4udGV4dENvbnRlbnQgPSBcIlwiO1xuXG4gICAgaWYgKGR1ZURhdGUgJiYgaXNBZnRlcihuZXcgRGF0ZShkdWVEYXRlKSwgbmV3IERhdGUoKSkpIHtcbiAgICAgIHRoaXMudmFsaWRUYXNrLmR1ZURhdGUgPSBuZXcgRGF0ZShkdWVEYXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbXNnID0gXCIqIFBsZWFzZSBlbnRlciB0YXNrIGR1ZSBkYXRlIHRoYXQncyBpbiB0aGUgZnV0dXJlXCI7XG4gICAgICBpZiAoIXRoaXMudmFsaWRhdGlvbk1lc3NhZ2VzLmR1ZURhdGUuaW5jbHVkZXMobXNnKSkge1xuICAgICAgICB0aGlzLnZhbGlkYXRpb25NZXNzYWdlcy5kdWVEYXRlLnB1c2gobXNnKTtcbiAgICAgIH1cbiAgICAgIHZhbGlkYXRpb25Nc2dTcGFuLnRleHRDb250ZW50ID0gbXNnO1xuICAgIH1cbiAgfVxuXG4gIGFkZEJsdXJFdmVudExpc3RlbmVycygpIHtcbiAgICBjb25zdCB0aXRsZSA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKFwiI3Rhc2stdGl0bGVcIik7XG4gICAgdGl0bGUuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgKGUpID0+IHtcbiAgICAgIHRoaXMudmFsaWRhdGVUaXRsZUlucHV0KCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKFwiI3Rhc2stZGVzY3JpcHRpb25cIik7XG4gICAgZGVzY3JpcHRpb24uYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgKGUpID0+IHtcbiAgICAgIHRoaXMudmFsaWRhdGVEZXNjcmlwdGlvbklucHV0KCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBkdWVEYXRlID0gdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3IoXCIjdGFzay1kdWUtZGF0ZVwiKTtcbiAgICBkdWVEYXRlLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoZSkgPT4ge1xuICAgICAgdGhpcy52YWxpZGF0ZUR1ZURhdGVJbnB1dCgpO1xuICAgIH0pO1xuICB9XG5cbiAgY2xlYXJWYWxpZGF0aW9uTWVzc2FnZXMoKSB7XG4gICAgY29uc3QgdmFsaWRhdGlvbk1lc3NhZ2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi52YWxpZGF0aW9uLW1zZ1wiKTtcbiAgICBmb3IgKGxldCBtc2cgb2YgdmFsaWRhdGlvbk1lc3NhZ2VzKSB7XG4gICAgICBtc2cudGV4dENvbnRlbnQgPSBcIlwiO1xuICAgIH1cbiAgfVxuXG4gIGdldFRhc2soKSB7XG4gICAgY29uc3QgdGFzayA9IG5ldyBUYXNrKFxuICAgICAgdGhpcy52YWxpZFRhc2sudGl0bGUsXG4gICAgICB0aGlzLnZhbGlkVGFzay5kZXNjcmlwdGlvbixcbiAgICAgIHRoaXMudmFsaWRUYXNrLmR1ZURhdGVcbiAgICApO1xuXG4gICAgdGFzay5wcmlvcml0eSA9IHRoaXMuZ2V0UHJpb3JpdHlWYWx1ZSgpO1xuXG4gICAgcmV0dXJuIHRhc2s7XG4gIH1cblxuICBnZXRQcmlvcml0eVZhbHVlKCkge1xuICAgIGNvbnN0IHByaW9yaXR5ID0gdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAnI25ldy10YXNrLWZvcm0gaW5wdXRbdHlwZT1cInJhZGlvXCJdOmNoZWNrZWQnXG4gICAgKTtcbiAgICByZXR1cm4gcHJpb3JpdHkudmFsdWU7XG4gIH1cbn1cbiIsImltcG9ydCB7IE5ld1Rhc2tNb2RhbFZhbGlkYXRpb25Db250cm9sbGVyIH0gZnJvbSBcIi4vTmV3VGFza01vZGFsVmFsaWRhdGlvbkNvbnRyb2xsZXJcIjtcblxuZXhwb3J0IGNsYXNzIERpc3BsYXlDb250cm9sbGVyIHtcbiAgY29udGVudDtcbiAgdGFza0NvbnRyb2xsZXI7XG4gIHZpZXc7XG4gIG1vZGVsO1xuICBmb3JtVmFsaWRhdGlvbjtcblxuICBjb25zdHJ1Y3RvcihkZXBlbmRlbmNpZXMpIHtcbiAgICB0aGlzLmNvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLndyYXBwZXJcIik7XG4gICAgdGhpcy5mb3JtVmFsaWRhdGlvbiA9IG5ldyBOZXdUYXNrTW9kYWxWYWxpZGF0aW9uQ29udHJvbGxlcigpO1xuXG4gICAgaWYgKGRlcGVuZGVuY2llcy52aWV3KSB7XG4gICAgICB0aGlzLnZpZXcgPSBkZXBlbmRlbmNpZXMudmlldztcbiAgICB9XG4gICAgaWYgKGRlcGVuZGVuY2llcy5tb2RlbCkge1xuICAgICAgdGhpcy5tb2RlbCA9IGRlcGVuZGVuY2llcy5tb2RlbDtcbiAgICB9XG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMuYXR0YWNoRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZ2V0Q3VycmVudFByb2plY3QoKSB7XG4gICAgcmV0dXJuIHRoaXMubW9kZWwuZ2V0Q3VycmVudFByb2plY3QoKTtcbiAgfVxuXG4gIGNoYW5nZUN1cnJlbnRQcm9qZWN0KHByb2plY3RJZCkge1xuICAgIGNvbnNvbGUubG9nKHByb2plY3RJZCk7XG4gICAgdGhpcy5tb2RlbC5zZXRDdXJyZW50UHJvamVjdElkKHByb2plY3RJZCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICB0aGlzLnZpZXcucmVuZGVyKCk7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5tb2RlbC5nZXRDdXJyZW50UHJvamVjdElkKCkgIT09IDApIHtcbiAgICAgICAgLy8gTmV3IHRhc2sgbGlzdCBlbGVtZW50XG4gICAgICAgIHRoaXMuYWRkTmV3TGlzdEVsZW1lbnRzRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE92ZXJ2aWV3IHBhZ2VcbiAgICAgICAgdGhpcy5hZGRPdmVydmlld1BhZ2VFdmVudExpc3RlbmVycygpO1xuICAgICAgfVxuICAgIH0sIDUwMCk7XG4gIH1cblxuICBhdHRhY2hFdmVudExpc3RlbmVycygpIHtcbiAgICAvLyBOZXcgVGFzayBtb2RhbCBzaG93IGJ1dHRvbiBhbmQgY2xvc2VcbiAgICB0aGlzLmFkZFNob3dOZXdUYXNrTW9kYWxFdmVudExpc3RlbmVyKCk7XG4gICAgdGhpcy5hZGRIaWRlTmV3VGFza01vZGFsRXZlbnRMaXN0ZW5lcigpO1xuICAgIHRoaXMuYWRkTmV3VGFza1N1Ym1pdExpc3RlbmVyKCk7XG4gICAgLy8gRGFyay1tb2RlL2xpZ2h0LW1vZGUgc3dpdGNoXG4gICAgdGhpcy5hZGRUb2dnbGVEYXJrTW9kZUNsaWNrTGlzdGVuZXIoKTtcbiAgfVxuXG4gIGFkZE5ld0xpc3RFbGVtZW50c0V2ZW50TGlzdGVuZXJzKCkge1xuICAgIC8vIFRvZ2dsZSBkb25lL25vdCBkb25lIHRhc2tcbiAgICB0aGlzLmFkZFRvZ2dsZUNvbXBsZXRlRXZlbnRMaXN0ZW5lcigpO1xuICAgIC8vIFNob3dpbmcgYW5kIGhpZGluZyB0YXNrIGRldGFpbHNcbiAgICB0aGlzLmFkZFRhc2tEZXRhaWxzVG9nZ2xlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLmFkZEV4cGFuZEhpZGVBbGxFdmVudExpc3RlbmVyKCk7XG4gICAgLy8gVGFzayBtb3JlIG1lbnUgb3Blbi9jbG9zZVxuICAgIHRoaXMuYWRkVG9nZ2xlTW9yZU1lbnVMaXN0ZW5lcigpO1xuICAgIHRoaXMuYWRkRGVsZXRlVGFza0NsaWNrTGlzdGVuZXIoKTtcbiAgICB0aGlzLmFkZEVkaXRUYXNrQ2xpY2tMaXN0ZW5lcigpO1xuICB9XG5cbiAgYWRkVG9nZ2xlQ29tcGxldGVFdmVudExpc3RlbmVyKCkge1xuICAgIC8vIHVwZGF0ZSBtZW51IGNvdW50ZXJzIG9uIGVhY2ggdG9nZ2xlP1xuICAgIGNvbnN0IGNoZWNrYm94ZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0nKTtcbiAgICBmb3IgKGxldCBjaGVja2JveCBvZiBjaGVja2JveGVzKSB7XG4gICAgICBjaGVja2JveC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIChlKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tJZCA9IHBhcnNlSW50KGUudGFyZ2V0LmlkLnNwbGl0KFwiLVwiKVsxXSk7XG4gICAgICAgIHRoaXMudG9nZ2xlVGFza0NvbXBsZXRlKHRhc2tJZCwgZS50YXJnZXQuY2hlY2tlZCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICB0b2dnbGVUYXNrQ29tcGxldGUodGFza0lkLCBpc0NvbXBsZXRlKSB7XG4gICAgY29uc29sZS5sb2coXCJ0b2dnbGUgdGFzayBjb21wbGV0ZVwiKTtcbiAgICB0aGlzLm1vZGVsLnNldFRhc2tJc0NvbXBsZXRlKHRhc2tJZCwgaXNDb21wbGV0ZSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGFkZFRhc2tEZXRhaWxzVG9nZ2xlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgY29uc3QgYnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIudGFzay1tZW51IC5mYS1jaGV2cm9uLWRvd25cIik7XG4gICAgZm9yIChsZXQgYnV0dG9uIG9mIGJ1dHRvbnMpIHtcbiAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgICAgY29uc3QgaWNvbiA9IGUudGFyZ2V0O1xuICAgICAgICBjb25zdCB0YXNrID0gaWNvbi5wYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgICAgIHRoaXMudG9nZ2xlVGFza0RldGFpbHModGFzayk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICB0b2dnbGVUYXNrRGV0YWlscyh0YXNrRWxlbWVudCkge1xuICAgIGlmICh0YXNrRWxlbWVudCkge1xuICAgICAgY29uc3QgZGV0YWlscyA9IHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGFzay1kZXRhaWxzXCIpO1xuICAgICAgZGV0YWlscy5jbGFzc0xpc3QudG9nZ2xlKFwiaGlkZVwiKTtcblxuICAgICAgY29uc3QgaWNvbiA9IHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaWNvblwiKTtcbiAgICAgIGljb24uY2xhc3NMaXN0LnRvZ2dsZShcImZhLWNoZXZyb24tdXBcIik7XG4gICAgICBpY29uLmNsYXNzTGlzdC50b2dnbGUoXCJmYS1jaGV2cm9uLWRvd25cIik7XG4gICAgfVxuICB9XG5cbiAgYWRkRXhwYW5kSGlkZUFsbEV2ZW50TGlzdGVuZXIoKSB7XG4gICAgY29uc3QgVEVYVF9DT05URU5UX1RPX0VYUEFORCA9IFwiRXhwYW5kIGFsbFwiO1xuICAgIC8vIEluaXRpYWwgc3RhdGUgaXMgdG8gZXhwYW5kXG4gICAgY29uc3QgYnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNleHBhbmQtYWxsLWhpZGUtYWxsLXNwYW5cIik7XG4gICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgY29uc3QgdGFza3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnRhc2tcIik7XG4gICAgICBpZiAodGFza3MpIHtcbiAgICAgICAgaWYgKG5ldyBTdHJpbmcoYnRuLmlubmVyVGV4dC50cmltKCkpLmluY2x1ZGVzKFRFWFRfQ09OVEVOVF9UT19FWFBBTkQpKSB7XG4gICAgICAgICAgZm9yIChsZXQgdGFzayBvZiB0YXNrcykge1xuICAgICAgICAgICAgdGhpcy5zaG93VGFza0RldGFpbHModGFzayk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJ0bi50ZXh0Q29udGVudCA9IFwiQ29sbGFwc2UgYWxsXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9yIChsZXQgdGFzayBvZiB0YXNrcykge1xuICAgICAgICAgICAgdGhpcy5oaWRlVGFza0RldGFpbHModGFzayk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJ0bi50ZXh0Q29udGVudCA9IFRFWFRfQ09OVEVOVF9UT19FWFBBTkQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHNob3dUYXNrRGV0YWlscyh0YXNrKSB7XG4gICAgY29uc3QgdGFza0RldGFpbHNUb1Nob3cgPSB0YXNrLnF1ZXJ5U2VsZWN0b3IoXCIudGFzay1kZXRhaWxzXCIpO1xuICAgIHRhc2tEZXRhaWxzVG9TaG93LmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRlXCIpO1xuICAgIGNvbnN0IGNoZXZyb24gPSB0YXNrLnF1ZXJ5U2VsZWN0b3IoXCIudGFzay1tZW51IC5pY29uXCIpO1xuICAgIGNoZXZyb24uY2xhc3NMaXN0LnJlbW92ZShcImZhLWNoZXZyb24tZG93blwiKTtcbiAgICBjaGV2cm9uLmNsYXNzTGlzdC5hZGQoXCJmYS1jaGV2cm9uLXVwXCIpO1xuICB9XG5cbiAgaGlkZVRhc2tEZXRhaWxzKHRhc2spIHtcbiAgICBjb25zdCB0YXNrRGV0YWlsc1RvU2hvdyA9IHRhc2sucXVlcnlTZWxlY3RvcihcIi50YXNrLWRldGFpbHNcIik7XG4gICAgdGFza0RldGFpbHNUb1Nob3cuY2xhc3NMaXN0LmFkZChcImhpZGVcIik7XG4gICAgY29uc3QgY2hldnJvbiA9IHRhc2sucXVlcnlTZWxlY3RvcihcIi50YXNrLW1lbnUgLmljb25cIik7XG4gICAgY2hldnJvbi5jbGFzc0xpc3QucmVtb3ZlKFwiZmEtY2hldnJvbi11cFwiKTtcbiAgICBjaGV2cm9uLmNsYXNzTGlzdC5hZGQoXCJmYS1jaGV2cm9uLWRvd25cIik7XG4gIH1cblxuICBhZGRTaG93TmV3VGFza01vZGFsRXZlbnRMaXN0ZW5lcigpIHtcbiAgICBjb25zdCBidG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm5ldy10YXNrLWJ0blwiKTtcbiAgICBjb25zdCBtb2RhbFdyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI25ldy10YXNrLW1vZGFsLXdyYXBwZXJcIik7XG4gICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgdGhpcy5zaG93TmV3VGFza01vZGFsKG1vZGFsV3JhcHBlcik7XG4gICAgfSk7XG4gIH1cblxuICBzaG93TmV3VGFza01vZGFsKG1vZGFsV3JhcHBlcikge1xuICAgIHRoaXMucmVzZXRNb2RhbEZvcm0oKTtcbiAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gICAgbW9kYWxXcmFwcGVyLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRlXCIpO1xuICB9XG5cbiAgcmVzZXRNb2RhbEZvcm0oKSB7XG4gICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbmV3LXRhc2stZm9ybVwiKTtcbiAgICBmb3JtLnJlc2V0KCk7XG4gIH1cblxuICBhZGRIaWRlTmV3VGFza01vZGFsRXZlbnRMaXN0ZW5lcigpIHtcbiAgICBjb25zdCB3cmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNuZXctdGFzay1tb2RhbC13cmFwcGVyXCIpO1xuICAgIHdyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcIm1vZGFsLXdyYXBwZXJcIikpIHtcbiAgICAgICAgdGhpcy5hbmltYXRlTW9kYWxDbG9zaW5nKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBjbG9zZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWwtd3JhcHBlciAuY2xvc2UtYnRuXCIpO1xuICAgIGNsb3NlQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgdGhpcy5hbmltYXRlTW9kYWxDbG9zaW5nKCk7XG4gICAgfSk7XG4gIH1cblxuICBhbmltYXRlTW9kYWxDbG9zaW5nKCkge1xuICAgIGNvbnN0IE1PREFMX0NMT1NJTkdfQU5JTUFUSU9OX0RVUkFUSU9OID0gNjAwO1xuXG4gICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbmV3LXRhc2stbW9kYWwtd3JhcHBlclwiKTtcbiAgICBjb25zdCBtb2RhbCA9IHdyYXBwZXIucXVlcnlTZWxlY3RvcihcIi5uZXctdGFzay1tb2RhbFwiKTtcblxuICAgIG1vZGFsLmNsYXNzTGlzdC5hZGQoXCJtb2RhbC1kaXNzbWlzLWFuaW1hdGlvblwiKTtcbiAgICB3cmFwcGVyLmNsYXNzTGlzdC5yZW1vdmUoXCJ3cmFwcGVyLWZhZGUtaW4tYW5pbWF0aW9uXCIpO1xuICAgIHdyYXBwZXIuY2xhc3NMaXN0LmFkZChcIndyYXBwZXItZmFkZS1vdXQtYW5pbWF0aW9uXCIpO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgd3JhcHBlci5jbGFzc0xpc3QuYWRkKFwiaGlkZVwiKTtcbiAgICAgIG1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoXCJtb2RhbC1kaXNzbWlzLWFuaW1hdGlvblwiKTtcbiAgICAgIHdyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZShcIndyYXBwZXItZmFkZS1vdXQtYW5pbWF0aW9uXCIpO1xuICAgICAgd3JhcHBlci5jbGFzc0xpc3QuYWRkKFwid3JhcHBlci1mYWRlLWluLWFuaW1hdGlvblwiKTtcbiAgICB9LCBNT0RBTF9DTE9TSU5HX0FOSU1BVElPTl9EVVJBVElPTik7XG4gIH1cblxuICBhZGROZXdUYXNrU3VibWl0TGlzdGVuZXIoKSB7XG4gICAgY29uc3QgYnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNuZXctdGFzay1zdWJtaXRcIik7XG4gICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgLy8gdmFsaWRhdGUgZm9ybVxuICAgICAgdGhpcy5mb3JtVmFsaWRhdGlvbi5pbml0KCk7XG4gICAgICBpZiAodGhpcy5mb3JtVmFsaWRhdGlvbi5pc1ZhbGlkKCkpIHtcbiAgICAgICAgY29uc3QgdGFzayA9IHRoaXMuZm9ybVZhbGlkYXRpb24uZ2V0VGFzaygpO1xuICAgICAgICBjb25zb2xlLmxvZyh0YXNrKTtcbiAgICAgICAgdGhpcy5zdWJtaXROZXdUYXNrTW9kYWwodGFzayk7XG4gICAgICAgIHRoaXMuYW5pbWF0ZU1vZGFsQ2xvc2luZygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgc3VibWl0TmV3VGFza01vZGFsKHRhc2spIHtcbiAgICBjb25zb2xlLmxvZyhcIk5ldyB0YXNrIHN1Ym1pdGVkISBcIik7XG4gICAgLy8gc3RvcmUgZGF0YSBpbiBhIG1vZGVsXG4gICAgdGhpcy5tb2RlbC5hZGRUYXNrKHRhc2spO1xuICAgIC8vIHJlcmVuZGVyIHZpZXdcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIGNvbnNvbGUubG9nKHRoaXMubW9kZWwuZ2V0Q3VycmVudFByb2plY3QoKS50YXNrcy5sZW5ndGgpO1xuICB9XG5cbiAgYWRkVG9nZ2xlTW9yZU1lbnVMaXN0ZW5lcigpIHtcbiAgICBjb25zdCBidG5zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi50YXNrLW1lbnUgLm1vcmVcIik7XG4gICAgZm9yIChsZXQgYnRuIG9mIGJ0bnMpIHtcbiAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgICAgY29uc3QgbWVudSA9IGJ0bi5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIG1lbnUuY2xhc3NMaXN0LnRvZ2dsZShcImhpZGVcIik7XG4gICAgICAgIH0sIDUwKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgLy8gaWYgY2xpY2tlZCBvdXRzaWRlIG9mIC5tb3JlLW1lbnUgYW5kIG5vdCBvbiBtb3JlIGJ1dHRvblxuICAgICAgaWYgKFxuICAgICAgICAhZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibW9yZS1tZW51XCIpICYmXG4gICAgICAgICFlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJtb3JlLW1lbnUtb3B0aW9uXCIpXG4gICAgICApIHtcbiAgICAgICAgLy8gaGlkZSBhbGwgbWVudXNcbiAgICAgICAgY29uc3QgbWVudXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1vcmUtbWVudTpub3QoLmhpZGUpXCIpO1xuICAgICAgICBmb3IgKGxldCBtZW51IG9mIG1lbnVzKSB7XG4gICAgICAgICAgbWVudS5jbGFzc0xpc3QuYWRkKFwiaGlkZVwiKTsgLy8gaGlkZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBhZGREZWxldGVUYXNrQ2xpY2tMaXN0ZW5lcigpIHtcbiAgICBjb25zdCBkZWxldGVCdG5zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tb3JlLW1lbnUtb3B0aW9uLmRlbGV0ZVwiKTtcbiAgICBmb3IgKGxldCBidG4gb2YgZGVsZXRlQnRucykge1xuICAgICAgY29uc3QgaW5kZXggPVxuICAgICAgICBidG4ucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LmdldEF0dHJpYnV0ZShcbiAgICAgICAgICBcImRhdGEtaW5kZXhcIlxuICAgICAgICApO1xuICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmhhbmRsZURlbGV0ZVRhc2suYmluZCh0aGlzLCBpbmRleCkpO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZURlbGV0ZVRhc2soaW5kZXgpIHtcbiAgICBjb25zb2xlLmxvZyhcIkRlbGV0aW5nIHRhc2sgd2l0aCBpZCBcIiArIGluZGV4KTtcbiAgICAvLyB0aGlzLmNvbmZpcm1EZWxldGluZ1Rhc2soKTtcbiAgICAvLyBtb2RlbC5kZWxldGVUYXNrKHRhc2tJZCk7XG4gIH1cblxuICBhZGRFZGl0VGFza0NsaWNrTGlzdGVuZXIoKSB7XG4gICAgY29uc3QgZWRpdEJ0bnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1vcmUtbWVudS1vcHRpb24uZWRpdFwiKTtcbiAgICBmb3IgKGxldCBidG4gb2YgZWRpdEJ0bnMpIHtcbiAgICAgIGNvbnN0IGluZGV4ID1cbiAgICAgICAgYnRuLnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgXCJkYXRhLWluZGV4XCJcbiAgICAgICAgKTtcbiAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5oYW5kbGVFZGl0VGFzay5iaW5kKHRoaXMsIGluZGV4KSk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlRWRpdFRhc2soaW5kZXgpIHtcbiAgICBjb25zb2xlLmxvZyhcIkVkaXRpbmcgdGFzayB3aXRoIGlkIFwiICsgaW5kZXgpO1xuICAgIC8vIG9wZW4gZWRpdCBtb2RhbFxuICB9XG5cbiAgYWRkVG9nZ2xlRGFya01vZGVDbGlja0xpc3RlbmVyKCkge1xuICAgIGNvbnNvbGUubG9nKFwiRGFya21vZGUgdG9nZ2xlIGxpc3RlbmVyIGF0dGFjaGVkXCIpO1xuICAgIGNvbnN0IGJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZGFyay1tb2RlLWljb25cIik7XG4gICAgaWYgKGJ0bikge1xuICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgICBjb25zdCBib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHlcIik7XG4gICAgICAgIGNvbnNvbGUubG9nKGJvZHkpO1xuICAgICAgICBib2R5LmNsYXNzTGlzdC50b2dnbGUoXCJkYXJrLW1vZGVcIik7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coXCJEYXJrLW1vZGUgc3dpdGNoIGJ1dHRvbiBub3QgZm91bmRcIik7XG4gICAgfVxuICB9XG5cbiAgYWRkT3ZlcnZpZXdQYWdlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5hZGRQcm9qZWN0VGlsZUNsaWNrTGlzdGVuZXIoKTtcbiAgICB0aGlzLmFkZE5ld1Byb2plY3RCdXR0b25MaXN0ZW5lcigpO1xuICB9XG5cbiAgYWRkUHJvamVjdFRpbGVDbGlja0xpc3RlbmVyKCkge1xuICAgIGNvbnN0IHRpbGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcbiAgICAgIFwiLnByb2plY3QtZ3JpZC1pdGVtOm5vdCgubmV3LXByb2plY3QtYnRuKVwiXG4gICAgKTtcbiAgICB0aWxlcy5mb3JFYWNoKCh0aWxlKSA9PiB7XG4gICAgICB0aWxlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhlLnRhcmdldCk7XG4gICAgICAgIGNvbnN0IGJnID0gZS50YXJnZXQ7XG4gICAgICAgIGNvbnNvbGUubG9nKGJnLnBhcmVudEVsZW1lbnQpO1xuICAgICAgICBjb25zdCBwcm9qZWN0SWQgPSBiZy5wYXJlbnRFbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtcHJvamVjdC1pbmRleFwiKTtcbiAgICAgICAgdGhpcy5jaGFuZ2VDdXJyZW50UHJvamVjdChwcm9qZWN0SWQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBhZGROZXdQcm9qZWN0QnV0dG9uTGlzdGVuZXIoKSB7XG4gICAgY29uc3QgbmV3UHJvamVjdEJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm5ldy1wcm9qZWN0LWJ0blwiKTtcblxuICAgIG5ld1Byb2plY3RCdXR0b25zLmZvckVhY2goKGJ0bikgPT4ge1xuICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgICB0aGlzLm9wZW5OZXdQcm9qZWN0TW9kYWwoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgb3Blbk5ld1Byb2plY3RNb2RhbCgpIHtcbiAgICBjb25zb2xlLmxvZyhcIk5ldyBwcm9qZWN0IG1vZGFsIG9wZW5lZFwiKTtcbiAgfVxufVxuIiwiaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNEYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiB2YWx1ZSBhIGRhdGU/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGFuIGluc3RhbmNlIG9mIERhdGUuIFRoZSBmdW5jdGlvbiB3b3JrcyBmb3IgZGF0ZXMgdHJhbnNmZXJyZWQgYWNyb3NzIGlmcmFtZXMuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gdGhlIHZhbHVlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBkYXRlXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhIHZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUobmV3IERhdGUoKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYW4gaW52YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKG5ldyBEYXRlKE5hTikpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHNvbWUgdmFsdWU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUoJzIwMTQtMDItMzEnKVxuICogLy89PiBmYWxzZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYW4gb2JqZWN0OlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKHt9KVxuICogLy89PiBmYWxzZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzRGF0ZSh2YWx1ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSB8fCB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IERhdGVdJztcbn0iLCJpbXBvcnQgaXNEYXRlIGZyb20gXCIuLi9pc0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNWYWxpZFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB2YWxpZD9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgZmFsc2UgaWYgYXJndW1lbnQgaXMgSW52YWxpZCBEYXRlIGFuZCB0cnVlIG90aGVyd2lzZS5cbiAqIEFyZ3VtZW50IGlzIGNvbnZlcnRlZCB0byBEYXRlIHVzaW5nIGB0b0RhdGVgLiBTZWUgW3RvRGF0ZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy90b0RhdGV9XG4gKiBJbnZhbGlkIERhdGUgaXMgYSBEYXRlLCB3aG9zZSB0aW1lIHZhbHVlIGlzIE5hTi5cbiAqXG4gKiBUaW1lIHZhbHVlIG9mIERhdGU6IGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuOS4xLjFcbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIC0gTm93IGBpc1ZhbGlkYCBkb2Vzbid0IHRocm93IGFuIGV4Y2VwdGlvblxuICogICBpZiB0aGUgZmlyc3QgYXJndW1lbnQgaXMgbm90IGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKiAgIEluc3RlYWQsIGFyZ3VtZW50IGlzIGNvbnZlcnRlZCBiZWZvcmVoYW5kIHVzaW5nIGB0b0RhdGVgLlxuICpcbiAqICAgRXhhbXBsZXM6XG4gKlxuICogICB8IGBpc1ZhbGlkYCBhcmd1bWVudCAgICAgICAgfCBCZWZvcmUgdjIuMC4wIHwgdjIuMC4wIG9ud2FyZCB8XG4gKiAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLXxcbiAqICAgfCBgbmV3IERhdGUoKWAgICAgICAgICAgICAgIHwgYHRydWVgICAgICAgICB8IGB0cnVlYCAgICAgICAgfFxuICogICB8IGBuZXcgRGF0ZSgnMjAxNi0wMS0wMScpYCAgfCBgdHJ1ZWAgICAgICAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYG5ldyBEYXRlKCcnKWAgICAgICAgICAgICB8IGBmYWxzZWAgICAgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqICAgfCBgbmV3IERhdGUoMTQ4ODM3MDgzNTA4MSlgIHwgYHRydWVgICAgICAgICB8IGB0cnVlYCAgICAgICAgfFxuICogICB8IGBuZXcgRGF0ZShOYU4pYCAgICAgICAgICAgfCBgZmFsc2VgICAgICAgIHwgYGZhbHNlYCAgICAgICB8XG4gKiAgIHwgYCcyMDE2LTAxLTAxJ2AgICAgICAgICAgICB8IGBUeXBlRXJyb3JgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqICAgfCBgJydgICAgICAgICAgICAgICAgICAgICAgIHwgYFR5cGVFcnJvcmAgICB8IGBmYWxzZWAgICAgICAgfFxuICogICB8IGAxNDg4MzcwODM1MDgxYCAgICAgICAgICAgfCBgVHlwZUVycm9yYCAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYE5hTmAgICAgICAgICAgICAgICAgICAgICB8IGBUeXBlRXJyb3JgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqXG4gKiAgIFdlIGludHJvZHVjZSB0aGlzIGNoYW5nZSB0byBtYWtlICpkYXRlLWZucyogY29uc2lzdGVudCB3aXRoIEVDTUFTY3JpcHQgYmVoYXZpb3JcbiAqICAgdGhhdCB0cnkgdG8gY29lcmNlIGFyZ3VtZW50cyB0byB0aGUgZXhwZWN0ZWQgdHlwZVxuICogICAod2hpY2ggaXMgYWxzbyB0aGUgY2FzZSB3aXRoIG90aGVyICpkYXRlLWZucyogZnVuY3Rpb25zKS5cbiAqXG4gKiBAcGFyYW0geyp9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlIGlzIHZhbGlkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgyMDE0LCAxLCAzMSkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWx1ZSwgY29udmVydGFibGUgaW50byBhIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKDEzOTM4MDQ4MDAwMDApXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSBpbnZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKCcnKSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1ZhbGlkKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcblxuICBpZiAoIWlzRGF0ZShkaXJ0eURhdGUpICYmIHR5cGVvZiBkaXJ0eURhdGUgIT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgcmV0dXJuICFpc05hTihOdW1iZXIoZGF0ZSkpO1xufSIsInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIHNlY29uZCcsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiAnMSBzZWNvbmQnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIGhhbGZBTWludXRlOiAnaGFsZiBhIG1pbnV0ZScsXG4gIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBtaW51dGUnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJzEgbWludXRlJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICBhYm91dFhIb3Vyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgaG91cicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhIb3Vyczoge1xuICAgIG9uZTogJzEgaG91cicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAnMSBkYXknLFxuICAgIG90aGVyOiAne3tjb3VudH19IGRheXMnXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB3ZWVrJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAnMSB3ZWVrJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBtb250aCcsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICB4TW9udGhzOiB7XG4gICAgb25lOiAnMSBtb250aCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICBhYm91dFhZZWFyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJzEgeWVhcicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBvbmU6ICdvdmVyIDEgeWVhcicsXG4gICAgb3RoZXI6ICdvdmVyIHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgYWxtb3N0WFllYXJzOiB7XG4gICAgb25lOiAnYWxtb3N0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhbG1vc3Qge3tjb3VudH19IHllYXJzJ1xuICB9XG59O1xuXG52YXIgZm9ybWF0RGlzdGFuY2UgPSBmdW5jdGlvbiAodG9rZW4sIGNvdW50LCBvcHRpb25zKSB7XG4gIHZhciByZXN1bHQ7XG4gIHZhciB0b2tlblZhbHVlID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuXG4gIGlmICh0eXBlb2YgdG9rZW5WYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlO1xuICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vbmU7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudC50b1N0cmluZygpKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLmFkZFN1ZmZpeCkge1xuICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gJiYgb3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuICdpbiAnICsgcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgJyBhZ28nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXREaXN0YW5jZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZEZvcm1hdExvbmdGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIC8vIFRPRE86IFJlbW92ZSBTdHJpbmcoKVxuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICB2YXIgZm9ybWF0ID0gYXJncy5mb3JtYXRzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHNbYXJncy5kZWZhdWx0V2lkdGhdO1xuICAgIHJldHVybiBmb3JtYXQ7XG4gIH07XG59IiwiaW1wb3J0IGJ1aWxkRm9ybWF0TG9uZ0ZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzXCI7XG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdFRUVFLCBNTU1NIGRvLCB5JyxcbiAgbG9uZzogJ01NTU0gZG8sIHknLFxuICBtZWRpdW06ICdNTU0gZCwgeScsXG4gIHNob3J0OiAnTU0vZGQveXl5eSdcbn07XG52YXIgdGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdoOm1tOnNzIGEgenp6eicsXG4gIGxvbmc6ICdoOm1tOnNzIGEgeicsXG4gIG1lZGl1bTogJ2g6bW06c3MgYScsXG4gIHNob3J0OiAnaDptbSBhJ1xufTtcbnZhciBkYXRlVGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBsb25nOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbWVkaXVtOiAne3tkYXRlfX0sIHt7dGltZX19JyxcbiAgc2hvcnQ6ICd7e2RhdGV9fSwge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdExvbmc7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaFBhdHRlcm5GbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLm1hdGNoUGF0dGVybik7XG4gICAgaWYgKCFtYXRjaFJlc3VsdCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5wYXJzZVBhdHRlcm4pO1xuICAgIGlmICghcGFyc2VSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIHZhciB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhwYXJzZVJlc3VsdFswXSkgOiBwYXJzZVJlc3VsdFswXTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB2YXIgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHJlc3RcbiAgICB9O1xuICB9O1xufSIsInZhciBmb3JtYXRSZWxhdGl2ZUxvY2FsZSA9IHtcbiAgbGFzdFdlZWs6IFwiJ2xhc3QnIGVlZWUgJ2F0JyBwXCIsXG4gIHllc3RlcmRheTogXCIneWVzdGVyZGF5IGF0JyBwXCIsXG4gIHRvZGF5OiBcIid0b2RheSBhdCcgcFwiLFxuICB0b21vcnJvdzogXCIndG9tb3Jyb3cgYXQnIHBcIixcbiAgbmV4dFdlZWs6IFwiZWVlZSAnYXQnIHBcIixcbiAgb3RoZXI6ICdQJ1xufTtcblxudmFyIGZvcm1hdFJlbGF0aXZlID0gZnVuY3Rpb24gKHRva2VuLCBfZGF0ZSwgX2Jhc2VEYXRlLCBfb3B0aW9ucykge1xuICByZXR1cm4gZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0UmVsYXRpdmU7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRMb2NhbGl6ZUZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXJ0eUluZGV4LCBkaXJ0eU9wdGlvbnMpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgY29udGV4dCA9IG9wdGlvbnMuY29udGV4dCA/IFN0cmluZyhvcHRpb25zLmNvbnRleHQpIDogJ3N0YW5kYWxvbmUnO1xuICAgIHZhciB2YWx1ZXNBcnJheTtcblxuICAgIGlmIChjb250ZXh0ID09PSAnZm9ybWF0dGluZycgJiYgYXJncy5mb3JtYXR0aW5nVmFsdWVzKSB7XG4gICAgICB2YXIgZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIHx8IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGRlZmF1bHRXaWR0aDtcbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy5mb3JtYXR0aW5nVmFsdWVzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbZGVmYXVsdFdpZHRoXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9kZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRXaWR0aDtcblxuICAgICAgdmFyIF93aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcblxuICAgICAgdmFsdWVzQXJyYXkgPSBhcmdzLnZhbHVlc1tfd2lkdGhdIHx8IGFyZ3MudmFsdWVzW19kZWZhdWx0V2lkdGhdO1xuICAgIH1cblxuICAgIHZhciBpbmRleCA9IGFyZ3MuYXJndW1lbnRDYWxsYmFjayA/IGFyZ3MuYXJndW1lbnRDYWxsYmFjayhkaXJ0eUluZGV4KSA6IGRpcnR5SW5kZXg7IC8vIEB0cy1pZ25vcmU6IEZvciBzb21lIHJlYXNvbiBUeXBlU2NyaXB0IGp1c3QgZG9uJ3Qgd2FudCB0byBtYXRjaCBpdCwgbm8gbWF0dGVyIGhvdyBoYXJkIHdlIHRyeS4gSSBjaGFsbGVuZ2UgeW91IHRvIHRyeSB0byByZW1vdmUgaXQhXG5cbiAgICByZXR1cm4gdmFsdWVzQXJyYXlbaW5kZXhdO1xuICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGg7XG4gICAgdmFyIG1hdGNoUGF0dGVybiA9IHdpZHRoICYmIGFyZ3MubWF0Y2hQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5tYXRjaFBhdHRlcm5zW2FyZ3MuZGVmYXVsdE1hdGNoV2lkdGhdO1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChtYXRjaFBhdHRlcm4pO1xuXG4gICAgaWYgKCFtYXRjaFJlc3VsdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VQYXR0ZXJucyA9IHdpZHRoICYmIGFyZ3MucGFyc2VQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5wYXJzZVBhdHRlcm5zW2FyZ3MuZGVmYXVsdFBhcnNlV2lkdGhdO1xuICAgIHZhciBrZXkgPSBBcnJheS5pc0FycmF5KHBhcnNlUGF0dGVybnMpID8gZmluZEluZGV4KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpO1xuICAgIH0pIDogZmluZEtleShwYXJzZVBhdHRlcm5zLCBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICB9KTtcbiAgICB2YXIgdmFsdWU7XG4gICAgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2soa2V5KSA6IGtleTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB2YXIgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHJlc3RcbiAgICB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KGtleSkgJiYgcHJlZGljYXRlKG9iamVjdFtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgPSAwOyBrZXkgPCBhcnJheS5sZW5ndGg7IGtleSsrKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufSIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tIFwiLi9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0TG9uZyBmcm9tIFwiLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXRSZWxhdGl2ZSBmcm9tIFwiLi9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSBcIi4vX2xpYi9sb2NhbGl6ZS9pbmRleC5qc1wiO1xuaW1wb3J0IG1hdGNoIGZyb20gXCIuL19saWIvbWF0Y2gvaW5kZXguanNcIjtcblxuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IEVuZ2xpc2ggbG9jYWxlIChVbml0ZWQgU3RhdGVzKS5cbiAqIEBsYW5ndWFnZSBFbmdsaXNoXG4gKiBAaXNvLTYzOS0yIGVuZ1xuICogQGF1dGhvciBTYXNoYSBLb3NzIFtAa29zc25vY29ycF17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2tvc3Nub2NvcnB9XG4gKiBAYXV0aG9yIExlc2hhIEtvc3MgW0BsZXNoYWtvc3Nde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9sZXNoYWtvc3N9XG4gKi9cbnZhciBsb2NhbGUgPSB7XG4gIGNvZGU6ICdlbi1VUycsXG4gIGZvcm1hdERpc3RhbmNlOiBmb3JtYXREaXN0YW5jZSxcbiAgZm9ybWF0TG9uZzogZm9ybWF0TG9uZyxcbiAgZm9ybWF0UmVsYXRpdmU6IGZvcm1hdFJlbGF0aXZlLFxuICBsb2NhbGl6ZTogbG9jYWxpemUsXG4gIG1hdGNoOiBtYXRjaCxcbiAgb3B0aW9uczoge1xuICAgIHdlZWtTdGFydHNPbjogMFxuICAgIC8qIFN1bmRheSAqL1xuICAgICxcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IDFcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qc1wiO1xudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0InLCAnQSddLFxuICBhYmJyZXZpYXRlZDogWydCQycsICdBRCddLFxuICB3aWRlOiBbJ0JlZm9yZSBDaHJpc3QnLCAnQW5ubyBEb21pbmknXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWydRMScsICdRMicsICdRMycsICdRNCddLFxuICB3aWRlOiBbJzFzdCBxdWFydGVyJywgJzJuZCBxdWFydGVyJywgJzNyZCBxdWFydGVyJywgJzR0aCBxdWFydGVyJ11cbn07IC8vIE5vdGU6IGluIEVuZ2xpc2gsIHRoZSBuYW1lcyBvZiBkYXlzIG9mIHRoZSB3ZWVrIGFuZCBtb250aHMgYXJlIGNhcGl0YWxpemVkLlxuLy8gSWYgeW91IGFyZSBtYWtpbmcgYSBuZXcgbG9jYWxlIGJhc2VkIG9uIHRoaXMgb25lLCBjaGVjayBpZiB0aGUgc2FtZSBpcyB0cnVlIGZvciB0aGUgbGFuZ3VhZ2UgeW91J3JlIHdvcmtpbmcgb24uXG4vLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbi8vIGUuZy4gaW4gU3BhbmlzaCBsYW5ndWFnZSB0aGUgd2Vla2RheXMgYW5kIG1vbnRocyBzaG91bGQgYmUgaW4gdGhlIGxvd2VyY2FzZS5cblxudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnSicsICdGJywgJ00nLCAnQScsICdNJywgJ0onLCAnSicsICdBJywgJ1MnLCAnTycsICdOJywgJ0QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXSxcbiAgd2lkZTogWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ11cbn07XG52YXIgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFsnUycsICdNJywgJ1QnLCAnVycsICdUJywgJ0YnLCAnUyddLFxuICBzaG9ydDogWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddLFxuICBhYmJyZXZpYXRlZDogWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXSxcbiAgd2lkZTogWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfVxufTtcblxudmFyIG9yZGluYWxOdW1iZXIgPSBmdW5jdGlvbiAoZGlydHlOdW1iZXIsIF9vcHRpb25zKSB7XG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpOyAvLyBJZiBvcmRpbmFsIG51bWJlcnMgZGVwZW5kIG9uIGNvbnRleHQsIGZvciBleGFtcGxlLFxuICAvLyBpZiB0aGV5IGFyZSBkaWZmZXJlbnQgZm9yIGRpZmZlcmVudCBncmFtbWF0aWNhbCBnZW5kZXJzLFxuICAvLyB1c2UgYG9wdGlvbnMudW5pdGAuXG4gIC8vXG4gIC8vIGB1bml0YCBjYW4gYmUgJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RhdGUnLCAnZGF5T2ZZZWFyJyxcbiAgLy8gJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLlxuXG4gIHZhciByZW0xMDAgPSBudW1iZXIgJSAxMDA7XG5cbiAgaWYgKHJlbTEwMCA+IDIwIHx8IHJlbTEwMCA8IDEwKSB7XG4gICAgc3dpdGNoIChyZW0xMDAgJSAxMCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3N0JztcblxuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ25kJztcblxuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3JkJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVtYmVyICsgJ3RoJztcbn07XG5cbnZhciBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcjogb3JkaW5hbE51bWJlcixcbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogcXVhcnRlclZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBhcmd1bWVudENhbGxiYWNrOiBmdW5jdGlvbiAocXVhcnRlcikge1xuICAgICAgcmV0dXJuIHF1YXJ0ZXIgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogJ3dpZGUnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxpemU7IiwiaW1wb3J0IGJ1aWxkTWF0Y2hGbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanNcIjtcbmltcG9ydCBidWlsZE1hdGNoUGF0dGVybkZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanNcIjtcbnZhciBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL14oXFxkKykodGh8c3R8bmR8cmQpPy9pO1xudmFyIHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXFxkKy9pO1xudmFyIG1hdGNoRXJhUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYnxhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oYlxcLj9cXHM/Y1xcLj98YlxcLj9cXHM/Y1xcLj9cXHM/ZVxcLj98YVxcLj9cXHM/ZFxcLj98Y1xcLj9cXHM/ZVxcLj8pL2ksXG4gIHdpZGU6IC9eKGJlZm9yZSBjaHJpc3R8YmVmb3JlIGNvbW1vbiBlcmF8YW5ubyBkb21pbml8Y29tbW9uIGVyYSkvaVxufTtcbnZhciBwYXJzZUVyYVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXmIvaSwgL14oYXxjKS9pXVxufTtcbnZhciBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL15xWzEyMzRdL2ksXG4gIHdpZGU6IC9eWzEyMzRdKHRofHN0fG5kfHJkKT8gcXVhcnRlci9pXG59O1xudmFyIHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMS9pLCAvMi9pLCAvMy9pLCAvNC9pXVxufTtcbnZhciBtYXRjaE1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bamZtYXNvbmRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXihqYW58ZmVifG1hcnxhcHJ8bWF5fGp1bnxqdWx8YXVnfHNlcHxvY3R8bm92fGRlYykvaSxcbiAgd2lkZTogL14oamFudWFyeXxmZWJydWFyeXxtYXJjaHxhcHJpbHxtYXl8anVuZXxqdWx5fGF1Z3VzdHxzZXB0ZW1iZXJ8b2N0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcikvaVxufTtcbnZhciBwYXJzZU1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9eai9pLCAvXmYvaSwgL15tL2ksIC9eYS9pLCAvXm0vaSwgL15qL2ksIC9eai9pLCAvXmEvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldLFxuICBhbnk6IFsvXmphL2ksIC9eZi9pLCAvXm1hci9pLCAvXmFwL2ksIC9ebWF5L2ksIC9eanVuL2ksIC9eanVsL2ksIC9eYXUvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldXG59O1xudmFyIG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bc210d2ZdL2ksXG4gIHNob3J0OiAvXihzdXxtb3x0dXx3ZXx0aHxmcnxzYSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKHN1bnxtb258dHVlfHdlZHx0aHV8ZnJpfHNhdCkvaSxcbiAgd2lkZTogL14oc3VuZGF5fG1vbmRheXx0dWVzZGF5fHdlZG5lc2RheXx0aHVyc2RheXxmcmlkYXl8c2F0dXJkYXkpL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15zL2ksIC9ebS9pLCAvXnQvaSwgL153L2ksIC9edC9pLCAvXmYvaSwgL15zL2ldLFxuICBhbnk6IFsvXnN1L2ksIC9ebS9pLCAvXnR1L2ksIC9edy9pLCAvXnRoL2ksIC9eZi9pLCAvXnNhL2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYXxwfG1pfG58KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pLFxuICBhbnk6IC9eKFthcF1cXC4/XFxzP21cXC4/fG1pZG5pZ2h0fG5vb258KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pXG59O1xudmFyIHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueToge1xuICAgIGFtOiAvXmEvaSxcbiAgICBwbTogL15wL2ksXG4gICAgbWlkbmlnaHQ6IC9ebWkvaSxcbiAgICBub29uOiAvXm5vL2ksXG4gICAgbW9ybmluZzogL21vcm5pbmcvaSxcbiAgICBhZnRlcm5vb246IC9hZnRlcm5vb24vaSxcbiAgICBldmVuaW5nOiAvZXZlbmluZy9pLFxuICAgIG5pZ2h0OiAvbmlnaHQvaVxuICB9XG59O1xudmFyIG1hdGNoID0ge1xuICBvcmRpbmFsTnVtYmVyOiBidWlsZE1hdGNoUGF0dGVybkZuKHtcbiAgICBtYXRjaFBhdHRlcm46IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgcGFyc2VQYXR0ZXJuOiBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9KSxcbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZUVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55JyxcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICdhbnknLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbWF0Y2g7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9JbnRlZ2VyKGRpcnR5TnVtYmVyKSB7XG4gIGlmIChkaXJ0eU51bWJlciA9PT0gbnVsbCB8fCBkaXJ0eU51bWJlciA9PT0gdHJ1ZSB8fCBkaXJ0eU51bWJlciA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG5cbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XG5cbiAgaWYgKGlzTmFOKG51bWJlcikpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG5cbiAgcmV0dXJuIG51bWJlciA8IDAgPyBNYXRoLmNlaWwobnVtYmVyKSA6IE1hdGguZmxvb3IobnVtYmVyKTtcbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBhZGRNaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gYmUgYWRkZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbWlsbGlzZWNvbmRzIGFkZGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFkZCA3NTAgbWlsbGlzZWNvbmRzIHRvIDEwIEp1bHkgMjAxNCAxMjo0NTozMC4wMDA6XG4gKiBjb25zdCByZXN1bHQgPSBhZGRNaWxsaXNlY29uZHMobmV3IERhdGUoMjAxNCwgNiwgMTAsIDEyLCA0NSwgMzAsIDApLCA3NTApXG4gKiAvLz0+IFRodSBKdWwgMTAgMjAxNCAxMjo0NTozMC43NTBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRNaWxsaXNlY29uZHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIHRpbWVzdGFtcCA9IHRvRGF0ZShkaXJ0eURhdGUpLmdldFRpbWUoKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIHJldHVybiBuZXcgRGF0ZSh0aW1lc3RhbXAgKyBhbW91bnQpO1xufSIsImltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgYWRkTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9hZGRNaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHN1Yk1pbGxpc2Vjb25kc1xuICogQGNhdGVnb3J5IE1pbGxpc2Vjb25kIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIHN1YnRyYWN0ZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbWlsbGlzZWNvbmRzIHN1YnRyYWN0ZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU3VidHJhY3QgNzUwIG1pbGxpc2Vjb25kcyBmcm9tIDEwIEp1bHkgMjAxNCAxMjo0NTozMC4wMDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdWJNaWxsaXNlY29uZHMobmV3IERhdGUoMjAxNCwgNiwgMTAsIDEyLCA0NSwgMzAsIDApLCA3NTApXG4gKiAvLz0+IFRodSBKdWwgMTAgMjAxNCAxMjo0NToyOS4yNTBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdWJNaWxsaXNlY29uZHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIHJldHVybiBhZGRNaWxsaXNlY29uZHMoZGlydHlEYXRlLCAtYW1vdW50KTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9EQVkgPSA4NjQwMDAwMDsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0RheU9mWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB0aW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZZZWFyVGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIHZhciBkaWZmZXJlbmNlID0gdGltZXN0YW1wIC0gc3RhcnRPZlllYXJUaW1lc3RhbXA7XG4gIHJldHVybiBNYXRoLmZsb29yKGRpZmZlcmVuY2UgLyBNSUxMSVNFQ09ORFNfSU5fREFZKSArIDE7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENJU09XZWVrKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IDE7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENGdWxsWWVhcih5ZWFyICsgMSwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIpO1xuXG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn0iLCJpbXBvcnQgZ2V0VVRDSVNPV2Vla1llYXIgZnJvbSBcIi4uL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciB5ZWFyID0gZ2V0VVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeSA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIGRhdGUgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnkpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2Vla1llYXIgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDA7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENJU09XZWVrKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRpZmYgPSBzdGFydE9mVVRDSVNPV2VlayhkYXRlKS5nZXRUaW1lKCkgLSBzdGFydE9mVVRDSVNPV2Vla1llYXIoZGF0ZSkuZ2V0VGltZSgpOyAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBNSUxMSVNFQ09ORFNfSU5fV0VFSykgKyAxO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENXZWVrKGRpcnR5RGF0ZSwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlO1xuICB2YXIgbG9jYWxlV2Vla1N0YXJ0c09uID0gbG9jYWxlICYmIGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLndlZWtTdGFydHNPbjtcbiAgdmFyIGRlZmF1bHRXZWVrU3RhcnRzT24gPSBsb2NhbGVXZWVrU3RhcnRzT24gPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIobG9jYWxlV2Vla1N0YXJ0c09uKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IG9wdGlvbnMud2Vla1N0YXJ0c09uID09IG51bGwgPyBkZWZhdWx0V2Vla1N0YXJ0c09uIDogdG9JbnRlZ2VyKG9wdGlvbnMud2Vla1N0YXJ0c09uKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgdmFyIGRpZmYgPSAoZGF5IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gd2Vla1N0YXJ0c09uO1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSBkaWZmKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDV2Vla1llYXIoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlO1xuICB2YXIgbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlICYmIGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZTtcbiAgdmFyIGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IDEgOiB0b0ludGVnZXIobG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlIDogdG9JbnRlZ2VyKG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAxIGFuZCA3IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoIShmaXJzdFdlZWtDb250YWluc0RhdGUgPj0gMSAmJiBmaXJzdFdlZWtDb250YWluc0RhdGUgPD0gNykpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZmlyc3RXZWVrQ29udGFpbnNEYXRlIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgZmlyc3RXZWVrT2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIgKyAxLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZOZXh0WWVhciwgZGlydHlPcHRpb25zKTtcbiAgdmFyIGZpcnN0V2Vla09mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZlRoaXNZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlRoaXNZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZUaGlzWWVhciwgZGlydHlPcHRpb25zKTtcblxuICBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mVGhpc1llYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxO1xuICB9XG59IiwiaW1wb3J0IGdldFVUQ1dlZWtZZWFyIGZyb20gXCIuLi9nZXRVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENXZWVrWWVhcihkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZTtcbiAgdmFyIGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZSAmJiBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU7XG4gIHZhciBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyAxIDogdG9JbnRlZ2VyKGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA6IHRvSW50ZWdlcihvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIHZhciB5ZWFyID0gZ2V0VVRDV2Vla1llYXIoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpO1xuICB2YXIgZmlyc3RXZWVrID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vlay5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWsuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrLCBkaXJ0eU9wdGlvbnMpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2Vla1llYXIgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDA7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENXZWVrKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRpZmYgPSBzdGFydE9mVVRDV2VlayhkYXRlLCBvcHRpb25zKS5nZXRUaW1lKCkgLSBzdGFydE9mVVRDV2Vla1llYXIoZGF0ZSwgb3B0aW9ucykuZ2V0VGltZSgpOyAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBNSUxMSVNFQ09ORFNfSU5fV0VFSykgKyAxO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZExlYWRpbmdaZXJvcyhudW1iZXIsIHRhcmdldExlbmd0aCkge1xuICB2YXIgc2lnbiA9IG51bWJlciA8IDAgPyAnLScgOiAnJztcbiAgdmFyIG91dHB1dCA9IE1hdGguYWJzKG51bWJlcikudG9TdHJpbmcoKTtcblxuICB3aGlsZSAob3V0cHV0Lmxlbmd0aCA8IHRhcmdldExlbmd0aCkge1xuICAgIG91dHB1dCA9ICcwJyArIG91dHB1dDtcbiAgfVxuXG4gIHJldHVybiBzaWduICsgb3V0cHV0O1xufSIsImltcG9ydCBhZGRMZWFkaW5nWmVyb3MgZnJvbSBcIi4uLy4uL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qc1wiO1xuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKi9cblxudmFyIGZvcm1hdHRlcnMgPSB7XG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgLy8gRnJvbSBodHRwOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LTMxL3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0Zvcm1hdF90b2tlbnNcbiAgICAvLyB8IFllYXIgICAgIHwgICAgIHkgfCB5eSB8ICAgeXl5IHwgIHl5eXkgfCB5eXl5eSB8XG4gICAgLy8gfC0tLS0tLS0tLS18LS0tLS0tLXwtLS0tfC0tLS0tLS18LS0tLS0tLXwtLS0tLS0tfFxuICAgIC8vIHwgQUQgMSAgICAgfCAgICAgMSB8IDAxIHwgICAwMDEgfCAgMDAwMSB8IDAwMDAxIHxcbiAgICAvLyB8IEFEIDEyICAgIHwgICAgMTIgfCAxMiB8ICAgMDEyIHwgIDAwMTIgfCAwMDAxMiB8XG4gICAgLy8gfCBBRCAxMjMgICB8ICAgMTIzIHwgMjMgfCAgIDEyMyB8ICAwMTIzIHwgMDAxMjMgfFxuICAgIC8vIHwgQUQgMTIzNCAgfCAgMTIzNCB8IDM0IHwgIDEyMzQgfCAgMTIzNCB8IDAxMjM0IHxcbiAgICAvLyB8IEFEIDEyMzQ1IHwgMTIzNDUgfCA0NSB8IDEyMzQ1IHwgMTIzNDUgfCAxMjM0NSB8XG4gICAgdmFyIHNpZ25lZFllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7IC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG5cbiAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModG9rZW4gPT09ICd5eScgPyB5ZWFyICUgMTAwIDogeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgIHJldHVybiB0b2tlbiA9PT0gJ00nID8gU3RyaW5nKG1vbnRoICsgMSkgOiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHRoZSBtb250aFxuICBkOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDRGF0ZSgpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF0ZS5nZXRVVENIb3VycygpIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYSc6XG4gICAgICBjYXNlICdhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWUudG9VcHBlckNhc2UoKTtcblxuICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZTtcblxuICAgICAgY2FzZSAnYWFhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlWzBdO1xuXG4gICAgICBjYXNlICdhYWFhJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWUgPT09ICdhbScgPyAnYS5tLicgOiAncC5tLic7XG4gICAgfVxuICB9LFxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyIHx8IDEyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDSG91cnMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWludXRlXG4gIG06IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENNaW51dGVzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIFNlY29uZFxuICBzOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDU2Vjb25kcygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUzogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIG51bWJlck9mRGlnaXRzID0gdG9rZW4ubGVuZ3RoO1xuICAgIHZhciBtaWxsaXNlY29uZHMgPSBkYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICAgIHZhciBmcmFjdGlvbmFsU2Vjb25kcyA9IE1hdGguZmxvb3IobWlsbGlzZWNvbmRzICogTWF0aC5wb3coMTAsIG51bWJlck9mRGlnaXRzIC0gMykpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZnJhY3Rpb25hbFNlY29uZHMsIHRva2VuLmxlbmd0aCk7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXJzOyIsImltcG9ydCBnZXRVVENEYXlPZlllYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDRGF5T2ZZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDSVNPV2VlayBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDSVNPV2Vla1llYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENXZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENXZWVrWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tIFwiLi4vLi4vYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzXCI7XG5pbXBvcnQgbGlnaHRGb3JtYXR0ZXJzIGZyb20gXCIuLi9saWdodEZvcm1hdHRlcnMvaW5kZXguanNcIjtcbnZhciBkYXlQZXJpb2RFbnVtID0ge1xuICBhbTogJ2FtJyxcbiAgcG06ICdwbScsXG4gIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICBub29uOiAnbm9vbicsXG4gIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICBuaWdodDogJ25pZ2h0J1xufTtcbi8qXG4gKiB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8ICBhICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBBKiB8IE1pbGxpc2Vjb25kcyBpbiBkYXkgICAgICAgICAgICB8XG4gKiB8ICBiICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICB8ICBCICB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICB8XG4gKiB8ICBjICB8IFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrICB8ICBDKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8XG4gKiB8ICBkICB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICB8ICBEICB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBlICB8IExvY2FsIGRheSBvZiB3ZWVrICAgICAgICAgICAgICB8ICBFICB8IERheSBvZiB3ZWVrICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBmICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBGKiB8IERheSBvZiB3ZWVrIGluIG1vbnRoICAgICAgICAgICB8XG4gKiB8ICBnKiB8IE1vZGlmaWVkIEp1bGlhbiBkYXkgICAgICAgICAgICB8ICBHICB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBoICB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICB8ICBIICB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBpISB8IElTTyBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgICB8ICBJISB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICB8XG4gKiB8ICBqKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8ICBKKiB8IExvY2FsaXplZCBob3VyIHcvbyBkYXkgcGVyaW9kICB8XG4gKiB8ICBrICB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICB8ICBLICB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBsKiB8IChkZXByZWNhdGVkKSAgICAgICAgICAgICAgICAgICB8ICBMICB8IFN0YW5kLWFsb25lIG1vbnRoICAgICAgICAgICAgICB8XG4gKiB8ICBtICB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBNICB8IE1vbnRoICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBuICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBOICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBvISB8IE9yZGluYWwgbnVtYmVyIG1vZGlmaWVyICAgICAgICB8ICBPICB8IFRpbWV6b25lIChHTVQpICAgICAgICAgICAgICAgICB8XG4gKiB8ICBwISB8IExvbmcgbG9jYWxpemVkIHRpbWUgICAgICAgICAgICB8ICBQISB8IExvbmcgbG9jYWxpemVkIGRhdGUgICAgICAgICAgICB8XG4gKiB8ICBxICB8IFN0YW5kLWFsb25lIHF1YXJ0ZXIgICAgICAgICAgICB8ICBRICB8IFF1YXJ0ZXIgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICByKiB8IFJlbGF0ZWQgR3JlZ29yaWFuIHllYXIgICAgICAgICB8ICBSISB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICB8XG4gKiB8ICBzICB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICB8ICBTICB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICB8XG4gKiB8ICB0ISB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICB8ICBUISB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICB8XG4gKiB8ICB1ICB8IEV4dGVuZGVkIHllYXIgICAgICAgICAgICAgICAgICB8ICBVKiB8IEN5Y2xpYyB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICB2KiB8IFRpbWV6b25lIChnZW5lcmljIG5vbi1sb2NhdC4pICB8ICBWKiB8IFRpbWV6b25lIChsb2NhdGlvbikgICAgICAgICAgICB8XG4gKiB8ICB3ICB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICB8ICBXKiB8IFdlZWsgb2YgbW9udGggICAgICAgICAgICAgICAgICB8XG4gKiB8ICB4ICB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICB8ICBYICB8IFRpbWV6b25lIChJU08tODYwMSkgICAgICAgICAgICB8XG4gKiB8ICB5ICB8IFllYXIgKGFicykgICAgICAgICAgICAgICAgICAgICB8ICBZICB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICB8XG4gKiB8ICB6ICB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSB8ICBaKiB8IFRpbWV6b25lIChhbGlhc2VzKSAgICAgICAgICAgICB8XG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgKiBhcmUgbm90IGltcGxlbWVudGVkIGJ1dCByZXNlcnZlZCBieSBVbmljb2RlIHN0YW5kYXJkLlxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICEgYXJlIG5vbi1zdGFuZGFyZCwgYnV0IGltcGxlbWVudGVkIGJ5IGRhdGUtZm5zOlxuICogLSBgb2AgbW9kaWZpZXMgdGhlIHByZXZpb3VzIHRva2VuIHRvIHR1cm4gaXQgaW50byBhbiBvcmRpbmFsIChzZWUgYGZvcm1hdGAgZG9jcylcbiAqIC0gYGlgIGlzIElTTyBkYXkgb2Ygd2Vlay4gRm9yIGBpYCBhbmQgYGlpYCBpcyByZXR1cm5zIG51bWVyaWMgSVNPIHdlZWsgZGF5cyxcbiAqICAgaS5lLiA3IGZvciBTdW5kYXksIDEgZm9yIE1vbmRheSwgZXRjLlxuICogLSBgSWAgaXMgSVNPIHdlZWsgb2YgeWVhciwgYXMgb3Bwb3NlZCB0byBgd2Agd2hpY2ggaXMgbG9jYWwgd2VlayBvZiB5ZWFyLlxuICogLSBgUmAgaXMgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIsIGFzIG9wcG9zZWQgdG8gYFlgIHdoaWNoIGlzIGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIuXG4gKiAgIGBSYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYElgIGFuZCBgaWBcbiAqICAgZm9yIHVuaXZlcnNhbCBJU08gd2Vlay1udW1iZXJpbmcgZGF0ZSwgd2hlcmVhc1xuICogICBgWWAgaXMgc3VwcG9zZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGB3YCBhbmQgYGVgXG4gKiAgIGZvciB3ZWVrLW51bWJlcmluZyBkYXRlIHNwZWNpZmljIHRvIHRoZSBsb2NhbGUuXG4gKiAtIGBQYCBpcyBsb25nIGxvY2FsaXplZCBkYXRlIGZvcm1hdFxuICogLSBgcGAgaXMgbG9uZyBsb2NhbGl6ZWQgdGltZSBmb3JtYXRcbiAqL1xuXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gRXJhXG4gIEc6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZXJhID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpID4gMCA/IDEgOiAwO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gQUQsIEJDXG4gICAgICBjYXNlICdHJzpcbiAgICAgIGNhc2UgJ0dHJzpcbiAgICAgIGNhc2UgJ0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBBLCBCXG5cbiAgICAgIGNhc2UgJ0dHR0dHJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdydcbiAgICAgICAgfSk7XG4gICAgICAvLyBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdFxuXG4gICAgICBjYXNlICdHR0dHJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIC8vIE9yZGluYWwgbnVtYmVyXG4gICAgaWYgKHRva2VuID09PSAneW8nKSB7XG4gICAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgICAgdmFyIHllYXIgPSBzaWduZWRZZWFyID4gMCA/IHNpZ25lZFllYXIgOiAxIC0gc2lnbmVkWWVhcjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHllYXIsIHtcbiAgICAgICAgdW5pdDogJ3llYXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnkoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgc2lnbmVkV2Vla1llYXIgPSBnZXRVVENXZWVrWWVhcihkYXRlLCBvcHRpb25zKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgIHZhciB3ZWVrWWVhciA9IHNpZ25lZFdlZWtZZWFyID4gMCA/IHNpZ25lZFdlZWtZZWFyIDogMSAtIHNpZ25lZFdlZWtZZWFyOyAvLyBUd28gZGlnaXQgeWVhclxuXG4gICAgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgICB2YXIgdHdvRGlnaXRZZWFyID0gd2Vla1llYXIgJSAxMDA7XG4gICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHR3b0RpZ2l0WWVhciwgMik7XG4gICAgfSAvLyBPcmRpbmFsIG51bWJlclxuXG5cbiAgICBpZiAodG9rZW4gPT09ICdZbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWtZZWFyLCB7XG4gICAgICAgIHVuaXQ6ICd5ZWFyJ1xuICAgICAgfSk7XG4gICAgfSAvLyBQYWRkaW5nXG5cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2Vla1llYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciBpc29XZWVrWWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRhdGUpOyAvLyBQYWRkaW5nXG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb1dlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBFeHRlbmRlZCB5ZWFyLiBUaGlzIGlzIGEgc2luZ2xlIG51bWJlciBkZXNpZ25hdGluZyB0aGUgeWVhciBvZiB0aGlzIGNhbGVuZGFyIHN5c3RlbS5cbiAgLy8gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIGxvY2FsaXplcnMgYXJlIEIuQy4geWVhcnM6XG4gIC8vIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gIC8vIHwtLS0tLS18LS0tLS18LS0tLS18XG4gIC8vIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gIC8vIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gIC8vIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gIC8vIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAgLy8gd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkLlxuICB1OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIFF1YXJ0ZXJcbiAgUTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSAvIDMpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSAnUSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuXG4gICAgICBjYXNlICdRUSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcblxuICAgICAgY2FzZSAnUW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7XG4gICAgICAgICAgdW5pdDogJ3F1YXJ0ZXInXG4gICAgICAgIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcblxuICAgICAgY2FzZSAnUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuXG4gICAgICBjYXNlICdRUVFRUSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cblxuICAgICAgY2FzZSAnUVFRUSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBxdWFydGVyXG4gIHE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgcXVhcnRlciA9IE1hdGguY2VpbCgoZGF0ZS5nZXRVVENNb250aCgpICsgMSkgLyAzKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgIGNhc2UgJ3EnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKHF1YXJ0ZXIpO1xuICAgICAgLy8gMDEsIDAyLCAwMywgMDRcblxuICAgICAgY2FzZSAncXEnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHF1YXJ0ZXIsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG5cbiAgICAgIGNhc2UgJ3FvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIocXVhcnRlciwge1xuICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG5cbiAgICAgIGNhc2UgJ3FxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcblxuICAgICAgY2FzZSAncXFxcXEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG5cbiAgICAgIGNhc2UgJ3FxcXEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ00nOlxuICAgICAgY2FzZSAnTU0nOlxuICAgICAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLk0oZGF0ZSwgdG9rZW4pO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuXG4gICAgICBjYXNlICdNbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcblxuICAgICAgY2FzZSAnTU1NJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG5cbiAgICAgIGNhc2UgJ01NTU1NJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG5cbiAgICAgIGNhc2UgJ01NTU0nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBtb250aFxuICBMOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgLi4uLCAxMlxuICAgICAgY2FzZSAnTCc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobW9udGggKyAxKTtcbiAgICAgIC8vIDAxLCAwMiwgLi4uLCAxMlxuXG4gICAgICBjYXNlICdMTCc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcblxuICAgICAgY2FzZSAnTG8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHtcbiAgICAgICAgICB1bml0OiAnbW9udGgnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG5cbiAgICAgIGNhc2UgJ0xMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEosIEYsIC4uLiwgRFxuXG4gICAgICBjYXNlICdMTExMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuXG4gICAgICBjYXNlICdMTExMJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgd2VlayBvZiB5ZWFyXG4gIHc6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgd2VlayA9IGdldFVUQ1dlZWsoZGF0ZSwgb3B0aW9ucyk7XG5cbiAgICBpZiAodG9rZW4gPT09ICd3bycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWssIHtcbiAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHdlZWssIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIElTTyB3ZWVrIG9mIHllYXJcbiAgSTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBpc29XZWVrID0gZ2V0VVRDSVNPV2VlayhkYXRlKTtcblxuICAgIGlmICh0b2tlbiA9PT0gJ0lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaXNvV2Vlaywge1xuICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHRoZSBtb250aFxuICBkOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnZG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ0RhdGUoKSwge1xuICAgICAgICB1bml0OiAnZGF0ZSdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuZChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIERheSBvZiB5ZWFyXG4gIEQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZZZWFyID0gZ2V0VVRDRGF5T2ZZZWFyKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSAnRG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXlPZlllYXIsIHtcbiAgICAgICAgdW5pdDogJ2RheU9mWWVhcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF5T2ZZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2Ygd2Vla1xuICBFOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBUdWVcbiAgICAgIGNhc2UgJ0UnOlxuICAgICAgY2FzZSAnRUUnOlxuICAgICAgY2FzZSAnRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ0VFRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnRUVFRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ0VFRUUnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIExvY2FsIGRheSBvZiB3ZWVrXG4gIGU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoTnRoIGRheSBvZiB3ZWVrIHdpdGggY3VycmVudCBsb2NhbGUgb3Igd2Vla1N0YXJ0c09uKVxuICAgICAgY2FzZSAnZSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobG9jYWxEYXlPZldlZWspO1xuICAgICAgLy8gUGFkZGVkIG51bWVyaWNhbCB2YWx1ZVxuXG4gICAgICBjYXNlICdlZSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobG9jYWxEYXlPZldlZWssIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG5cbiAgICAgIGNhc2UgJ2VvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2VlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnZWVlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2VlZWUnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrXG4gIGM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoc2FtZSBhcyBpbiBgZWApXG4gICAgICBjYXNlICdjJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG5cbiAgICAgIGNhc2UgJ2NjJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuXG4gICAgICBjYXNlICdjbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdjY2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2NjY2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdjY2NjJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBJU08gZGF5IG9mIHdlZWtcbiAgaTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBpc29EYXlPZldlZWsgPSBkYXlPZldlZWsgPT09IDAgPyA3IDogZGF5T2ZXZWVrO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMlxuICAgICAgY2FzZSAnaSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcoaXNvRGF5T2ZXZWVrKTtcbiAgICAgIC8vIDAyXG5cbiAgICAgIGNhc2UgJ2lpJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29EYXlPZldlZWssIHRva2VuLmxlbmd0aCk7XG4gICAgICAvLyAybmRcblxuICAgICAgY2FzZSAnaW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29EYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZVxuXG4gICAgICBjYXNlICdpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnaWlpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdpaWlpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnaWlpaSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gQU0gb3IgUE1cbiAgYTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2FhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdhYWFhJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSwgUE0sIG1pZG5pZ2h0LCBub29uXG4gIGI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZTtcblxuICAgIGlmIChob3VycyA9PT0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID09PSAwKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1pZG5pZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdiJzpcbiAgICAgIGNhc2UgJ2JiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2JiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2JiYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdiYmJiJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBpbiB0aGUgbW9ybmluZywgaW4gdGhlIGFmdGVybm9vbiwgaW4gdGhlIGV2ZW5pbmcsIGF0IG5pZ2h0XG4gIEI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZTtcblxuICAgIGlmIChob3VycyA+PSAxNykge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5ldmVuaW5nO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uYWZ0ZXJub29uO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gNCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5tb3JuaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5pZ2h0O1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ0InOlxuICAgICAgY2FzZSAnQkInOlxuICAgICAgY2FzZSAnQkJCJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ0JCQkJCJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdCQkJCJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnaG8nKSB7XG4gICAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMjtcbiAgICAgIGlmIChob3VycyA9PT0gMCkgaG91cnMgPSAxMjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5oKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0yM11cbiAgSDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ0hvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENIb3VycygpLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5IKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0xMV1cbiAgSzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyO1xuXG4gICAgaWYgKHRva2VuID09PSAnS28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzEtMjRdXG4gIGs6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDI0O1xuXG4gICAgaWYgKHRva2VuID09PSAna28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbnV0ZVxuICBtOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnbW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ01pbnV0ZXMoKSwge1xuICAgICAgICB1bml0OiAnbWludXRlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5tKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdzbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDU2Vjb25kcygpLCB7XG4gICAgICAgIHVuaXQ6ICdzZWNvbmQnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUzogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5TKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGFsd2F5cyBgJ1onYClcbiAgWDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBpZiAodGltZXpvbmVPZmZzZXQgPT09IDApIHtcbiAgICAgIHJldHVybiAnWic7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ1gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYYFxuXG4gICAgICBjYXNlICdYWFhYJzpcbiAgICAgIGNhc2UgJ1hYJzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWFhgXG5cbiAgICAgIGNhc2UgJ1hYWFhYJzpcbiAgICAgIGNhc2UgJ1hYWCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuIElmIG9mZnNldCBpcyAwLCBvdXRwdXQgaXMgYCcrMDA6MDAnYCBvciBlcXVpdmFsZW50KVxuICB4OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlICd4JzpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eGBcblxuICAgICAgY2FzZSAneHh4eCc6XG4gICAgICBjYXNlICd4eCc6XG4gICAgICAgIC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgeHh4YFxuXG4gICAgICBjYXNlICd4eHh4eCc6XG4gICAgICBjYXNlICd4eHgnOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKEdNVClcbiAgTzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAnTyc6XG4gICAgICBjYXNlICdPTyc6XG4gICAgICBjYXNlICdPT08nOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuXG4gICAgICBjYXNlICdPT09PJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdGlvbilcbiAgejogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAneic6XG4gICAgICBjYXNlICd6eic6XG4gICAgICBjYXNlICd6enonOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuXG4gICAgICBjYXNlICd6enp6JzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gU2Vjb25kcyB0aW1lc3RhbXBcbiAgdDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWVzdGFtcCA9IE1hdGguZmxvb3Iob3JpZ2luYWxEYXRlLmdldFRpbWUoKSAvIDEwMDApO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gIFQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lc3RhbXAgPSBvcmlnaW5hbERhdGUuZ2V0VGltZSgpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZVNob3J0KG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICB2YXIgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KTtcbiAgdmFyIGhvdXJzID0gTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCk7XG4gIHZhciBtaW51dGVzID0gYWJzT2Zmc2V0ICUgNjA7XG5cbiAgaWYgKG1pbnV0ZXMgPT09IDApIHtcbiAgICByZXR1cm4gc2lnbiArIFN0cmluZyhob3Vycyk7XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKSArIGRlbGltaXRlciArIGFkZExlYWRpbmdaZXJvcyhtaW51dGVzLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgaWYgKG9mZnNldCAlIDYwID09PSAwKSB7XG4gICAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICAgIHJldHVybiBzaWduICsgYWRkTGVhZGluZ1plcm9zKE1hdGguYWJzKG9mZnNldCkgLyA2MCwgMik7XG4gIH1cblxuICByZXR1cm4gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltaXRlcik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIGRlbGltaXRlciA9IGRpcnR5RGVsaW1pdGVyIHx8ICcnO1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBhZGRMZWFkaW5nWmVyb3MoTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCksIDIpO1xuICB2YXIgbWludXRlcyA9IGFkZExlYWRpbmdaZXJvcyhhYnNPZmZzZXQgJSA2MCwgMik7XG4gIHJldHVybiBzaWduICsgaG91cnMgKyBkZWxpbWl0ZXIgKyBtaW51dGVzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXJzOyIsImZ1bmN0aW9uIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSAnUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFBQUCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0aW1lTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHN3aXRjaCAocGF0dGVybikge1xuICAgIGNhc2UgJ3AnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncHBwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwcHAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGF0ZVRpbWVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgdmFyIG1hdGNoUmVzdWx0ID0gcGF0dGVybi5tYXRjaCgvKFArKShwKyk/LykgfHwgW107XG4gIHZhciBkYXRlUGF0dGVybiA9IG1hdGNoUmVzdWx0WzFdO1xuICB2YXIgdGltZVBhdHRlcm4gPSBtYXRjaFJlc3VsdFsyXTtcblxuICBpZiAoIXRpbWVQYXR0ZXJuKSB7XG4gICAgcmV0dXJuIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpO1xuICB9XG5cbiAgdmFyIGRhdGVUaW1lRm9ybWF0O1xuXG4gIHN3aXRjaCAoZGF0ZVBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBkYXRlVGltZUZvcm1hdC5yZXBsYWNlKCd7e2RhdGV9fScsIGRhdGVMb25nRm9ybWF0dGVyKGRhdGVQYXR0ZXJuLCBmb3JtYXRMb25nKSkucmVwbGFjZSgne3t0aW1lfX0nLCB0aW1lTG9uZ0Zvcm1hdHRlcih0aW1lUGF0dGVybiwgZm9ybWF0TG9uZykpO1xufVxuXG52YXIgbG9uZ0Zvcm1hdHRlcnMgPSB7XG4gIHA6IHRpbWVMb25nRm9ybWF0dGVyLFxuICBQOiBkYXRlVGltZUxvbmdGb3JtYXR0ZXJcbn07XG5leHBvcnQgZGVmYXVsdCBsb25nRm9ybWF0dGVyczsiLCIvKipcbiAqIEdvb2dsZSBDaHJvbWUgYXMgb2YgNjcuMC4zMzk2Ljg3IGludHJvZHVjZWQgdGltZXpvbmVzIHdpdGggb2Zmc2V0IHRoYXQgaW5jbHVkZXMgc2Vjb25kcy5cbiAqIFRoZXkgdXN1YWxseSBhcHBlYXIgZm9yIGRhdGVzIHRoYXQgZGVub3RlIHRpbWUgYmVmb3JlIHRoZSB0aW1lem9uZXMgd2VyZSBpbnRyb2R1Y2VkXG4gKiAoZS5nLiBmb3IgJ0V1cm9wZS9QcmFndWUnIHRpbWV6b25lIHRoZSBvZmZzZXQgaXMgR01UKzAwOjU3OjQ0IGJlZm9yZSAxIE9jdG9iZXIgMTg5MVxuICogYW5kIEdNVCswMTowMDowMCBhZnRlciB0aGF0IGRhdGUpXG4gKlxuICogRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIHRoZSBvZmZzZXQgaW4gbWludXRlcyBhbmQgd291bGQgcmV0dXJuIDU3IGZvciB0aGUgZXhhbXBsZSBhYm92ZSxcbiAqIHdoaWNoIHdvdWxkIGxlYWQgdG8gaW5jb3JyZWN0IGNhbGN1bGF0aW9ucy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHRpbWV6b25lIG9mZnNldCBpbiBtaWxsaXNlY29uZHMgdGhhdCB0YWtlcyBzZWNvbmRzIGluIGFjY291bnQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoZGF0ZSkge1xuICB2YXIgdXRjRGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSwgZGF0ZS5nZXRIb3VycygpLCBkYXRlLmdldE1pbnV0ZXMoKSwgZGF0ZS5nZXRTZWNvbmRzKCksIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkpKTtcbiAgdXRjRGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkpO1xuICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgLSB1dGNEYXRlLmdldFRpbWUoKTtcbn0iLCJ2YXIgcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zID0gWydEJywgJ0REJ107XG52YXIgcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMgPSBbJ1lZJywgJ1lZWVknXTtcbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuKHRva2VuKSB7XG4gIHJldHVybiBwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRocm93UHJvdGVjdGVkRXJyb3IodG9rZW4sIGZvcm1hdCwgaW5wdXQpIHtcbiAgaWYgKHRva2VuID09PSAnWVlZWScpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ1lZJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clwiKSk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09ICdEJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGBkYCBpbnN0ZWFkIG9mIGBEYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnREQnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfVxufSIsImltcG9ydCBpc1ZhbGlkIGZyb20gXCIuLi9pc1ZhbGlkL2luZGV4LmpzXCI7XG5pbXBvcnQgZGVmYXVsdExvY2FsZSBmcm9tIFwiLi4vbG9jYWxlL2VuLVVTL2luZGV4LmpzXCI7XG5pbXBvcnQgc3ViTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9zdWJNaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGZvcm1hdHRlcnMgZnJvbSBcIi4uL19saWIvZm9ybWF0L2Zvcm1hdHRlcnMvaW5kZXguanNcIjtcbmltcG9ydCBsb25nRm9ybWF0dGVycyBmcm9tIFwiLi4vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMvaW5kZXguanNcIjtcbmltcG9ydCBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCB7IGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4sIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbiwgdGhyb3dQcm90ZWN0ZWRFcnJvciB9IGZyb20gXCIuLi9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7IC8vIFRoaXMgUmVnRXhwIGNvbnNpc3RzIG9mIHRocmVlIHBhcnRzIHNlcGFyYXRlZCBieSBgfGA6XG4vLyAtIFt5WVFxTUx3SWREZWNpaEhLa21zXW8gbWF0Y2hlcyBhbnkgYXZhaWxhYmxlIG9yZGluYWwgbnVtYmVyIHRva2VuXG4vLyAgIChvbmUgb2YgdGhlIGNlcnRhaW4gbGV0dGVycyBmb2xsb3dlZCBieSBgb2ApXG4vLyAtIChcXHcpXFwxKiBtYXRjaGVzIGFueSBzZXF1ZW5jZXMgb2YgdGhlIHNhbWUgbGV0dGVyXG4vLyAtICcnIG1hdGNoZXMgdHdvIHF1b3RlIGNoYXJhY3RlcnMgaW4gYSByb3dcbi8vIC0gJygnJ3xbXiddKSsoJ3wkKSBtYXRjaGVzIGFueXRoaW5nIHN1cnJvdW5kZWQgYnkgdHdvIHF1b3RlIGNoYXJhY3RlcnMgKCcpLFxuLy8gICBleGNlcHQgYSBzaW5nbGUgcXVvdGUgc3ltYm9sLCB3aGljaCBlbmRzIHRoZSBzZXF1ZW5jZS5cbi8vICAgVHdvIHF1b3RlIGNoYXJhY3RlcnMgZG8gbm90IGVuZCB0aGUgc2VxdWVuY2UuXG4vLyAgIElmIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHNpbmdsZSBxdW90ZVxuLy8gICB0aGVuIHRoZSBzZXF1ZW5jZSB3aWxsIGNvbnRpbnVlIHVudGlsIHRoZSBlbmQgb2YgdGhlIHN0cmluZy5cbi8vIC0gLiBtYXRjaGVzIGFueSBzaW5nbGUgY2hhcmFjdGVyIHVubWF0Y2hlZCBieSBwcmV2aW91cyBwYXJ0cyBvZiB0aGUgUmVnRXhwc1xuXG52YXIgZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IC9beVlRcU1Md0lkRGVjaWhIS2ttc11vfChcXHcpXFwxKnwnJ3wnKCcnfFteJ10pKygnfCQpfC4vZzsgLy8gVGhpcyBSZWdFeHAgY2F0Y2hlcyBzeW1ib2xzIGVzY2FwZWQgYnkgcXVvdGVzLCBhbmQgYWxzb1xuLy8gc2VxdWVuY2VzIG9mIHN5bWJvbHMgUCwgcCwgYW5kIHRoZSBjb21iaW5hdGlvbnMgbGlrZSBgUFBQUFBQUHBwcHBwYFxuXG52YXIgbG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvUCtwK3xQK3xwK3wnJ3wnKCcnfFteJ10pKygnfCQpfC4vZztcbnZhciBlc2NhcGVkU3RyaW5nUmVnRXhwID0gL14nKFteXSo/KSc/JC87XG52YXIgZG91YmxlUXVvdGVSZWdFeHAgPSAvJycvZztcbnZhciB1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCA9IC9bYS16QS1aXS87XG4vKipcbiAqIEBuYW1lIGZvcm1hdFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBGb3JtYXQgdGhlIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZyBpbiB0aGUgZ2l2ZW4gZm9ybWF0LiBUaGUgcmVzdWx0IG1heSB2YXJ5IGJ5IGxvY2FsZS5cbiAqXG4gKiA+IOKaoO+4jyBQbGVhc2Ugbm90ZSB0aGF0IHRoZSBgZm9ybWF0YCB0b2tlbnMgZGlmZmVyIGZyb20gTW9tZW50LmpzIGFuZCBvdGhlciBsaWJyYXJpZXMuXG4gKiA+IFNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqXG4gKiBUaGUgY2hhcmFjdGVycyB3cmFwcGVkIGJldHdlZW4gdHdvIHNpbmdsZSBxdW90ZXMgY2hhcmFjdGVycyAoJykgYXJlIGVzY2FwZWQuXG4gKiBUd28gc2luZ2xlIHF1b3RlcyBpbiBhIHJvdywgd2hldGhlciBpbnNpZGUgb3Igb3V0c2lkZSBhIHF1b3RlZCBzZXF1ZW5jZSwgcmVwcmVzZW50IGEgJ3JlYWwnIHNpbmdsZSBxdW90ZS5cbiAqIChzZWUgdGhlIGxhc3QgZXhhbXBsZSlcbiAqXG4gKiBGb3JtYXQgb2YgdGhlIHN0cmluZyBpcyBiYXNlZCBvbiBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiBodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI0RhdGVfRmllbGRfU3ltYm9sX1RhYmxlXG4gKiB3aXRoIGEgZmV3IGFkZGl0aW9ucyAoc2VlIG5vdGUgNyBiZWxvdyB0aGUgdGFibGUpLlxuICpcbiAqIEFjY2VwdGVkIHBhdHRlcm5zOlxuICogfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUGF0dGVybiB8IFJlc3VsdCBleGFtcGxlcyAgICAgICAgICAgICAgICAgICB8IE5vdGVzIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS18XG4gKiB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHLi5HR0cgIHwgQUQsIEJDICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHRyAgICB8IEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0dHICAgfCBBLCBCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IENhbGVuZGFyIHllYXIgICAgICAgICAgICAgICAgICAgfCB5ICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeW8gICAgICB8IDQ0dGgsIDFzdCwgMHRoLCAxN3RoICAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5ICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXl5ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgfCBZICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWW8gICAgICB8IDQ0dGgsIDFzdCwgMTkwMHRoLCAyMDE3dGggICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVlZICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICAgfCBSICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlIgICAgICB8IC00MywgMDAsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUiAgICAgfCAtMDQzLCAwMDAsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSICAgIHwgLTAwNDMsIDAwMDAsIDAwMDEsIDE5MDAsIDIwMTcgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUlIgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSw3IHxcbiAqIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgICB8IHUgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dSAgICAgIHwgLTQzLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1ICAgICB8IC0wNDMsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXUgICAgfCAtMDA0MywgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1dSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBRdWFydGVyIChmb3JtYXR0aW5nKSAgICAgICAgICAgIHwgUSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRUSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBRdWFydGVyIChzdGFuZC1hbG9uZSkgICAgICAgICAgIHwgcSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxcSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBNb250aCAoZm9ybWF0dGluZykgICAgICAgICAgICAgIHwgTSAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1vICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTSAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU0gICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NTSAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNb250aCAoc3RhbmQtYWxvbmUpICAgICAgICAgICAgIHwgTCAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTCAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTEwgICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMTCAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgIHwgdyAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHdvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3dyAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgIHwgSSAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJSSAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgIHwgZCAgICAgICB8IDEsIDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzMXN0ICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkZCAgICAgIHwgMDEsIDAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgIHwgRCAgICAgICB8IDEsIDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgICB8IDkgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzNjV0aCwgMzY2dGggICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBERCAgICAgIHwgMDEsIDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREREICAgICB8IDAwMSwgMDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREREQgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IERheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICAgICAgfCBFLi5FRUUgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRUUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgIHwgaSAgICAgICB8IDEsIDIsIDMsIC4uLiwgNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA3dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaSAgICAgIHwgMDEsIDAyLCAuLi4sIDA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWkgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyLDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWlpICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8IDcgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICB8IGUgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWUgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlZSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChzdGFuZC1hbG9uZSkgfCBjICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY28gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2MgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjYyAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjY2MgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgYS4uYWEgICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYSAgICAgfCBhbSwgcG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhICAgIHwgYS5tLiwgcC5tLiAgICAgICAgICAgICAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYWEgICB8IGEsIHAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICB8IGIuLmJiICAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmIgICAgIHwgYW0sIHBtLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYiAgICB8IGEubS4sIHAubS4sIG5vb24sIG1pZG5pZ2h0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmJiICAgfCBhLCBwLCBuLCBtaSAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICAgfCBCLi5CQkIgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQiAgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkJCICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICAgfCBoICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDEydGggICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhoICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICAgfCBIICAgICAgIHwgMCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSG8gICAgICB8IDB0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhIICAgICAgfCAwMCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICAgfCBLICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMCAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDB0aCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtLICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICAgfCBrICAgICAgIHwgMjQsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga28gICAgICB8IDI0dGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtrICAgICAgfCAyNCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW8gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1tICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc28gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNzICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICAgfCBTICAgICAgIHwgMCwgMSwgLi4uLCA5ICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1MgICAgICB8IDAwLCAwMSwgLi4uLCA5OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTUyAgICAgfCAwMDAsIDAwMSwgLi4uLCA5OTkgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1NTICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy8gWikgICAgICAgIHwgWCAgICAgICB8IC0wOCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYICAgICAgfCAtMDgwMCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFggICAgIHwgLTA4OjAwLCArMDU6MzAsIFogICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWCAgICB8IC0wODAwLCArMDUzMCwgWiwgKzEyMzQ1NiAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFhYICAgfCAtMDg6MDAsICswNTozMCwgWiwgKzEyOjM0OjU2ICAgICAgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICAgfCB4ICAgICAgIHwgLTA4LCArMDUzMCwgKzAwICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHggICAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eCAgICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4ICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCwgKzEyMzQ1NiAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eHggICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAsICsxMjozNDo1NiB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgICB8IE8uLi5PT08gfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBPT09PICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiAgICAgfFxuICogfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgIHwgei4uLnp6eiB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8IDYgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHp6enogICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyLDYgICB8XG4gKiB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICAgfCB0ICAgICAgIHwgNTEyOTY5NTIwICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdHQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICB8IFQgICAgICAgfCA1MTI5Njk1MjA5MDAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBUVCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgIHwgUCAgICAgICB8IDA0LzI5LzE0NTMgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQICAgICAgfCBBcHIgMjksIDE0NTMgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFAgICAgIHwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUCAgICB8IEZyaWRheSwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgICB8IHAgICAgICAgfCAxMjowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcCAgICAgIHwgMTI6MDA6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwICAgICB8IDEyOjAwOjAwIEFNIEdNVCsyICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcHAgICAgfCAxMjowMDowMCBBTSBHTVQrMDI6MDAgICAgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IENvbWJpbmF0aW9uIG9mIGRhdGUgYW5kIHRpbWUgICAgfCBQcCAgICAgIHwgMDQvMjkvMTQ1MywgMTI6MDAgQU0gICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBwcCAgICB8IEFwciAyOSwgMTQ1MywgMTI6MDA6MDAgQU0gICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUHBwcCAgfCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQcHBwcHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgIHwgMiw3ICAgfFxuICogTm90ZXM6XG4gKiAxLiBcIkZvcm1hdHRpbmdcIiB1bml0cyAoZS5nLiBmb3JtYXR0aW5nIHF1YXJ0ZXIpIGluIHRoZSBkZWZhdWx0IGVuLVVTIGxvY2FsZVxuICogICAgYXJlIHRoZSBzYW1lIGFzIFwic3RhbmQtYWxvbmVcIiB1bml0cywgYnV0IGFyZSBkaWZmZXJlbnQgaW4gc29tZSBsYW5ndWFnZXMuXG4gKiAgICBcIkZvcm1hdHRpbmdcIiB1bml0cyBhcmUgZGVjbGluZWQgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBvZiB0aGUgbGFuZ3VhZ2VcbiAqICAgIGluIHRoZSBjb250ZXh0IG9mIGEgZGF0ZS4gXCJTdGFuZC1hbG9uZVwiIHVuaXRzIGFyZSBhbHdheXMgbm9taW5hdGl2ZSBzaW5ndWxhcjpcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIExMTEwnLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIE1NTU0nLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkdSdgXG4gKlxuICogMi4gQW55IHNlcXVlbmNlIG9mIHRoZSBpZGVudGljYWwgbGV0dGVycyBpcyBhIHBhdHRlcm4sIHVubGVzcyBpdCBpcyBlc2NhcGVkIGJ5XG4gKiAgICB0aGUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgKHNlZSBiZWxvdykuXG4gKiAgICBJZiB0aGUgc2VxdWVuY2UgaXMgbG9uZ2VyIHRoYW4gbGlzdGVkIGluIHRhYmxlIChlLmcuIGBFRUVFRUVFRUVFRWApXG4gKiAgICB0aGUgb3V0cHV0IHdpbGwgYmUgdGhlIHNhbWUgYXMgZGVmYXVsdCBwYXR0ZXJuIGZvciB0aGlzIHVuaXQsIHVzdWFsbHlcbiAqICAgIHRoZSBsb25nZXN0IG9uZSAoaW4gY2FzZSBvZiBJU08gd2Vla2RheXMsIGBFRUVFYCkuIERlZmF1bHQgcGF0dGVybnMgZm9yIHVuaXRzXG4gKiAgICBhcmUgbWFya2VkIHdpdGggXCIyXCIgaW4gdGhlIGxhc3QgY29sdW1uIG9mIHRoZSB0YWJsZS5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTScpIC8vPT4gJ05vdidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU0nKSAvLz0+ICdOJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogMy4gU29tZSBwYXR0ZXJucyBjb3VsZCBiZSB1bmxpbWl0ZWQgbGVuZ3RoIChzdWNoIGFzIGB5eXl5eXl5eWApLlxuICogICAgVGhlIG91dHB1dCB3aWxsIGJlIHBhZGRlZCB3aXRoIHplcm9zIHRvIG1hdGNoIHRoZSBsZW5ndGggb2YgdGhlIHBhdHRlcm4uXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICd5eXl5eXl5eScpIC8vPT4gJzAwMDAyMDE3J2BcbiAqXG4gKiA0LiBgUVFRUVFgIGFuZCBgcXFxcXFgIGNvdWxkIGJlIG5vdCBzdHJpY3RseSBudW1lcmljYWwgaW4gc29tZSBsb2NhbGVzLlxuICogICAgVGhlc2UgdG9rZW5zIHJlcHJlc2VudCB0aGUgc2hvcnRlc3QgZm9ybSBvZiB0aGUgcXVhcnRlci5cbiAqXG4gKiA1LiBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgcGF0dGVybnMgYXJlIEIuQy4geWVhcnM6XG4gKlxuICogICAgfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS18LS0tLS18XG4gKiAgICB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICogICAgfCBCQyAxIHwgICAxIHwgICAwIHxcbiAqICAgIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gKlxuICogICAgQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICogICAgd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkOlxuICpcbiAqICAgIHwgWWVhciB8IGB5eWAgfCBgdXVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS0tfC0tLS0tLXxcbiAqICAgIHwgMSAgICB8ICAgMDEgfCAgIDAxIHxcbiAqICAgIHwgMTQgICB8ICAgMTQgfCAgIDE0IHxcbiAqICAgIHwgMzc2ICB8ICAgNzYgfCAgMzc2IHxcbiAqICAgIHwgMTQ1MyB8ICAgNTMgfCAxNDUzIHxcbiAqXG4gKiAgICBUaGUgc2FtZSBkaWZmZXJlbmNlIGlzIHRydWUgZm9yIGxvY2FsIGFuZCBJU08gd2Vlay1udW1iZXJpbmcgeWVhcnMgKGBZYCBhbmQgYFJgKSxcbiAqICAgIGV4Y2VwdCBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFycyBhcmUgZGVwZW5kZW50IG9uIGBvcHRpb25zLndlZWtTdGFydHNPbmBcbiAqICAgIGFuZCBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIChjb21wYXJlIFtnZXRJU09XZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRJU09XZWVrWWVhcn1cbiAqICAgIGFuZCBbZ2V0V2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0V2Vla1llYXJ9KS5cbiAqXG4gKiA2LiBTcGVjaWZpYyBub24tbG9jYXRpb24gdGltZXpvbmVzIGFyZSBjdXJyZW50bHkgdW5hdmFpbGFibGUgaW4gYGRhdGUtZm5zYCxcbiAqICAgIHNvIHJpZ2h0IG5vdyB0aGVzZSB0b2tlbnMgZmFsbCBiYWNrIHRvIEdNVCB0aW1lem9uZXMuXG4gKlxuICogNy4gVGhlc2UgcGF0dGVybnMgYXJlIG5vdCBpbiB0aGUgVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogICAgLSBgaWA6IElTTyBkYXkgb2Ygd2Vla1xuICogICAgLSBgSWA6IElTTyB3ZWVrIG9mIHllYXJcbiAqICAgIC0gYFJgOiBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICogICAgLSBgdGA6IHNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBUYDogbWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgb2A6IG9yZGluYWwgbnVtYmVyIG1vZGlmaWVyXG4gKiAgICAtIGBQYDogbG9uZyBsb2NhbGl6ZWQgZGF0ZVxuICogICAgLSBgcGA6IGxvbmcgbG9jYWxpemVkIHRpbWVcbiAqXG4gKiA4LiBgWVlgIGFuZCBgWVlZWWAgdG9rZW5zIHJlcHJlc2VudCB3ZWVrLW51bWJlcmluZyB5ZWFycyBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCB5ZWFycy5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqXG4gKiA5LiBgRGAgYW5kIGBERGAgdG9rZW5zIHJlcHJlc2VudCBkYXlzIG9mIHRoZSB5ZWFyIGJ1dCB0aGV5IGFyZSBvZnRlbiBjb25mdXNlZCB3aXRoIGRheXMgb2YgdGhlIG1vbnRoLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIC0gVGhlIHNlY29uZCBhcmd1bWVudCBpcyBub3cgcmVxdWlyZWQgZm9yIHRoZSBzYWtlIG9mIGV4cGxpY2l0bmVzcy5cbiAqXG4gKiAgIGBgYGphdmFzY3JpcHRcbiAqICAgLy8gQmVmb3JlIHYyLjAuMFxuICogICBmb3JtYXQobmV3IERhdGUoMjAxNiwgMCwgMSkpXG4gKlxuICogICAvLyB2Mi4wLjAgb253YXJkXG4gKiAgIGZvcm1hdChuZXcgRGF0ZSgyMDE2LCAwLCAxKSwgXCJ5eXl5LU1NLWRkJ1QnSEg6bW06c3MuU1NTeHh4XCIpXG4gKiAgIGBgYFxuICpcbiAqIC0gTmV3IGZvcm1hdCBzdHJpbmcgQVBJIGZvciBgZm9ybWF0YCBmdW5jdGlvblxuICogICB3aGljaCBpcyBiYXNlZCBvbiBbVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1XShodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI0RhdGVfRmllbGRfU3ltYm9sX1RhYmxlKS5cbiAqICAgU2VlIFt0aGlzIHBvc3RdKGh0dHBzOi8vYmxvZy5kYXRlLWZucy5vcmcvcG9zdC91bmljb2RlLXRva2Vucy1pbi1kYXRlLWZucy12Mi1zcmVhdHlraTkxamcpIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogLSBDaGFyYWN0ZXJzIGFyZSBub3cgZXNjYXBlZCB1c2luZyBzaW5nbGUgcXVvdGUgc3ltYm9scyAoYCdgKSBpbnN0ZWFkIG9mIHNxdWFyZSBicmFja2V0cy5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIG9yaWdpbmFsIGRhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBmb3JtYXQgLSB0aGUgc3RyaW5nIG9mIHRva2Vuc1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIGFuIG9iamVjdCB3aXRoIG9wdGlvbnMuXG4gKiBAcGFyYW0ge0xvY2FsZX0gW29wdGlvbnMubG9jYWxlPWRlZmF1bHRMb2NhbGVdIC0gdGhlIGxvY2FsZSBvYmplY3QuIFNlZSBbTG9jYWxlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL0xvY2FsZX1cbiAqIEBwYXJhbSB7MHwxfDJ8M3w0fDV8Nn0gW29wdGlvbnMud2Vla1N0YXJ0c09uPTBdIC0gdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsgKDAgLSBTdW5kYXkpXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlPTFdIC0gdGhlIGRheSBvZiBKYW51YXJ5LCB3aGljaCBpc1xuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnM9ZmFsc2VdIC0gaWYgdHJ1ZSwgYWxsb3dzIHVzYWdlIG9mIHRoZSB3ZWVrLW51bWJlcmluZyB5ZWFyIHRva2VucyBgWVlgIGFuZCBgWVlZWWA7XG4gKiAgIHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIGRheSBvZiB5ZWFyIHRva2VucyBgRGAgYW5kIGBERGA7XG4gKiAgIHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmdcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBkYXRlYCBtdXN0IG5vdCBiZSBJbnZhbGlkIERhdGVcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBsb2NhbGl6ZWAgcHJvcGVydHlcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBmb3JtYXRMb25nYCBwcm9wZXJ0eVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMud2Vla1N0YXJ0c09uYCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNlxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCBtdXN0IGJlIGJldHdlZW4gMSBhbmQgN1xuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGB5eXl5YCBpbnN0ZWFkIG9mIGBZWVlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYGRgIGluc3RlYWQgb2YgYERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGZvcm1hdCBzdHJpbmcgY29udGFpbnMgYW4gdW5lc2NhcGVkIGxhdGluIGFscGhhYmV0IGNoYXJhY3RlclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMTEgRmVicnVhcnkgMjAxNCBpbiBtaWRkbGUtZW5kaWFuIGZvcm1hdDpcbiAqIHZhciByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgMSwgMTEpLCAnTU0vZGQveXl5eScpXG4gKiAvLz0+ICcwMi8xMS8yMDE0J1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMiBKdWx5IDIwMTQgaW4gRXNwZXJhbnRvOlxuICogaW1wb3J0IHsgZW9Mb2NhbGUgfSBmcm9tICdkYXRlLWZucy9sb2NhbGUvZW8nXG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDYsIDIpLCBcImRvICdkZScgTU1NTSB5eXl5XCIsIHtcbiAqICAgbG9jYWxlOiBlb0xvY2FsZVxuICogfSlcbiAqIC8vPT4gJzItYSBkZSBqdWxpbyAyMDE0J1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBFc2NhcGUgc3RyaW5nIGJ5IHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzOlxuICogdmFyIHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCA2LCAyLCAxNSksIFwiaCAnbycnY2xvY2snXCIpXG4gKiAvLz0+IFwiMyBvJ2Nsb2NrXCJcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXQoZGlydHlEYXRlLCBkaXJ0eUZvcm1hdFN0ciwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZm9ybWF0U3RyID0gU3RyaW5nKGRpcnR5Rm9ybWF0U3RyKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZSB8fCBkZWZhdWx0TG9jYWxlO1xuICB2YXIgbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlO1xuICB2YXIgZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gMSA6IHRvSW50ZWdlcihsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgOiB0b0ludGVnZXIob3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDEgYW5kIDcgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciBsb2NhbGVXZWVrU3RhcnRzT24gPSBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy53ZWVrU3RhcnRzT247XG4gIHZhciBkZWZhdWx0V2Vla1N0YXJ0c09uID0gbG9jYWxlV2Vla1N0YXJ0c09uID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGxvY2FsZVdlZWtTdGFydHNPbik7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSBvcHRpb25zLndlZWtTdGFydHNPbiA9PSBudWxsID8gZGVmYXVsdFdlZWtTdGFydHNPbiA6IHRvSW50ZWdlcihvcHRpb25zLndlZWtTdGFydHNPbik7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgaWYgKCFsb2NhbGUubG9jYWxpemUpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbG9jYWxlIG11c3QgY29udGFpbiBsb2NhbGl6ZSBwcm9wZXJ0eScpO1xuICB9XG5cbiAgaWYgKCFsb2NhbGUuZm9ybWF0TG9uZykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGZvcm1hdExvbmcgcHJvcGVydHknKTtcbiAgfVxuXG4gIHZhciBvcmlnaW5hbERhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcblxuICBpZiAoIWlzVmFsaWQob3JpZ2luYWxEYXRlKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgfSAvLyBDb252ZXJ0IHRoZSBkYXRlIGluIHN5c3RlbSB0aW1lem9uZSB0byB0aGUgc2FtZSBkYXRlIGluIFVUQyswMDowMCB0aW1lem9uZS5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQgd2hlbiBVVEMgZnVuY3Rpb25zIHdpbGwgYmUgaW1wbGVtZW50ZWQsIGxvY2FsZXMgd2lsbCBiZSBjb21wYXRpYmxlIHdpdGggdGhlbS5cbiAgLy8gU2VlIGFuIGlzc3VlIGFib3V0IFVUQyBmdW5jdGlvbnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cblxuICB2YXIgdGltZXpvbmVPZmZzZXQgPSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSk7XG4gIHZhciB1dGNEYXRlID0gc3ViTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSwgdGltZXpvbmVPZmZzZXQpO1xuICB2YXIgZm9ybWF0dGVyT3B0aW9ucyA9IHtcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSxcbiAgICB3ZWVrU3RhcnRzT246IHdlZWtTdGFydHNPbixcbiAgICBsb2NhbGU6IGxvY2FsZSxcbiAgICBfb3JpZ2luYWxEYXRlOiBvcmlnaW5hbERhdGVcbiAgfTtcbiAgdmFyIHJlc3VsdCA9IGZvcm1hdFN0ci5tYXRjaChsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkubWFwKGZ1bmN0aW9uIChzdWJzdHJpbmcpIHtcbiAgICB2YXIgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09ICdwJyB8fCBmaXJzdENoYXJhY3RlciA9PT0gJ1AnKSB7XG4gICAgICB2YXIgbG9uZ0Zvcm1hdHRlciA9IGxvbmdGb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICAgIHJldHVybiBsb25nRm9ybWF0dGVyKHN1YnN0cmluZywgbG9jYWxlLmZvcm1hdExvbmcsIGZvcm1hdHRlck9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnNSZWdFeHApLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgLy8gUmVwbGFjZSB0d28gc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgd2l0aCBvbmUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlclxuICAgIGlmIChzdWJzdHJpbmcgPT09IFwiJydcIikge1xuICAgICAgcmV0dXJuIFwiJ1wiO1xuICAgIH1cblxuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcblxuICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gXCInXCIpIHtcbiAgICAgIHJldHVybiBjbGVhbkVzY2FwZWRTdHJpbmcoc3Vic3RyaW5nKTtcbiAgICB9XG5cbiAgICB2YXIgZm9ybWF0dGVyID0gZm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG5cbiAgICBpZiAoZm9ybWF0dGVyKSB7XG4gICAgICBpZiAoIW9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zICYmIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbihzdWJzdHJpbmcpKSB7XG4gICAgICAgIHRocm93UHJvdGVjdGVkRXJyb3Ioc3Vic3RyaW5nLCBkaXJ0eUZvcm1hdFN0ciwgZGlydHlEYXRlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnMgJiYgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbihzdWJzdHJpbmcpKSB7XG4gICAgICAgIHRocm93UHJvdGVjdGVkRXJyb3Ioc3Vic3RyaW5nLCBkaXJ0eUZvcm1hdFN0ciwgZGlydHlEYXRlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZvcm1hdHRlcih1dGNEYXRlLCBzdWJzdHJpbmcsIGxvY2FsZS5sb2NhbGl6ZSwgZm9ybWF0dGVyT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyLm1hdGNoKHVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0Zvcm1hdCBzdHJpbmcgY29udGFpbnMgYW4gdW5lc2NhcGVkIGxhdGluIGFscGhhYmV0IGNoYXJhY3RlciBgJyArIGZpcnN0Q2hhcmFjdGVyICsgJ2AnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3Vic3RyaW5nO1xuICB9KS5qb2luKCcnKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gY2xlYW5Fc2NhcGVkU3RyaW5nKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5tYXRjaChlc2NhcGVkU3RyaW5nUmVnRXhwKVsxXS5yZXBsYWNlKGRvdWJsZVF1b3RlUmVnRXhwLCBcIidcIik7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBjb21wYXJlQXNjXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbXBhcmUgdGhlIHR3byBkYXRlcyBhbmQgcmV0dXJuIC0xLCAwIG9yIDEuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb21wYXJlIHRoZSB0d28gZGF0ZXMgYW5kIHJldHVybiAxIGlmIHRoZSBmaXJzdCBkYXRlIGlzIGFmdGVyIHRoZSBzZWNvbmQsXG4gKiAtMSBpZiB0aGUgZmlyc3QgZGF0ZSBpcyBiZWZvcmUgdGhlIHNlY29uZCBvciAwIGlmIGRhdGVzIGFyZSBlcXVhbC5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVMZWZ0IC0gdGhlIGZpcnN0IGRhdGUgdG8gY29tcGFyZVxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZVJpZ2h0IC0gdGhlIHNlY29uZCBkYXRlIHRvIGNvbXBhcmVcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHRoZSByZXN1bHQgb2YgdGhlIGNvbXBhcmlzb25cbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29tcGFyZSAxMSBGZWJydWFyeSAxOTg3IGFuZCAxMCBKdWx5IDE5ODk6XG4gKiBjb25zdCByZXN1bHQgPSBjb21wYXJlQXNjKG5ldyBEYXRlKDE5ODcsIDEsIDExKSwgbmV3IERhdGUoMTk4OSwgNiwgMTApKVxuICogLy89PiAtMVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBTb3J0IHRoZSBhcnJheSBvZiBkYXRlczpcbiAqIGNvbnN0IHJlc3VsdCA9IFtcbiAqICAgbmV3IERhdGUoMTk5NSwgNiwgMiksXG4gKiAgIG5ldyBEYXRlKDE5ODcsIDEsIDExKSxcbiAqICAgbmV3IERhdGUoMTk4OSwgNiwgMTApXG4gKiBdLnNvcnQoY29tcGFyZUFzYylcbiAqIC8vPT4gW1xuICogLy8gICBXZWQgRmViIDExIDE5ODcgMDA6MDA6MDAsXG4gKiAvLyAgIE1vbiBKdWwgMTAgMTk4OSAwMDowMDowMCxcbiAqIC8vICAgU3VuIEp1bCAwMiAxOTk1IDAwOjAwOjAwXG4gKiAvLyBdXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcGFyZUFzYyhkaXJ0eURhdGVMZWZ0LCBkaXJ0eURhdGVSaWdodCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGVMZWZ0ID0gdG9EYXRlKGRpcnR5RGF0ZUxlZnQpO1xuICB2YXIgZGF0ZVJpZ2h0ID0gdG9EYXRlKGRpcnR5RGF0ZVJpZ2h0KTtcbiAgdmFyIGRpZmYgPSBkYXRlTGVmdC5nZXRUaW1lKCkgLSBkYXRlUmlnaHQuZ2V0VGltZSgpO1xuXG4gIGlmIChkaWZmIDwgMCkge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIGlmIChkaWZmID4gMCkge1xuICAgIHJldHVybiAxOyAvLyBSZXR1cm4gMCBpZiBkaWZmIGlzIDA7IHJldHVybiBOYU4gaWYgZGlmZiBpcyBOYU5cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZGlmZjtcbiAgfVxufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgZGlmZmVyZW5jZUluQ2FsZW5kYXJNb250aHNcbiAqIEBjYXRlZ29yeSBNb250aCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIG51bWJlciBvZiBjYWxlbmRhciBtb250aHMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG51bWJlciBvZiBjYWxlbmRhciBtb250aHMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBsYXRlciBkYXRlXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgZWFybGllciBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIG1vbnRoc1xuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBIb3cgbWFueSBjYWxlbmRhciBtb250aHMgYXJlIGJldHdlZW4gMzEgSmFudWFyeSAyMDE0IGFuZCAxIFNlcHRlbWJlciAyMDE0P1xuICogdmFyIHJlc3VsdCA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzKFxuICogICBuZXcgRGF0ZSgyMDE0LCA4LCAxKSxcbiAqICAgbmV3IERhdGUoMjAxNCwgMCwgMzEpXG4gKiApXG4gKiAvLz0+IDhcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaWZmZXJlbmNlSW5DYWxlbmRhck1vbnRocyhkaXJ0eURhdGVMZWZ0LCBkaXJ0eURhdGVSaWdodCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGVMZWZ0ID0gdG9EYXRlKGRpcnR5RGF0ZUxlZnQpO1xuICB2YXIgZGF0ZVJpZ2h0ID0gdG9EYXRlKGRpcnR5RGF0ZVJpZ2h0KTtcbiAgdmFyIHllYXJEaWZmID0gZGF0ZUxlZnQuZ2V0RnVsbFllYXIoKSAtIGRhdGVSaWdodC5nZXRGdWxsWWVhcigpO1xuICB2YXIgbW9udGhEaWZmID0gZGF0ZUxlZnQuZ2V0TW9udGgoKSAtIGRhdGVSaWdodC5nZXRNb250aCgpO1xuICByZXR1cm4geWVhckRpZmYgKiAxMiArIG1vbnRoRGlmZjtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGVuZE9mRGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgZW5kIG9mIGEgZGF5IGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgZW5kIG9mIGEgZGF5IGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIG9yaWdpbmFsIGRhdGVcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgZW5kIG9mIGEgZGF5XG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIGVuZCBvZiBhIGRheSBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IGVuZE9mRGF5KG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCkpXG4gKiAvLz0+IFR1ZSBTZXAgMDIgMjAxNCAyMzo1OTo1OS45OTlcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlbmRPZkRheShkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIGRhdGUuc2V0SG91cnMoMjMsIDU5LCA1OSwgOTk5KTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBlbmRPZk1vbnRoXG4gKiBAY2F0ZWdvcnkgTW9udGggSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBlbmQgb2YgYSBtb250aCBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIGVuZCBvZiBhIG1vbnRoIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIG9yaWdpbmFsIGRhdGVcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgZW5kIG9mIGEgbW9udGhcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgZW5kIG9mIGEgbW9udGggZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiBjb25zdCByZXN1bHQgPSBlbmRPZk1vbnRoKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCkpXG4gKiAvLz0+IFR1ZSBTZXAgMzAgMjAxNCAyMzo1OTo1OS45OTlcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlbmRPZk1vbnRoKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIG1vbnRoID0gZGF0ZS5nZXRNb250aCgpO1xuICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSwgbW9udGggKyAxLCAwKTtcbiAgZGF0ZS5zZXRIb3VycygyMywgNTksIDU5LCA5OTkpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBlbmRPZkRheSBmcm9tIFwiLi4vZW5kT2ZEYXkvaW5kZXguanNcIjtcbmltcG9ydCBlbmRPZk1vbnRoIGZyb20gXCIuLi9lbmRPZk1vbnRoL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc0xhc3REYXlPZk1vbnRoXG4gKiBAY2F0ZWdvcnkgTW9udGggSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIGRhdGUgdGhlIGxhc3QgZGF5IG9mIGEgbW9udGg/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJcyB0aGUgZ2l2ZW4gZGF0ZSB0aGUgbGFzdCBkYXkgb2YgYSBtb250aD9cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlIGlzIHRoZSBsYXN0IGRheSBvZiBhIG1vbnRoXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSXMgMjggRmVicnVhcnkgMjAxNCB0aGUgbGFzdCBkYXkgb2YgYSBtb250aD9cbiAqIHZhciByZXN1bHQgPSBpc0xhc3REYXlPZk1vbnRoKG5ldyBEYXRlKDIwMTQsIDEsIDI4KSlcbiAqIC8vPT4gdHJ1ZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzTGFzdERheU9mTW9udGgoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICByZXR1cm4gZW5kT2ZEYXkoZGF0ZSkuZ2V0VGltZSgpID09PSBlbmRPZk1vbnRoKGRhdGUpLmdldFRpbWUoKTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBkaWZmZXJlbmNlSW5DYWxlbmRhck1vbnRocyBmcm9tIFwiLi4vZGlmZmVyZW5jZUluQ2FsZW5kYXJNb250aHMvaW5kZXguanNcIjtcbmltcG9ydCBjb21wYXJlQXNjIGZyb20gXCIuLi9jb21wYXJlQXNjL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IGlzTGFzdERheU9mTW9udGggZnJvbSBcIi4uL2lzTGFzdERheU9mTW9udGgvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgZGlmZmVyZW5jZUluTW9udGhzXG4gKiBAY2F0ZWdvcnkgTW9udGggSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBudW1iZXIgb2YgZnVsbCBtb250aHMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG51bWJlciBvZiBmdWxsIG1vbnRocyBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcyB1c2luZyB0cnVuYyBhcyBhIGRlZmF1bHQgcm91bmRpbmcgbWV0aG9kLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZUxlZnQgLSB0aGUgbGF0ZXIgZGF0ZVxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZVJpZ2h0IC0gdGhlIGVhcmxpZXIgZGF0ZVxuICogQHJldHVybnMge051bWJlcn0gdGhlIG51bWJlciBvZiBmdWxsIG1vbnRoc1xuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBIb3cgbWFueSBmdWxsIG1vbnRocyBhcmUgYmV0d2VlbiAzMSBKYW51YXJ5IDIwMTQgYW5kIDEgU2VwdGVtYmVyIDIwMTQ/XG4gKiBjb25zdCByZXN1bHQgPSBkaWZmZXJlbmNlSW5Nb250aHMobmV3IERhdGUoMjAxNCwgOCwgMSksIG5ldyBEYXRlKDIwMTQsIDAsIDMxKSlcbiAqIC8vPT4gN1xuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRpZmZlcmVuY2VJbk1vbnRocyhkaXJ0eURhdGVMZWZ0LCBkaXJ0eURhdGVSaWdodCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGVMZWZ0ID0gdG9EYXRlKGRpcnR5RGF0ZUxlZnQpO1xuICB2YXIgZGF0ZVJpZ2h0ID0gdG9EYXRlKGRpcnR5RGF0ZVJpZ2h0KTtcbiAgdmFyIHNpZ24gPSBjb21wYXJlQXNjKGRhdGVMZWZ0LCBkYXRlUmlnaHQpO1xuICB2YXIgZGlmZmVyZW5jZSA9IE1hdGguYWJzKGRpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzKGRhdGVMZWZ0LCBkYXRlUmlnaHQpKTtcbiAgdmFyIHJlc3VsdDsgLy8gQ2hlY2sgZm9yIHRoZSBkaWZmZXJlbmNlIG9mIGxlc3MgdGhhbiBtb250aFxuXG4gIGlmIChkaWZmZXJlbmNlIDwgMSkge1xuICAgIHJlc3VsdCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGRhdGVMZWZ0LmdldE1vbnRoKCkgPT09IDEgJiYgZGF0ZUxlZnQuZ2V0RGF0ZSgpID4gMjcpIHtcbiAgICAgIC8vIFRoaXMgd2lsbCBjaGVjayBpZiB0aGUgZGF0ZSBpcyBlbmQgb2YgRmViIGFuZCBhc3NpZ24gYSBoaWdoZXIgZW5kIG9mIG1vbnRoIGRhdGVcbiAgICAgIC8vIHRvIGNvbXBhcmUgaXQgd2l0aCBKYW5cbiAgICAgIGRhdGVMZWZ0LnNldERhdGUoMzApO1xuICAgIH1cblxuICAgIGRhdGVMZWZ0LnNldE1vbnRoKGRhdGVMZWZ0LmdldE1vbnRoKCkgLSBzaWduICogZGlmZmVyZW5jZSk7IC8vIE1hdGguYWJzKGRpZmYgaW4gZnVsbCBtb250aHMgLSBkaWZmIGluIGNhbGVuZGFyIG1vbnRocykgPT09IDEgaWYgbGFzdCBjYWxlbmRhciBtb250aCBpcyBub3QgZnVsbFxuICAgIC8vIElmIHNvLCByZXN1bHQgbXVzdCBiZSBkZWNyZWFzZWQgYnkgMSBpbiBhYnNvbHV0ZSB2YWx1ZVxuXG4gICAgdmFyIGlzTGFzdE1vbnRoTm90RnVsbCA9IGNvbXBhcmVBc2MoZGF0ZUxlZnQsIGRhdGVSaWdodCkgPT09IC1zaWduOyAvLyBDaGVjayBmb3IgY2FzZXMgb2Ygb25lIGZ1bGwgY2FsZW5kYXIgbW9udGhcblxuICAgIGlmIChpc0xhc3REYXlPZk1vbnRoKHRvRGF0ZShkaXJ0eURhdGVMZWZ0KSkgJiYgZGlmZmVyZW5jZSA9PT0gMSAmJiBjb21wYXJlQXNjKGRpcnR5RGF0ZUxlZnQsIGRhdGVSaWdodCkgPT09IDEpIHtcbiAgICAgIGlzTGFzdE1vbnRoTm90RnVsbCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJlc3VsdCA9IHNpZ24gKiAoZGlmZmVyZW5jZSAtIE51bWJlcihpc0xhc3RNb250aE5vdEZ1bGwpKTtcbiAgfSAvLyBQcmV2ZW50IG5lZ2F0aXZlIHplcm9cblxuXG4gIHJldHVybiByZXN1bHQgPT09IDAgPyAwIDogcmVzdWx0O1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgZGlmZmVyZW5jZUluTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZUxlZnQgLSB0aGUgbGF0ZXIgZGF0ZVxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZVJpZ2h0IC0gdGhlIGVhcmxpZXIgZGF0ZVxuICogQHJldHVybnMge051bWJlcn0gdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHNcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSG93IG1hbnkgbWlsbGlzZWNvbmRzIGFyZSBiZXR3ZWVuXG4gKiAvLyAyIEp1bHkgMjAxNCAxMjozMDoyMC42MDAgYW5kIDIgSnVseSAyMDE0IDEyOjMwOjIxLjcwMD9cbiAqIGNvbnN0IHJlc3VsdCA9IGRpZmZlcmVuY2VJbk1pbGxpc2Vjb25kcyhcbiAqICAgbmV3IERhdGUoMjAxNCwgNiwgMiwgMTIsIDMwLCAyMSwgNzAwKSxcbiAqICAgbmV3IERhdGUoMjAxNCwgNiwgMiwgMTIsIDMwLCAyMCwgNjAwKVxuICogKVxuICogLy89PiAxMTAwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlmZmVyZW5jZUluTWlsbGlzZWNvbmRzKGRhdGVMZWZ0LCBkYXRlUmlnaHQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHJldHVybiB0b0RhdGUoZGF0ZUxlZnQpLmdldFRpbWUoKSAtIHRvRGF0ZShkYXRlUmlnaHQpLmdldFRpbWUoKTtcbn0iLCJ2YXIgcm91bmRpbmdNYXAgPSB7XG4gIGNlaWw6IE1hdGguY2VpbCxcbiAgcm91bmQ6IE1hdGgucm91bmQsXG4gIGZsb29yOiBNYXRoLmZsb29yLFxuICB0cnVuYzogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlIDwgMCA/IE1hdGguY2VpbCh2YWx1ZSkgOiBNYXRoLmZsb29yKHZhbHVlKTtcbiAgfSAvLyBNYXRoLnRydW5jIGlzIG5vdCBzdXBwb3J0ZWQgYnkgSUVcblxufTtcbnZhciBkZWZhdWx0Um91bmRpbmdNZXRob2QgPSAndHJ1bmMnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFJvdW5kaW5nTWV0aG9kKG1ldGhvZCkge1xuICByZXR1cm4gbWV0aG9kID8gcm91bmRpbmdNYXBbbWV0aG9kXSA6IHJvdW5kaW5nTWFwW2RlZmF1bHRSb3VuZGluZ01ldGhvZF07XG59IiwiaW1wb3J0IGRpZmZlcmVuY2VJbk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vZGlmZmVyZW5jZUluTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0Um91bmRpbmdNZXRob2QgfSBmcm9tIFwiLi4vX2xpYi9yb3VuZGluZ01ldGhvZHMvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgZGlmZmVyZW5jZUluU2Vjb25kc1xuICogQGNhdGVnb3J5IFNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIG51bWJlciBvZiBzZWNvbmRzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBudW1iZXIgb2Ygc2Vjb25kcyBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcy5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVMZWZ0IC0gdGhlIGxhdGVyIGRhdGVcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVSaWdodCAtIHRoZSBlYXJsaWVyIGRhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLnJvdW5kaW5nTWV0aG9kPSd0cnVuYyddIC0gYSByb3VuZGluZyBtZXRob2QgKGBjZWlsYCwgYGZsb29yYCwgYHJvdW5kYCBvciBgdHJ1bmNgKVxuICogQHJldHVybnMge051bWJlcn0gdGhlIG51bWJlciBvZiBzZWNvbmRzXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEhvdyBtYW55IHNlY29uZHMgYXJlIGJldHdlZW5cbiAqIC8vIDIgSnVseSAyMDE0IDEyOjMwOjA3Ljk5OSBhbmQgMiBKdWx5IDIwMTQgMTI6MzA6MjAuMDAwP1xuICogY29uc3QgcmVzdWx0ID0gZGlmZmVyZW5jZUluU2Vjb25kcyhcbiAqICAgbmV3IERhdGUoMjAxNCwgNiwgMiwgMTIsIDMwLCAyMCwgMCksXG4gKiAgIG5ldyBEYXRlKDIwMTQsIDYsIDIsIDEyLCAzMCwgNywgOTk5KVxuICogKVxuICogLy89PiAxMlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRpZmZlcmVuY2VJblNlY29uZHMoZGF0ZUxlZnQsIGRhdGVSaWdodCwgb3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRpZmYgPSBkaWZmZXJlbmNlSW5NaWxsaXNlY29uZHMoZGF0ZUxlZnQsIGRhdGVSaWdodCkgLyAxMDAwO1xuICByZXR1cm4gZ2V0Um91bmRpbmdNZXRob2Qob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnJvdW5kaW5nTWV0aG9kKShkaWZmKTtcbn0iLCJpbXBvcnQgYXNzaWduIGZyb20gXCIuLi9hc3NpZ24vaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNsb25lT2JqZWN0KGRpcnR5T2JqZWN0KSB7XG4gIHJldHVybiBhc3NpZ24oe30sIGRpcnR5T2JqZWN0KTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBkaXJ0eU9iamVjdCkge1xuICBpZiAodGFyZ2V0ID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhc3NpZ24gcmVxdWlyZXMgdGhhdCBpbnB1dCBwYXJhbWV0ZXIgbm90IGJlIG51bGwgb3IgdW5kZWZpbmVkJyk7XG4gIH1cblxuICBkaXJ0eU9iamVjdCA9IGRpcnR5T2JqZWN0IHx8IHt9O1xuXG4gIGZvciAodmFyIHByb3BlcnR5IGluIGRpcnR5T2JqZWN0KSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkaXJ0eU9iamVjdCwgcHJvcGVydHkpKSB7XG4gICAgICB0YXJnZXRbcHJvcGVydHldID0gZGlydHlPYmplY3RbcHJvcGVydHldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiaW1wb3J0IGNvbXBhcmVBc2MgZnJvbSBcIi4uL2NvbXBhcmVBc2MvaW5kZXguanNcIjtcbmltcG9ydCBkaWZmZXJlbmNlSW5Nb250aHMgZnJvbSBcIi4uL2RpZmZlcmVuY2VJbk1vbnRocy9pbmRleC5qc1wiO1xuaW1wb3J0IGRpZmZlcmVuY2VJblNlY29uZHMgZnJvbSBcIi4uL2RpZmZlcmVuY2VJblNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCBkZWZhdWx0TG9jYWxlIGZyb20gXCIuLi9sb2NhbGUvZW4tVVMvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGNsb25lT2JqZWN0IGZyb20gXCIuLi9fbGliL2Nsb25lT2JqZWN0L2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTlVURVNfSU5fREFZID0gMTQ0MDtcbnZhciBNSU5VVEVTX0lOX0FMTU9TVF9UV09fREFZUyA9IDI1MjA7XG52YXIgTUlOVVRFU19JTl9NT05USCA9IDQzMjAwO1xudmFyIE1JTlVURVNfSU5fVFdPX01PTlRIUyA9IDg2NDAwO1xuLyoqXG4gKiBAbmFtZSBmb3JtYXREaXN0YW5jZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzIGluIHdvcmRzLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcyBpbiB3b3Jkcy5cbiAqXG4gKiB8IERpc3RhbmNlIGJldHdlZW4gZGF0ZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUmVzdWx0ICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IDAgLi4uIDMwIHNlY3MgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbGVzcyB0aGFuIGEgbWludXRlICB8XG4gKiB8IDMwIHNlY3MgLi4uIDEgbWluIDMwIHNlY3MgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMSBtaW51dGUgICAgICAgICAgICB8XG4gKiB8IDEgbWluIDMwIHNlY3MgLi4uIDQ0IG1pbnMgMzAgc2VjcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWzIuLjQ0XSBtaW51dGVzICAgICB8XG4gKiB8IDQ0IG1pbnMgLi4uIDMwIHNlY3MgLi4uIDg5IG1pbnMgMzAgc2VjcyAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWJvdXQgMSBob3VyICAgICAgICB8XG4gKiB8IDg5IG1pbnMgMzAgc2VjcyAuLi4gMjMgaHJzIDU5IG1pbnMgMzAgc2VjcyAgICAgICAgICAgICAgICAgICAgICAgIHwgYWJvdXQgWzIuLjI0XSBob3VycyB8XG4gKiB8IDIzIGhycyA1OSBtaW5zIDMwIHNlY3MgLi4uIDQxIGhycyA1OSBtaW5zIDMwIHNlY3MgICAgICAgICAgICAgICAgIHwgMSBkYXkgICAgICAgICAgICAgICB8XG4gKiB8IDQxIGhycyA1OSBtaW5zIDMwIHNlY3MgLi4uIDI5IGRheXMgMjMgaHJzIDU5IG1pbnMgMzAgc2VjcyAgICAgICAgIHwgWzIuLjMwXSBkYXlzICAgICAgICB8XG4gKiB8IDI5IGRheXMgMjMgaHJzIDU5IG1pbnMgMzAgc2VjcyAuLi4gNDQgZGF5cyAyMyBocnMgNTkgbWlucyAzMCBzZWNzIHwgYWJvdXQgMSBtb250aCAgICAgICB8XG4gKiB8IDQ0IGRheXMgMjMgaHJzIDU5IG1pbnMgMzAgc2VjcyAuLi4gNTkgZGF5cyAyMyBocnMgNTkgbWlucyAzMCBzZWNzIHwgYWJvdXQgMiBtb250aHMgICAgICB8XG4gKiB8IDU5IGRheXMgMjMgaHJzIDU5IG1pbnMgMzAgc2VjcyAuLi4gMSB5ciAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWzIuLjEyXSBtb250aHMgICAgICB8XG4gKiB8IDEgeXIgLi4uIDEgeXIgMyBtb250aHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWJvdXQgMSB5ZWFyICAgICAgICB8XG4gKiB8IDEgeXIgMyBtb250aHMgLi4uIDEgeXIgOSBtb250aCBzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgb3ZlciAxIHllYXIgICAgICAgICB8XG4gKiB8IDEgeXIgOSBtb250aHMgLi4uIDIgeXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWxtb3N0IDIgeWVhcnMgICAgICB8XG4gKiB8IE4geXJzIC4uLiBOIHlycyAzIG1vbnRocyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWJvdXQgTiB5ZWFycyAgICAgICB8XG4gKiB8IE4geXJzIDMgbW9udGhzIC4uLiBOIHlycyA5IG1vbnRocyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgb3ZlciBOIHllYXJzICAgICAgICB8XG4gKiB8IE4geXJzIDkgbW9udGhzIC4uLiBOKzEgeXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWxtb3N0IE4rMSB5ZWFycyAgICB8XG4gKlxuICogV2l0aCBgb3B0aW9ucy5pbmNsdWRlU2Vjb25kcyA9PSB0cnVlYDpcbiAqIHwgRGlzdGFuY2UgYmV0d2VlbiBkYXRlcyB8IFJlc3VsdCAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgMCBzZWNzIC4uLiA1IHNlY3MgICAgICB8IGxlc3MgdGhhbiA1IHNlY29uZHMgIHxcbiAqIHwgNSBzZWNzIC4uLiAxMCBzZWNzICAgICB8IGxlc3MgdGhhbiAxMCBzZWNvbmRzIHxcbiAqIHwgMTAgc2VjcyAuLi4gMjAgc2VjcyAgICB8IGxlc3MgdGhhbiAyMCBzZWNvbmRzIHxcbiAqIHwgMjAgc2VjcyAuLi4gNDAgc2VjcyAgICB8IGhhbGYgYSBtaW51dGUgICAgICAgIHxcbiAqIHwgNDAgc2VjcyAuLi4gNjAgc2VjcyAgICB8IGxlc3MgdGhhbiBhIG1pbnV0ZSAgIHxcbiAqIHwgNjAgc2VjcyAuLi4gOTAgc2VjcyAgICB8IDEgbWludXRlICAgICAgICAgICAgIHxcbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIC0gVGhlIGZ1bmN0aW9uIHdhcyByZW5hbWVkIGZyb20gYGRpc3RhbmNlSW5Xb3JkcyBgIHRvIGBmb3JtYXREaXN0YW5jZWBcbiAqICAgdG8gbWFrZSBpdHMgbmFtZSBjb25zaXN0ZW50IHdpdGggYGZvcm1hdGAgYW5kIGBmb3JtYXRSZWxhdGl2ZWAuXG4gKlxuICogLSBUaGUgb3JkZXIgb2YgYXJndW1lbnRzIGlzIHN3YXBwZWQgdG8gbWFrZSB0aGUgZnVuY3Rpb25cbiAqICAgY29uc2lzdGVudCB3aXRoIGBkaWZmZXJlbmNlSW4uLi5gIGZ1bmN0aW9ucy5cbiAqXG4gKiAgIGBgYGphdmFzY3JpcHRcbiAqICAgLy8gQmVmb3JlIHYyLjAuMFxuICpcbiAqICAgZGlzdGFuY2VJbldvcmRzKFxuICogICAgIG5ldyBEYXRlKDE5ODYsIDMsIDQsIDEwLCAzMiwgMCksXG4gKiAgICAgbmV3IERhdGUoMTk4NiwgMywgNCwgMTEsIDMyLCAwKSxcbiAqICAgICB7IGFkZFN1ZmZpeDogdHJ1ZSB9XG4gKiAgICkgLy89PiAnaW4gYWJvdXQgMSBob3VyJ1xuICpcbiAqICAgLy8gdjIuMC4wIG9ud2FyZFxuICpcbiAqICAgZm9ybWF0RGlzdGFuY2UoXG4gKiAgICAgbmV3IERhdGUoMTk4NiwgMywgNCwgMTEsIDMyLCAwKSxcbiAqICAgICBuZXcgRGF0ZSgxOTg2LCAzLCA0LCAxMCwgMzIsIDApLFxuICogICAgIHsgYWRkU3VmZml4OiB0cnVlIH1cbiAqICAgKSAvLz0+ICdpbiBhYm91dCAxIGhvdXInXG4gKiAgIGBgYFxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZVxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gYmFzZURhdGUgLSB0aGUgZGF0ZSB0byBjb21wYXJlIHdpdGhcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5pbmNsdWRlU2Vjb25kcz1mYWxzZV0gLSBkaXN0YW5jZXMgbGVzcyB0aGFuIGEgbWludXRlIGFyZSBtb3JlIGRldGFpbGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmFkZFN1ZmZpeD1mYWxzZV0gLSByZXN1bHQgaW5kaWNhdGVzIGlmIHRoZSBzZWNvbmQgZGF0ZSBpcyBlYXJsaWVyIG9yIGxhdGVyIHRoYW4gdGhlIGZpcnN0XG4gKiBAcGFyYW0ge0xvY2FsZX0gW29wdGlvbnMubG9jYWxlPWRlZmF1bHRMb2NhbGVdIC0gdGhlIGxvY2FsZSBvYmplY3QuIFNlZSBbTG9jYWxlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL0xvY2FsZX1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBkaXN0YW5jZSBpbiB3b3Jkc1xuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYGRhdGVgIG11c3Qgbm90IGJlIEludmFsaWQgRGF0ZVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYGJhc2VEYXRlYCBtdXN0IG5vdCBiZSBJbnZhbGlkIERhdGVcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBmb3JtYXREaXN0YW5jZWAgcHJvcGVydHlcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hhdCBpcyB0aGUgZGlzdGFuY2UgYmV0d2VlbiAyIEp1bHkgMjAxNCBhbmQgMSBKYW51YXJ5IDIwMTU/XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXREaXN0YW5jZShuZXcgRGF0ZSgyMDE0LCA2LCAyKSwgbmV3IERhdGUoMjAxNSwgMCwgMSkpXG4gKiAvLz0+ICc2IG1vbnRocydcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hhdCBpcyB0aGUgZGlzdGFuY2UgYmV0d2VlbiAxIEphbnVhcnkgMjAxNSAwMDowMDoxNVxuICogLy8gYW5kIDEgSmFudWFyeSAyMDE1IDAwOjAwOjAwLCBpbmNsdWRpbmcgc2Vjb25kcz9cbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlKFxuICogICBuZXcgRGF0ZSgyMDE1LCAwLCAxLCAwLCAwLCAxNSksXG4gKiAgIG5ldyBEYXRlKDIwMTUsIDAsIDEsIDAsIDAsIDApLFxuICogICB7IGluY2x1ZGVTZWNvbmRzOiB0cnVlIH1cbiAqIClcbiAqIC8vPT4gJ2xlc3MgdGhhbiAyMCBzZWNvbmRzJ1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGF0IGlzIHRoZSBkaXN0YW5jZSBmcm9tIDEgSmFudWFyeSAyMDE2XG4gKiAvLyB0byAxIEphbnVhcnkgMjAxNSwgd2l0aCBhIHN1ZmZpeD9cbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlKG5ldyBEYXRlKDIwMTUsIDAsIDEpLCBuZXcgRGF0ZSgyMDE2LCAwLCAxKSwge1xuICogICBhZGRTdWZmaXg6IHRydWVcbiAqIH0pXG4gKiAvLz0+ICdhYm91dCAxIHllYXIgYWdvJ1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGF0IGlzIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIDEgQXVndXN0IDIwMTYgYW5kIDEgSmFudWFyeSAyMDE1IGluIEVzcGVyYW50bz9cbiAqIGltcG9ydCB7IGVvTG9jYWxlIH0gZnJvbSAnZGF0ZS1mbnMvbG9jYWxlL2VvJ1xuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2UobmV3IERhdGUoMjAxNiwgNywgMSksIG5ldyBEYXRlKDIwMTUsIDAsIDEpLCB7XG4gKiAgIGxvY2FsZTogZW9Mb2NhbGVcbiAqIH0pXG4gKiAvLz0+ICdwbGkgb2wgMSBqYXJvJ1xuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdERpc3RhbmNlKGRpcnR5RGF0ZSwgZGlydHlCYXNlRGF0ZSkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUgfHwgZGVmYXVsdExvY2FsZTtcblxuICBpZiAoIWxvY2FsZS5mb3JtYXREaXN0YW5jZSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGZvcm1hdERpc3RhbmNlIHByb3BlcnR5Jyk7XG4gIH1cblxuICB2YXIgY29tcGFyaXNvbiA9IGNvbXBhcmVBc2MoZGlydHlEYXRlLCBkaXJ0eUJhc2VEYXRlKTtcblxuICBpZiAoaXNOYU4oY29tcGFyaXNvbikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIH1cblxuICB2YXIgbG9jYWxpemVPcHRpb25zID0gY2xvbmVPYmplY3Qob3B0aW9ucyk7XG4gIGxvY2FsaXplT3B0aW9ucy5hZGRTdWZmaXggPSBCb29sZWFuKG9wdGlvbnMuYWRkU3VmZml4KTtcbiAgbG9jYWxpemVPcHRpb25zLmNvbXBhcmlzb24gPSBjb21wYXJpc29uO1xuICB2YXIgZGF0ZUxlZnQ7XG4gIHZhciBkYXRlUmlnaHQ7XG5cbiAgaWYgKGNvbXBhcmlzb24gPiAwKSB7XG4gICAgZGF0ZUxlZnQgPSB0b0RhdGUoZGlydHlCYXNlRGF0ZSk7XG4gICAgZGF0ZVJpZ2h0ID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0ZUxlZnQgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgICBkYXRlUmlnaHQgPSB0b0RhdGUoZGlydHlCYXNlRGF0ZSk7XG4gIH1cblxuICB2YXIgc2Vjb25kcyA9IGRpZmZlcmVuY2VJblNlY29uZHMoZGF0ZVJpZ2h0LCBkYXRlTGVmdCk7XG4gIHZhciBvZmZzZXRJblNlY29uZHMgPSAoZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhkYXRlUmlnaHQpIC0gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhkYXRlTGVmdCkpIC8gMTAwMDtcbiAgdmFyIG1pbnV0ZXMgPSBNYXRoLnJvdW5kKChzZWNvbmRzIC0gb2Zmc2V0SW5TZWNvbmRzKSAvIDYwKTtcbiAgdmFyIG1vbnRoczsgLy8gMCB1cCB0byAyIG1pbnNcblxuICBpZiAobWludXRlcyA8IDIpIHtcbiAgICBpZiAob3B0aW9ucy5pbmNsdWRlU2Vjb25kcykge1xuICAgICAgaWYgKHNlY29uZHMgPCA1KSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ2xlc3NUaGFuWFNlY29uZHMnLCA1LCBsb2NhbGl6ZU9wdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmIChzZWNvbmRzIDwgMTApIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgnbGVzc1RoYW5YU2Vjb25kcycsIDEwLCBsb2NhbGl6ZU9wdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmIChzZWNvbmRzIDwgMjApIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgnbGVzc1RoYW5YU2Vjb25kcycsIDIwLCBsb2NhbGl6ZU9wdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmIChzZWNvbmRzIDwgNDApIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgnaGFsZkFNaW51dGUnLCBudWxsLCBsb2NhbGl6ZU9wdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmIChzZWNvbmRzIDwgNjApIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgnbGVzc1RoYW5YTWludXRlcycsIDEsIGxvY2FsaXplT3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCd4TWludXRlcycsIDEsIGxvY2FsaXplT3B0aW9ucyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChtaW51dGVzID09PSAwKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ2xlc3NUaGFuWE1pbnV0ZXMnLCAxLCBsb2NhbGl6ZU9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgneE1pbnV0ZXMnLCBtaW51dGVzLCBsb2NhbGl6ZU9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0gLy8gMiBtaW5zIHVwIHRvIDAuNzUgaHJzXG5cbiAgfSBlbHNlIGlmIChtaW51dGVzIDwgNDUpIHtcbiAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCd4TWludXRlcycsIG1pbnV0ZXMsIGxvY2FsaXplT3B0aW9ucyk7IC8vIDAuNzUgaHJzIHVwIHRvIDEuNSBocnNcbiAgfSBlbHNlIGlmIChtaW51dGVzIDwgOTApIHtcbiAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCdhYm91dFhIb3VycycsIDEsIGxvY2FsaXplT3B0aW9ucyk7IC8vIDEuNSBocnMgdXAgdG8gMjQgaHJzXG4gIH0gZWxzZSBpZiAobWludXRlcyA8IE1JTlVURVNfSU5fREFZKSB7XG4gICAgdmFyIGhvdXJzID0gTWF0aC5yb3VuZChtaW51dGVzIC8gNjApO1xuICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ2Fib3V0WEhvdXJzJywgaG91cnMsIGxvY2FsaXplT3B0aW9ucyk7IC8vIDEgZGF5IHVwIHRvIDEuNzUgZGF5c1xuICB9IGVsc2UgaWYgKG1pbnV0ZXMgPCBNSU5VVEVTX0lOX0FMTU9TVF9UV09fREFZUykge1xuICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ3hEYXlzJywgMSwgbG9jYWxpemVPcHRpb25zKTsgLy8gMS43NSBkYXlzIHVwIHRvIDMwIGRheXNcbiAgfSBlbHNlIGlmIChtaW51dGVzIDwgTUlOVVRFU19JTl9NT05USCkge1xuICAgIHZhciBkYXlzID0gTWF0aC5yb3VuZChtaW51dGVzIC8gTUlOVVRFU19JTl9EQVkpO1xuICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ3hEYXlzJywgZGF5cywgbG9jYWxpemVPcHRpb25zKTsgLy8gMSBtb250aCB1cCB0byAyIG1vbnRoc1xuICB9IGVsc2UgaWYgKG1pbnV0ZXMgPCBNSU5VVEVTX0lOX1RXT19NT05USFMpIHtcbiAgICBtb250aHMgPSBNYXRoLnJvdW5kKG1pbnV0ZXMgLyBNSU5VVEVTX0lOX01PTlRIKTtcbiAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCdhYm91dFhNb250aHMnLCBtb250aHMsIGxvY2FsaXplT3B0aW9ucyk7XG4gIH1cblxuICBtb250aHMgPSBkaWZmZXJlbmNlSW5Nb250aHMoZGF0ZVJpZ2h0LCBkYXRlTGVmdCk7IC8vIDIgbW9udGhzIHVwIHRvIDEyIG1vbnRoc1xuXG4gIGlmIChtb250aHMgPCAxMikge1xuICAgIHZhciBuZWFyZXN0TW9udGggPSBNYXRoLnJvdW5kKG1pbnV0ZXMgLyBNSU5VVEVTX0lOX01PTlRIKTtcbiAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCd4TW9udGhzJywgbmVhcmVzdE1vbnRoLCBsb2NhbGl6ZU9wdGlvbnMpOyAvLyAxIHllYXIgdXAgdG8gbWF4IERhdGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9udGhzU2luY2VTdGFydE9mWWVhciA9IG1vbnRocyAlIDEyO1xuICAgIHZhciB5ZWFycyA9IE1hdGguZmxvb3IobW9udGhzIC8gMTIpOyAvLyBOIHllYXJzIHVwIHRvIDEgeWVhcnMgMyBtb250aHNcblxuICAgIGlmIChtb250aHNTaW5jZVN0YXJ0T2ZZZWFyIDwgMykge1xuICAgICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgnYWJvdXRYWWVhcnMnLCB5ZWFycywgbG9jYWxpemVPcHRpb25zKTsgLy8gTiB5ZWFycyAzIG1vbnRocyB1cCB0byBOIHllYXJzIDkgbW9udGhzXG4gICAgfSBlbHNlIGlmIChtb250aHNTaW5jZVN0YXJ0T2ZZZWFyIDwgOSkge1xuICAgICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgnb3ZlclhZZWFycycsIHllYXJzLCBsb2NhbGl6ZU9wdGlvbnMpOyAvLyBOIHllYXJzIDkgbW9udGhzIHVwIHRvIE4geWVhciAxMiBtb250aHNcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgnYWxtb3N0WFllYXJzJywgeWVhcnMgKyAxLCBsb2NhbGl6ZU9wdGlvbnMpO1xuICAgIH1cbiAgfVxufSIsImltcG9ydCB7IFByaW9yaXR5VHlwZSB9IGZyb20gXCIuLi9lbnRpdHkvUHJpb3JpdHlUeXBlXCI7XG5pbXBvcnQgeyBVdGlscyB9IGZyb20gXCIuLi91dGlsL1V0aWxzXCI7XG5pbXBvcnQgeyBmb3JtYXQsIGZvcm1hdERpc3RhbmNlLCBpc0FmdGVyIH0gZnJvbSBcImRhdGUtZm5zXCI7XG5cbmNvbnN0IE9WRVJWSUVXX1BBR0VfSUQgPSAwO1xuXG5leHBvcnQgY2xhc3MgU2luZ2xlUHJvamVjdFZpZXcge1xuICBjb250YWluZXI7XG4gIHByb2plY3Q7XG4gIGNvbnRyb2xsZXI7XG4gIG1vZGVsO1xuICBtZW51VmlldztcblxuICBjb25zdHJ1Y3RvcihkZXBlbmRlbmNpZXMpIHtcbiAgICB0aGlzLndyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNvbnRlbnQtd3JhcHBlclwiKTtcbiAgICB0aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZChcImNvbnRhaW5lclwiKTtcblxuICAgIGlmIChkZXBlbmRlbmNpZXMubWVudVZpZXcpIHtcbiAgICAgIHRoaXMubWVudVZpZXcgPSBkZXBlbmRlbmNpZXMubWVudVZpZXc7XG4gICAgfVxuXG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICBpbml0KCkge1xuICAgIC8vIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBzZXRDb250cm9sbGVyKGNvbnRyb2xsZXIpIHtcbiAgICB0aGlzLmNvbnRyb2xsZXIgPSBjb250cm9sbGVyO1xuICAgIHRoaXMuc2V0Q3VycmVudFByb2plY3QoKTtcbiAgfVxuXG4gIHNldEN1cnJlbnRQcm9qZWN0KCkge1xuICAgIHRoaXMucHJvamVjdCA9IHRoaXMuY29udHJvbGxlci5nZXRDdXJyZW50UHJvamVjdCgpO1xuICB9XG5cbiAgc2V0UHJvamVjdChwcm9qZWN0KSB7XG4gICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgfVxuXG4gIHNldE1vZGVsKG1vZGVsKSB7XG4gICAgY29uc29sZS5sb2coJ21vZGVsIHNldCcpXG4gICAgdGhpcy5tb2RlbCA9IG1vZGVsO1xuICB9XG5cbiAgdXBkYXRlUHJvamVjdCgpIHtcbiAgICB0aGlzLnByb2plY3QgPSB0aGlzLm1vZGVsLmdldEN1cnJlbnRQcm9qZWN0KCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc29sZS5sb2coJ1tTaW5nbGVQcm9qZWN0Vmlldy5yZW5kZXIoKV0nKVxuICAgIHRoaXMudXBkYXRlUHJvamVjdCgpO1xuICAgIHRoaXMucmVuZGVyTWVudSgpO1xuICAgIGlmICh0aGlzLnByb2plY3QuaWQgPT09IE9WRVJWSUVXX1BBR0VfSUQpIHtcbiAgICAgIHRoaXMucmVuZGVyT3ZlcnZpZXcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJUYXNrc0xpc3QoKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXJNZW51KCkge1xuICAgIHRoaXMubWVudVZpZXcucmVuZGVyKCk7XG4gIH1cblxuICByZW5kZXJPdmVydmlldygpIHtcbiAgICBjb25zb2xlLmxvZygnU2lnbmxlUHJvamVjdFZpZXcucmVuZGVyT3ZlcnZpZXcoKScpXG4gICAgdGhpcy5jbGVhckNvbnRhaW5lcigpO1xuXG4gICAgY29uc3QgZmxleFJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgZmxleFJvdy5jbGFzc0xpc3QuYWRkKFwiZmxleC1yb3dcIik7XG5cbiAgICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMVwiKTtcbiAgICB0aXRsZS5jbGFzc0xpc3QuYWRkKFwibGlzdC10aXRsZVwiKTtcbiAgICB0aXRsZS50ZXh0Q29udGVudCA9IFwiT3ZlcnZpZXdcIjtcbiAgICBmbGV4Um93LmFwcGVuZENoaWxkKHRpdGxlKTtcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChmbGV4Um93KTtcblxuICAgIGNvbnN0IHRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgdGV4dC5jbGFzc0xpc3QuYWRkKCdsaXN0LWRlc2NyaXB0aW9uJylcbiAgICB0ZXh0LnRleHRDb250ZW50ID0gJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLic7XG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGV4dCk7XG5cbiAgICBjb25zdCBwcm9qZWN0R3JpZFdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHByb2plY3RHcmlkV3JhcHBlci5jbGFzc0xpc3QuYWRkKFwicHJvamVjdC1ncmlkLXdyYXBwZXJcIik7XG5cbiAgICBjb25zdCBwcm9qZWN0R3JpZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgcHJvamVjdEdyaWQuY2xhc3NMaXN0LmFkZChcInByb2plY3QtZ3JpZFwiKTtcblxuICAgIHRoaXMubW9kZWwuZ2V0UHJvamVjdE92ZXJ2aWV3KCkubWFwKChwcm9qZWN0KSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhwcm9qZWN0KTtcbiAgICAgIHByb2plY3RHcmlkLmFwcGVuZENoaWxkKHRoaXMuZ2V0UHJvamVjdEdyaWRJdGVtKHByb2plY3QpKTtcbiAgICB9KTtcblxuICAgIHByb2plY3RHcmlkLmFwcGVuZENoaWxkKHRoaXMuZ2V0TmV3UHJvamVjdEdyaWRCdXR0b24oKSk7XG4gICAgcHJvamVjdEdyaWRXcmFwcGVyLmFwcGVuZENoaWxkKHByb2plY3RHcmlkKTtcblxuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHByb2plY3RHcmlkV3JhcHBlcik7XG4gICAgdGhpcy53cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMuY29udGFpbmVyKTtcbiAgfVxuXG4gIGdldFByb2plY3RHcmlkSXRlbShwcm9qZWN0KSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwicHJvamVjdC1ncmlkLWl0ZW1cIik7XG4gICAgXG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXByb2plY3QtaW5kZXhcIiwgcHJvamVjdC5pZCk7XG5cbiAgICBjb25zdCBiZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgYmcuY2xhc3NMaXN0LmFkZChcImJnXCIpO1xuICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoYmcpO1xuXG4gICAgY29uc3QgdGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGV4dC5jbGFzc0xpc3QuYWRkKFwidGV4dFwiKTtcblxuICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgyXCIpO1xuICAgIHRpdGxlLmNsYXNzTGlzdC5hZGQoXCJwcm9qZWN0LXRpdGxlXCIpO1xuICAgIHRpdGxlLnRleHRDb250ZW50ID0gcHJvamVjdC5uYW1lO1xuICAgIHRleHQuYXBwZW5kQ2hpbGQodGl0bGUpO1xuXG4gICAgY29uc3QgdGFza0NvdW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgdGFza0NvdW50LmNsYXNzTGlzdC5hZGQoXCJ0YXNrLWNvdW50XCIpO1xuICAgIHRhc2tDb3VudC50ZXh0Q29udGVudCA9IGAke3Byb2plY3QudGFza3N9ICR7KHByb2plY3QudGFza3MgPT09IDEgPyBcInRhc2tcIiA6IFwidGFza3NcIil9YDtcbiAgICB0ZXh0LmFwcGVuZENoaWxkKHRhc2tDb3VudCk7XG5cbiAgICBlbGVtZW50LmFwcGVuZENoaWxkKHRleHQpO1xuICAgIGNvbnNvbGUubG9nKGVsZW1lbnQpO1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgZ2V0TmV3UHJvamVjdEdyaWRCdXR0b24oKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwicHJvamVjdC1ncmlkLWl0ZW1cIiwgXCJuZXctcHJvamVjdC1idG5cIik7XG5cbiAgICBjb25zdCBiZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgYmcuY2xhc3NMaXN0LmFkZChcImJnXCIpO1xuICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoYmcpO1xuXG4gICAgY29uc3QgdGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGV4dC5jbGFzc0xpc3QuYWRkKFwidGV4dFwiKTtcblxuICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgyXCIpO1xuICAgIHRpdGxlLmNsYXNzTGlzdC5hZGQoXCJwcm9qZWN0LXRpdGxlXCIpO1xuICAgIHRpdGxlLmlubmVySFRNTCA9IFwiPGkgY2xhc3M9J2ZhIGZhLXBsdXMnPjwvaT5cIjtcbiAgICB0ZXh0LmFwcGVuZENoaWxkKHRpdGxlKTtcblxuICAgIGNvbnN0IHRhc2tDb3VudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgIHRhc2tDb3VudC5jbGFzc0xpc3QuYWRkKFwidGFzay1jb3VudFwiKTtcbiAgICB0YXNrQ291bnQudGV4dENvbnRlbnQgPSAnTmV3IHByb2plY3QnO1xuICAgIHRleHQuYXBwZW5kQ2hpbGQodGFza0NvdW50KTtcblxuICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQodGV4dCk7XG5cbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHJlbmRlclRhc2tzTGlzdCgpIHtcbiAgICB0aGlzLmNsZWFyQ29udGFpbmVyKCk7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZChcImZhZGUtaW4tYW5pbWF0aW9uXCIpO1xuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuY3JlYXRlUHJvamVjdFRpdGxlQW5kTWVudSgpKTtcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmNyZWF0ZVByb2plY3REZXNjcmlwdGlvbigpKTtcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmNyZWF0ZVRhc2tzKCkpO1xuXG4gICAgdGhpcy53cmFwcGVyLnJlbW92ZUNoaWxkKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY29udGFpbmVyXCIpKTtcbiAgICB0aGlzLndyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy5jb250YWluZXIpO1xuICB9XG5cbiAgY2xlYXJDb250YWluZXIoKSB7XG4gICAgdGhpcy5jb250YWluZXIudGV4dENvbnRlbnQgPSBcIlwiO1xuICB9XG5cbiAgY3JlYXRlUHJvamVjdFRpdGxlQW5kTWVudSgpIHtcbiAgICBjb25zdCBmbGV4Um93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBmbGV4Um93LmNsYXNzTGlzdC5hZGQoXCJmbGV4LXJvd1wiKTtcblxuICAgIGNvbnN0IGhlYWRpbmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDFcIik7XG4gICAgaGVhZGluZy5jbGFzc0xpc3QuYWRkKFwibGlzdC10aXRsZVwiKTtcbiAgICBoZWFkaW5nLnRleHRDb250ZW50ID0gdGhpcy5wcm9qZWN0LnRpdGxlO1xuXG4gICAgY29uc3QgbWVudTEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIG1lbnUxLmNsYXNzTGlzdC5hZGQoXCJwdXNoLXJpZ2h0XCIsIFwiYWxpZ24tY2VudGVyXCIpO1xuXG4gICAgY29uc3QgaWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpXCIpO1xuICAgIGljb24uY2xhc3NMaXN0LmFkZChcImZhc1wiLCBcImZhLWVsbGlwc2lzLXZcIik7XG5cbiAgICBtZW51MS5hcHBlbmRDaGlsZChpY29uKTtcblxuICAgIGZsZXhSb3cuYXBwZW5kQ2hpbGQoaGVhZGluZyk7XG4gICAgZmxleFJvdy5hcHBlbmRDaGlsZChtZW51MSk7XG5cbiAgICByZXR1cm4gZmxleFJvdztcbiAgfVxuXG4gIGNyZWF0ZVByb2plY3REZXNjcmlwdGlvbigpIHtcbiAgICBjb25zdCBkZXNjcmlwdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgIGRlc2NyaXB0aW9uLmNsYXNzTGlzdC5hZGQoXCJsaXN0LWRlc2NyaXB0aW9uXCIpO1xuICAgIGRlc2NyaXB0aW9uLnRleHRDb250ZW50ID0gdGhpcy5wcm9qZWN0LmRlc2NyaXB0aW9uO1xuXG4gICAgcmV0dXJuIGRlc2NyaXB0aW9uO1xuICB9XG5cbiAgY3JlYXRlVGFza3MoKSB7XG4gICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgd3JhcHBlci5jbGFzc0xpc3QuYWRkKFwidGFza3Mtd3JhcHBlclwiKTtcblxuICAgIGNvbnN0IHNlY3Rpb25Ub2RvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBzZWN0aW9uVG9kby5jbGFzc0xpc3QuYWRkKFwiZmxleC1yb3dcIik7XG5cbiAgICBjb25zdCBoZWFkaW5nVG9kbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgaGVhZGluZ1RvZG8uY2xhc3NMaXN0LmFkZChcInRhc2tzLXRpdGxlXCIpO1xuICAgIGhlYWRpbmdUb2RvLnRleHRDb250ZW50ID0gXCJUb2RvXCI7XG5cbiAgICBzZWN0aW9uVG9kby5hcHBlbmRDaGlsZChoZWFkaW5nVG9kbyk7XG5cbiAgICBjb25zdCBleHBhbmRBbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGV4cGFuZEFsbC5jbGFzc0xpc3QuYWRkKFwicHVzaC1yaWdodFwiKTtcblxuICAgIGNvbnN0IGV4cGFuZEFsbFNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICBleHBhbmRBbGxTcGFuLmNsYXNzTGlzdC5hZGQoXCJmb250LXNtXCIpO1xuICAgIGV4cGFuZEFsbFNwYW4uaWQgPSBcImV4cGFuZC1hbGwtaGlkZS1hbGwtc3BhblwiO1xuICAgIGV4cGFuZEFsbFNwYW4udGV4dENvbnRlbnQgPSBcIkV4cGFuZCBhbGxcIjtcblxuICAgIGV4cGFuZEFsbC5hcHBlbmRDaGlsZChleHBhbmRBbGxTcGFuKTtcbiAgICBzZWN0aW9uVG9kby5hcHBlbmRDaGlsZChleHBhbmRBbGwpO1xuICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoc2VjdGlvblRvZG8pO1xuXG4gICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpO1xuICAgIGZvciAobGV0IHRhc2sgb2YgdGhpcy5wcm9qZWN0LnRhc2tzKSB7XG4gICAgICAvLyBmb3JtLmFwcGVuZENoaWxkKHRhc2suZ2V0RE9NRWxlbWVudCgpKTtcbiAgICAgIC8vIG9yXG4gICAgICBmb3JtLmFwcGVuZENoaWxkKHRoaXMuZ2V0VGFza0RPTUVsZW1lbnQodGFzaykpO1xuICAgIH1cblxuICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoZm9ybSk7XG5cbiAgICBpZiAodGhpcy5wcm9qZWN0LmRvbmUgJiYgdGhpcy5wcm9qZWN0LmRvbmUubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgaGVhZGluZ0RvbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgaGVhZGluZ0RvbmUuY2xhc3NMaXN0LmFkZChcInRhc2tzLXRpdGxlXCIpO1xuICAgICAgaGVhZGluZ0RvbmUudGV4dENvbnRlbnQgPSBcIkRvbmVcIjtcblxuICAgICAgY29uc3QgZG9uZUZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKTtcbiAgICAgIGZvciAobGV0IGRvbmVUYXNrIG9mIHRoaXMucHJvamVjdC5kb25lKSB7XG4gICAgICAgIGRvbmVGb3JtLmFwcGVuZENoaWxkKHRoaXMuZ2V0VGFza0RPTUVsZW1lbnQoZG9uZVRhc2spKTtcbiAgICAgIH1cblxuICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZChoZWFkaW5nRG9uZSk7XG4gICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGRvbmVGb3JtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gd3JhcHBlcjtcbiAgfVxuXG4gIGdldFRhc2tET01FbGVtZW50KHRhc2spIHtcbiAgICBjb25zdCBEQVRFX0ZOU19GT1JNQVRfU1RSSU5HID0gXCJFRUVFIGQgTExMTCB5XCI7XG5cbiAgICBsZXQgYmFja2dyb3VuZENvbG9yQ2xhc3M7XG4gICAgbGV0IGJvcmRlckNvbG9yQ2xhc3M7XG5cbiAgICBzd2l0Y2ggKHRhc2sucHJpb3JpdHkpIHtcbiAgICAgIGNhc2UgUHJpb3JpdHlUeXBlLkRFRkFVTFQ6XG4gICAgICAgIGJhY2tncm91bmRDb2xvckNsYXNzID0gXCJiZy1saWdodFwiO1xuICAgICAgICBib3JkZXJDb2xvckNsYXNzID0gXCJwcmlvcml0eS1kZWZhdWx0LWJvcmRlclwiO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBQcmlvcml0eVR5cGUuSElHSDpcbiAgICAgICAgYmFja2dyb3VuZENvbG9yQ2xhc3MgPSBcImJnLWRhbmdlclwiO1xuICAgICAgICBib3JkZXJDb2xvckNsYXNzID0gXCJwcmlvcml0eS1oaWdoLWJvcmRlclwiO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBQcmlvcml0eVR5cGUuTUVESVVNOlxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3JDbGFzcyA9IFwiYmctbWVkaXVtXCI7XG4gICAgICAgIGJvcmRlckNvbG9yQ2xhc3MgPSBcInByaW9yaXR5LW1lZGl1bS1ib3JkZXJcIjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgUHJpb3JpdHlUeXBlLkxPVzpcbiAgICAgICAgYmFja2dyb3VuZENvbG9yQ2xhc3MgPSBcImJnLWxvd1wiO1xuICAgICAgICBib3JkZXJDb2xvckNsYXNzID0gXCJwcmlvcml0eS1sb3ctYm9yZGVyXCI7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0YXNrRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFza1wiLCBib3JkZXJDb2xvckNsYXNzKTtcbiAgICB0YXNrRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWluZGV4XCIsIHRhc2suaWQpO1xuXG4gICAgY29uc3QgdGFza0NvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRhc2tDb250ZW50LmNsYXNzTGlzdC5hZGQoXCJ0YXNrLWNvbnRlbnRcIik7XG5cbiAgICBjb25zdCBjaGVja2JveElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIGNoZWNrYm94SW5wdXQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImNoZWNrYm94XCIpO1xuICAgIGlmICh0YXNrLmlzQ29tcGxldGUpIHtcbiAgICAgIGNoZWNrYm94SW5wdXQuc2V0QXR0cmlidXRlKFwiY2hlY2tlZFwiLCBcIlwiKTtcbiAgICB9XG4gICAgY2hlY2tib3hJbnB1dC5pZCA9IGB0YXNrLSR7dGFzay5pZH1gO1xuXG4gICAgdGFza0NvbnRlbnQuYXBwZW5kQ2hpbGQoY2hlY2tib3hJbnB1dCk7XG5cbiAgICBjb25zdCBjaGVja2JveFdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGNoZWNrYm94V3JhcHBlci5jbGFzc0xpc3QuYWRkKFwiY2hlY2tib3gtd3JhcHBlclwiKTtcbiAgICBjb25zdCBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgICBsYWJlbC5zZXRBdHRyaWJ1dGUoXCJmb3JcIiwgYHRhc2stJHt0YXNrLmlkfWApO1xuICAgIGNvbnN0IHNwYW5DaGVja2JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgIHNwYW5DaGVja2JveC5jbGFzc0xpc3QuYWRkKFwiY2hlY2tib3hcIik7XG4gICAgY29uc3Qgc3BhbkNoZWNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgc3BhbkNoZWNrLmNsYXNzTGlzdC5hZGQoXCJjaGVja1wiKTtcblxuICAgIHNwYW5DaGVja2JveC5hcHBlbmRDaGlsZChzcGFuQ2hlY2spO1xuICAgIGxhYmVsLmFwcGVuZENoaWxkKHNwYW5DaGVja2JveCk7XG4gICAgY2hlY2tib3hXcmFwcGVyLmFwcGVuZENoaWxkKGxhYmVsKTtcblxuICAgIHRhc2tDb250ZW50LmFwcGVuZENoaWxkKGNoZWNrYm94V3JhcHBlcik7XG5cbiAgICBjb25zdCB0YXNrVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGFza1RleHQuY2xhc3NMaXN0LmFkZChcInRhc2stdGV4dFwiKTtcblxuICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aXRsZS5jbGFzc0xpc3QuYWRkKFwidGl0bGVcIik7XG4gICAgdGl0bGUudGV4dENvbnRlbnQgPSB0YXNrLnRpdGxlO1xuXG4gICAgdGFza1RleHQuYXBwZW5kQ2hpbGQodGl0bGUpO1xuXG4gICAgY29uc3QgdGFza0RldGFpbHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRhc2tEZXRhaWxzLmNsYXNzTGlzdC5hZGQoXCJ0YXNrLWRldGFpbHNcIiwgXCJoaWRlXCIpO1xuXG4gICAgY29uc3QgdGFza0Rlc2NyaXB0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0YXNrRGVzY3JpcHRpb24uY2xhc3NMaXN0LmFkZChcImRlc2NyaXB0aW9uXCIsIFwiZm9udC1zbVwiKTtcbiAgICB0YXNrRGVzY3JpcHRpb24udGV4dENvbnRlbnQgPSB0YXNrLmRlc2NyaXB0aW9uO1xuXG4gICAgY29uc3QgZmxleFJvdzEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGZsZXhSb3cxLmNsYXNzTGlzdC5hZGQoXCJmbGV4LXJvd1wiKTtcblxuICAgIGNvbnN0IHByaW9yaXR5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBwcmlvcml0eS5jbGFzc0xpc3QuYWRkKFwicHJpb3JpdHlcIiwgYmFja2dyb3VuZENvbG9yQ2xhc3MsIFwiZm9udC1zbVwiKTtcbiAgICBwcmlvcml0eS50ZXh0Q29udGVudCA9IFV0aWxzLmNhcGl0YWxpemUodGFzay5wcmlvcml0eSk7XG5cbiAgICBjb25zdCBkdWVEYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBkdWVEYXRlLmNsYXNzTGlzdC5hZGQoXCJkdWUtZGF0ZVwiLCBcImZvbnQtc21cIik7XG5cbiAgICBjb25zdCBkdWVEYXRlU3RyaW5nID0gZm9ybWF0KHRhc2suZHVlRGF0ZSwgREFURV9GTlNfRk9STUFUX1NUUklORyk7XG5cbiAgICBsZXQgZHVlSW47XG4gICAgY29uc3QgZGlzdGFuY2UgPSBmb3JtYXREaXN0YW5jZSh0YXNrLmR1ZURhdGUsIG5ldyBEYXRlKCkpO1xuICAgIGlmIChpc0FmdGVyKG5ldyBEYXRlKCksIHRhc2suZHVlRGF0ZSkpIHtcbiAgICAgIC8vIE92ZXJkdWVcbiAgICAgIGR1ZUluID0gYE92ZXJkdWUgJHtkaXN0YW5jZX1gO1xuICAgIH0gZWxzZSB7XG4gICAgICBkdWVJbiA9IGBEdWUgaW4gJHtkaXN0YW5jZX1gO1xuICAgIH1cblxuICAgIGR1ZURhdGUuaW5uZXJIVE1MID0gYCR7ZHVlSW59IDxzcGFuIGNsYXNzPSdkYXRlJz4oJHtkdWVEYXRlU3RyaW5nfSk8L3NwYW4+YDtcblxuICAgIHRhc2tEZXRhaWxzLmFwcGVuZENoaWxkKHRhc2tEZXNjcmlwdGlvbik7XG5cbiAgICBmbGV4Um93MS5hcHBlbmRDaGlsZChwcmlvcml0eSk7XG4gICAgZmxleFJvdzEuYXBwZW5kQ2hpbGQoZHVlRGF0ZSk7XG4gICAgdGFza0RldGFpbHMuYXBwZW5kQ2hpbGQoZmxleFJvdzEpO1xuXG4gICAgdGFza1RleHQuYXBwZW5kQ2hpbGQodGFza0RldGFpbHMpO1xuXG4gICAgdGFza0NvbnRlbnQuYXBwZW5kQ2hpbGQodGFza1RleHQpO1xuICAgIHRhc2tFbGVtZW50LmFwcGVuZENoaWxkKHRhc2tDb250ZW50KTtcblxuICAgIGNvbnN0IHRhc2tNZW51ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0YXNrTWVudS5jbGFzc0xpc3QuYWRkKFwidGFzay1tZW51XCIpO1xuXG4gICAgY29uc3QgY2hldnJvbkljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaVwiKTtcbiAgICBjaGV2cm9uSWNvbi5jbGFzc0xpc3QuYWRkKFwiZmFzXCIsIFwiZmEtY2hldnJvbi1kb3duXCIsIFwiaWNvblwiLCBcImNoZXZyb25cIik7XG4gICAgdGFza01lbnUuYXBwZW5kQ2hpbGQoY2hldnJvbkljb24pO1xuXG4gICAgY29uc3QgbW9yZUljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaVwiKTtcbiAgICBtb3JlSWNvbi5jbGFzc0xpc3QuYWRkKFwiZmFzXCIsIFwiZmEtZWxsaXBzaXMtdlwiLCBcImljb25cIiwgXCJtb3JlXCIpO1xuICAgIHRhc2tNZW51LmFwcGVuZENoaWxkKG1vcmVJY29uKTtcblxuICAgIGNvbnN0IG1vcmVNZW51ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm1vcmUtbWVudVwiKTtcbiAgICBtb3JlTWVudS5jbGFzc0xpc3QuYWRkKFwibW9yZS1tZW51XCIsIFwiaGlkZVwiKTtcblxuICAgIGNvbnN0IGxpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidWxcIik7XG5cbiAgICBjb25zdCBlZGl0TGlzdEl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgZWRpdExpc3RJdGVtLmNsYXNzTGlzdC5hZGQoXCJtb3JlLW1lbnUtb3B0aW9uXCIsIFwiZWRpdFwiKTtcbiAgICBlZGl0TGlzdEl0ZW0uaW5uZXJIVE1MID0gXCI8aSBjbGFzcz0nZmFyIGZhLWVkaXQgaWNvbic+PC9pPiBFZGl0XCI7XG5cbiAgICBjb25zdCBkZWxldGVMaXN0SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcbiAgICBkZWxldGVMaXN0SXRlbS5jbGFzc0xpc3QuYWRkKFwibW9yZS1tZW51LW9wdGlvblwiLCBcImRlbGV0ZVwiKTtcbiAgICBkZWxldGVMaXN0SXRlbS5pbm5lckhUTUwgPSBcIjxpIGNsYXNzPSdmYXIgZmEtdHJhc2gtYWx0IGljb24nPjwvaT4gRGVsZXRlXCI7XG5cbiAgICBsaXN0LmFwcGVuZENoaWxkKGVkaXRMaXN0SXRlbSk7XG4gICAgbGlzdC5hcHBlbmRDaGlsZChkZWxldGVMaXN0SXRlbSk7XG5cbiAgICBtb3JlTWVudS5hcHBlbmRDaGlsZChsaXN0KTtcbiAgICB0YXNrTWVudS5hcHBlbmRDaGlsZChtb3JlTWVudSk7XG5cbiAgICB0YXNrRWxlbWVudC5hcHBlbmRDaGlsZCh0YXNrTWVudSk7XG5cbiAgICByZXR1cm4gdGFza0VsZW1lbnQ7XG4gIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBVdGlscyB7XG4gXG4gIHN0YXRpYyBjYXBpdGFsaXplKHN0cikge1xuICAgIGNvbnN0IGNhcGl0YWxpemVkU3RyaW5nID0gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xuICAgIHJldHVybiBjYXBpdGFsaXplZFN0cmluZztcbiAgfVxuXG59IiwiZXhwb3J0IGNsYXNzIE1lbnVWaWV3IHtcbiAgbW9kZWw7XG4gIGNvbnRyb2xsZXI7XG5cbiAgY29uc3RydWN0b3IoZGVwZW5kZW5jaWVzKSB7XG4gICAgaWYgKGRlcGVuZGVuY2llcy5tb2RlbCkge1xuICAgICAgdGhpcy5tb2RlbCA9IGRlcGVuZGVuY2llcy5tb2RlbDtcbiAgICB9XG4gIH1cblxuICBzZXRDb250cm9sbGVyKGNvbnRyb2xsZXIpIHtcbiAgICB0aGlzLmNvbnRyb2xsZXIgPSBjb250cm9sbGVyO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IG1lbnVMZWZ0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tZW51LWxlZnRcIik7XG4gICAgY29uc3QgbWVudSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWVudVwiKTtcbiAgICBtZW51TGVmdC5yZXBsYWNlQ2hpbGQodGhpcy5nZXRNZW51RE9NKCksIG1lbnUpO1xuICB9XG5cbiAgZ2V0TWVudURPTSgpIHtcbiAgICBjb25zdCBERUZBVUxUX0xJU1RfSVRFTV9JQ09OX0NMQVNTRVMgPSBbXCJmYXNcIiwgXCJmYS10YXNrc1wiXTtcblxuICAgIGNvbnN0IG1lbnUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIG1lbnUuY2xhc3NMaXN0LmFkZChcIm1lbnVcIik7XG5cbiAgICBjb25zdCBsaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInVsXCIpO1xuICAgIGxpc3QuY2xhc3NMaXN0LmFkZChcImZsZXgtZ3Jvd1wiKTtcblxuICAgIGxldCBwcm9qZWN0cyA9IHRoaXMubW9kZWwuZ2V0UHJvamVjdHMoKTtcblxuICAgIC8vIE92ZXJ2aWV3IGFuZCBwcm9qZWN0c1xuICAgIGZvciAobGV0IHByb2plY3Qgb2YgdGhpcy5tb2RlbC5nZXRQcm9qZWN0cygpKSB7XG4gICAgICAvLyBsZXQgdGFza3NBbW91bnQgPSB0aGlzLmNhbGN1bGF0ZVByb2plY3RUYXNrc0Ftb3VudChwcm9qZWN0KTtcbiAgICAgIGlmIChwcm9qZWN0LmlkID09PSAwKSB7XG4gICAgICAgIGxpc3QuYXBwZW5kQ2hpbGQodGhpcy5nZXRPdmVydmlld01lbnVJdGVtKHByb2plY3QpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpc3QuYXBwZW5kQ2hpbGQoXG4gICAgICAgICAgdGhpcy5nZXRNZW51SXRlbShwcm9qZWN0LCBERUZBVUxUX0xJU1RfSVRFTV9JQ09OX0NMQVNTRVMpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgbGluZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgbGluZS5jbGFzc0xpc3QuYWRkKFwibGluZVwiKTtcbiAgICBsaXN0LmFwcGVuZENoaWxkKGxpbmUpO1xuXG4gICAgLy8gRG9uZVxuICAgIGNvbnN0IGRvbmUgPSB0aGlzLmdldE1lbnVJdGVtKHsgdGl0bGU6IFwiRG9uZVwiLCB0YXNrczogW10gfSwgW1xuICAgICAgXCJmYXJcIixcbiAgICAgIFwiZmEtY2FsZW5kYXItY2hlY2tcIixcbiAgICBdKTtcbiAgICBsaXN0LmFwcGVuZENoaWxkKGRvbmUpO1xuXG4gICAgbWVudS5hcHBlbmRDaGlsZChsaXN0KTtcblxuICAgIC8vIExvZ3NcbiAgICBjb25zdCBwdXNoQm90dG9tID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInVsXCIpO1xuICAgIHB1c2hCb3R0b20uY2xhc3NMaXN0LmFkZChcInB1c2gtYm90dG9tXCIpO1xuXG4gICAgY29uc3QgbG9nc0xpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICBsb2dzTGluay5ocmVmID0gXCIjXCI7XG4gICAgbG9nc0xpbmsuY2xhc3NMaXN0LmFkZChcIm1lbnUtaXRlbVwiKTtcbiAgICBjb25zdCBsb2dzTGlua0xpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgIGxvZ3NMaW5rTGkuaW5uZXJIVE1MID0gYDxpIGNsYXNzPSdmYSBmYS1jb2cnPjwvaT4gTG9nc2A7XG4gICAgbG9nc0xpbmsuYXBwZW5kQ2hpbGQobG9nc0xpbmtMaSk7XG4gICAgcHVzaEJvdHRvbS5hcHBlbmRDaGlsZChsb2dzTGluayk7XG5cbiAgICBjb25zdCBsb2dvdXRMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgbG9nb3V0TGluay5ocmVmID0gXCIjXCI7XG4gICAgbG9nb3V0TGluay5jbGFzc0xpc3QuYWRkKFwibWVudS1pdGVtXCIpO1xuICAgIGNvbnN0IGxvZ291dExpbmtMaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcbiAgICBsb2dvdXRMaW5rTGkuaW5uZXJIVE1MID0gYDxpIGNsYXNzPSdmYSBmYS1zaWduLW91dC1hbHQnPjwvaT4gTG9nIG91dGA7XG4gICAgbG9nb3V0TGluay5hcHBlbmRDaGlsZChsb2dvdXRMaW5rTGkpO1xuICAgIHB1c2hCb3R0b20uYXBwZW5kQ2hpbGQobG9nb3V0TGluayk7XG5cbiAgICBtZW51LmFwcGVuZENoaWxkKHB1c2hCb3R0b20pO1xuXG4gICAgcmV0dXJuIG1lbnU7XG4gIH1cblxuICBjYWxjdWxhdGVQcm9qZWN0VGFza3NBbW91bnQocHJvamVjdCkge1xuICAgIHJldHVybiBwcm9qZWN0LnRhc2tzLnJlZHVjZSgoYWNjdW11bGF0b3IsIGN1cnJlbnRWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvciArIChjdXJyZW50VmFsdWUuaXNDb21wbGV0ZSA/IDAgOiAxKTtcbiAgICB9LCAwKTtcbiAgfVxuXG4gIGdldE92ZXJ2aWV3TWVudUl0ZW0ocHJvamVjdCkge1xuICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICBsaW5rLmhyZWYgPSBcIiNcIjtcbiAgICBsaW5rLnNldEF0dHJpYnV0ZShcImRhdGEtbWVudS1pbmRleFwiLCBwcm9qZWN0LmlkKTtcbiAgICBsaW5rLmNsYXNzTGlzdC5hZGQoXCJtZW51LWl0ZW1cIik7XG4gICAgaWYgKHRoaXMubW9kZWwuZ2V0Q3VycmVudFByb2plY3RJZCgpID09PSBwcm9qZWN0LmlkKSB7XG4gICAgICBsaW5rLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XG4gICAgfVxuXG4gICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG5cbiAgICBjb25zdCBmbGV4Um93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBmbGV4Um93LmNsYXNzTGlzdC50b2dnbGUoXCJmbGV4LXJvd1wiKTtcblxuICAgIGNvbnN0IGljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaVwiKTtcbiAgICBpY29uLmNsYXNzTGlzdC5hZGQoXCJmYVwiLCBcImZhLWhvbWVcIik7XG5cbiAgICBjb25zdCBtZW51SXRlbVRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIG1lbnVJdGVtVGV4dC5jbGFzc0xpc3QudG9nZ2xlKFwibWVudS1pdGVtLXRleHRcIik7XG5cbiAgICBjb25zdCBwcm9qZWN0c0Ftb3VudCA9IHRoaXMubW9kZWwuZ2V0UHJvamVjdHNDb3VudCgpO1xuICAgIG1lbnVJdGVtVGV4dC5pbm5lckhUTUwgPSBgJHtcbiAgICAgIHByb2plY3QudGl0bGVcbiAgICB9IDxwIGNsYXNzPSd0YXNrcy1hbW91bnQnPiR7cHJvamVjdHNBbW91bnR9IFxuICAgICR7cHJvamVjdHNBbW91bnQgPT09IDEgPyBcInByb2plY3RcIiA6IFwicHJvamVjdHNcIn08L3A+YDtcblxuICAgIGZsZXhSb3cuYXBwZW5kQ2hpbGQoaWNvbik7XG4gICAgZmxleFJvdy5hcHBlbmRDaGlsZChtZW51SXRlbVRleHQpO1xuICAgIGxpLmFwcGVuZENoaWxkKGZsZXhSb3cpO1xuICAgIGxpbmsuYXBwZW5kQ2hpbGQobGkpO1xuXG4gICAgbGluay5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIC8vIGNoYW5nZSBwcm9qZWN0XG4gICAgICB0aGlzLmNvbnRyb2xsZXIuY2hhbmdlQ3VycmVudFByb2plY3QocHJvamVjdC5pZCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbGluaztcbiAgfVxuXG4gIGdldE1lbnVJdGVtKHByb2plY3QsIGljb25DbGFzc2VzQXJyYXkpIHtcbiAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgbGluay5ocmVmID0gXCIjXCI7XG4gICAgbGluay5zZXRBdHRyaWJ1dGUoXCJkYXRhLW1lbnUtaW5kZXhcIiwgcHJvamVjdC5pZCk7XG4gICAgbGluay5jbGFzc0xpc3QuYWRkKFwibWVudS1pdGVtXCIpO1xuICAgIGlmICh0aGlzLm1vZGVsLmdldEN1cnJlbnRQcm9qZWN0SWQoKSA9PT0gcHJvamVjdC5pZCkge1xuICAgICAgbGluay5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuXG4gICAgY29uc3QgZmxleFJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgZmxleFJvdy5jbGFzc0xpc3QudG9nZ2xlKFwiZmxleC1yb3dcIik7XG5cbiAgICBjb25zdCBpY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlcIik7XG4gICAgaWNvbi5jbGFzc0xpc3QuYWRkKC4uLmljb25DbGFzc2VzQXJyYXkpO1xuXG4gICAgY29uc3QgbWVudUl0ZW1UZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBtZW51SXRlbVRleHQuY2xhc3NMaXN0LnRvZ2dsZShcIm1lbnUtaXRlbS10ZXh0XCIpO1xuXG4gICAgaWYgKHByb2plY3QudGFza3MpIHtcbiAgICAgIGNvbnN0IHRvZG9UYXNrcyA9IHRoaXMuY2FsY3VsYXRlUHJvamVjdFRhc2tzQW1vdW50KHByb2plY3QpO1xuICAgICAgbWVudUl0ZW1UZXh0LmlubmVySFRNTCA9IGAke1xuICAgICAgICBwcm9qZWN0LnRpdGxlXG4gICAgICB9IDxwIGNsYXNzPSd0YXNrcy1hbW91bnQnPiR7dG9kb1Rhc2tzfSAke1xuICAgICAgICB0b2RvVGFza3MgPT09IDEgPyBcIlRhc2tcIiA6IFwiVGFza3NcIlxuICAgICAgfTwvcD5gO1xuICAgIH1cblxuICAgIGZsZXhSb3cuYXBwZW5kQ2hpbGQoaWNvbik7XG4gICAgZmxleFJvdy5hcHBlbmRDaGlsZChtZW51SXRlbVRleHQpO1xuICAgIGxpLmFwcGVuZENoaWxkKGZsZXhSb3cpO1xuICAgIGxpbmsuYXBwZW5kQ2hpbGQobGkpO1xuXG4gICAgbGluay5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIC8vIGNoYW5nZSBwcm9qZWN0XG4gICAgICB0aGlzLmNvbnRyb2xsZXIuY2hhbmdlQ3VycmVudFByb2plY3QocHJvamVjdC5pZCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbGluaztcbiAgfVxufVxuIiwiaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4vQXBwXCI7XG5cbmxldCBhcHAgPSBuZXcgQXBwKCk7XG5hcHAuaW5pdCgpO1xuIiwiaW1wb3J0IHsgTW9kZWwgfSBmcm9tIFwiLi9tb2RlbC9Nb2RlbFwiO1xuaW1wb3J0IHsgRGlzcGxheUNvbnRyb2xsZXIgfSBmcm9tIFwiLi9jb250cm9sbGVyL0Rpc3BsYXlDb250cm9sbGVyXCI7XG5pbXBvcnQgeyBTaW5nbGVQcm9qZWN0VmlldyB9IGZyb20gXCIuL3ZpZXcvU2luZ2xlUHJvamVjdFZpZXdcIjtcbmltcG9ydCB7IE1lbnVWaWV3IH0gZnJvbSBcIi4vdmlldy9NZW51Vmlld1wiO1xuXG5leHBvcnQgY2xhc3MgQXBwIHtcbiAgbW9kZWw7XG4gIGNvbnRyb2xsZXI7XG4gIHZpZXc7XG4gIG1lbnVWaWV3O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubW9kZWwgPSBuZXcgTW9kZWwoKTtcbiAgICBcbiAgICB0aGlzLm1lbnVWaWV3ID0gbmV3IE1lbnVWaWV3KHsgbW9kZWw6IHRoaXMubW9kZWwgfSk7XG4gICAgXG4gICAgdGhpcy52aWV3ID0gbmV3IFNpbmdsZVByb2plY3RWaWV3KHsgbWVudVZpZXc6IHRoaXMubWVudVZpZXcgfSk7XG4gICAgdGhpcy52aWV3LnNldE1vZGVsKHRoaXMubW9kZWwpO1xuXG4gICAgdGhpcy5jb250cm9sbGVyID0gbmV3IERpc3BsYXlDb250cm9sbGVyKHtcbiAgICAgIHZpZXc6IHRoaXMudmlldyxcbiAgICAgIG1vZGVsOiB0aGlzLm1vZGVsLFxuICAgIH0pO1xuXG4gICAgdGhpcy52aWV3LnNldENvbnRyb2xsZXIodGhpcy5jb250cm9sbGVyKTtcblxuICAgIHRoaXMubWVudVZpZXcuc2V0Q29udHJvbGxlcih0aGlzLmNvbnRyb2xsZXIpO1xuICB9XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLmNvbnRyb2xsZXIuaW5pdCgpO1xuICB9XG59XG4iXSwibmFtZXMiOlsic3RhcnRpbmdJbmRleCIsIlRhc2siLCJjcmVhdGVkRGF0ZSIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJkdWVEYXRlIiwicHJpb3JpdHkiLCJpc0NvbXBsZXRlIiwibG9nIiwibm90ZXMiLCJjaGVja2xpc3QiLCJjb25zdHJ1Y3RvciIsInRoaXMiLCJpZCIsInN0YXRpYyIsIm5leHRJbmRleCIsIkRhdGUiLCJtYXJrQXNDb21wbGV0ZSIsIm1hcmtBc05vdENvbXBsZXRlIiwiZ2V0RE9NRWxlbWVudCIsImJhY2tncm91bmRDb2xvckNsYXNzIiwiYm9yZGVyQ29sb3JDbGFzcyIsIlByaW9yaXR5VHlwZSIsIkRFRkFVTFQiLCJISUdIIiwiTUVESVVNIiwiTE9XIiwidGFza0VsZW1lbnQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJzZXRBdHRyaWJ1dGUiLCJ0YXNrQ29udGVudCIsImNoZWNrYm94SW5wdXQiLCJhcHBlbmRDaGlsZCIsImNoZWNrYm94V3JhcHBlciIsImxhYmVsIiwic3BhbkNoZWNrYm94Iiwic3BhbkNoZWNrIiwidGFza1RleHQiLCJ0ZXh0Q29udGVudCIsInRhc2tEZXRhaWxzIiwidGFza0Rlc2NyaXB0aW9uIiwiZmxleFJvdzEiLCJVdGlscyIsImNhcGl0YWxpemUiLCJpbm5lckhUTUwiLCJ0YXNrTWVudSIsImNoZXZyb25JY29uIiwibW9yZUljb24iLCJtb3JlTWVudSIsImxpc3QiLCJlZGl0TGlzdEl0ZW0iLCJkZWxldGVMaXN0SXRlbSIsInNhbXBsZURhdGEiLCJwcm9qZWN0cyIsInRhc2tzIiwiZG9uZSIsInRvZG9Db3VudCIsIk1vZGVsIiwiY3VycmVudFByb2plY3QiLCJjdXJyZW50UHJvamVjdElkIiwiZGF0YSIsImdldEluaXRpYWxQcm9qZWN0Iiwic2V0Q3VycmVudFByb2plY3QiLCJwcm9qZWN0Iiwic2V0Q3VycmVudFByb2plY3RJZCIsInByb2plY3RJZCIsImZpbHRlciIsInBhcnNlSW50IiwiZ2V0UHJvamVjdEJ5SWQiLCJnZXRDdXJyZW50UHJvamVjdCIsImdldEN1cnJlbnRQcm9qZWN0SWQiLCJnZXRQcm9qZWN0cyIsImNvbnNvbGUiLCJnZXRQcm9qZWN0T3ZlcnZpZXciLCJtYXAiLCJwdXNoIiwibmFtZSIsImNhbGN1bGF0ZVRhc2tzIiwiZ2V0UHJvamVjdHNDb3VudCIsImxlbmd0aCIsInJlZHVjZSIsImFjYyIsImN1cnJlbnQiLCJnZXREYXRhIiwic2V0VGFza0FzQ29tcGxldGUiLCJ0YXNrIiwiYWRkVGFzayIsInVuc2hpZnQiLCJzZXRUYXNrSXNDb21wbGV0ZSIsInRhc2tJZCIsInJlbW92ZUZyb20iLCJhZGRUbyIsInRhc2tJbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJyZXF1aXJlZEFyZ3MiLCJyZXF1aXJlZCIsImFyZ3MiLCJUeXBlRXJyb3IiLCJ0b0RhdGUiLCJhcmd1bWVudCIsImFyZ3VtZW50cyIsImFyZ1N0ciIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsImdldFRpbWUiLCJ3YXJuIiwiRXJyb3IiLCJzdGFjayIsIk5hTiIsImlzQWZ0ZXIiLCJkaXJ0eURhdGUiLCJkaXJ0eURhdGVUb0NvbXBhcmUiLCJkYXRlIiwiZGF0ZVRvQ29tcGFyZSIsIk5ld1Rhc2tNb2RhbFZhbGlkYXRpb25Db250cm9sbGVyIiwidmFsaWRhdGlvbk1lc3NhZ2VzIiwiaXNGb3JtRW1wdHkiLCJ2YWxpZFRhc2siLCJmb3JtIiwicXVlcnlTZWxlY3RvciIsImluaXQiLCJyZXNldFZhbGlkYXRpb25NZXNzYWdlcyIsImFkZEJsdXJFdmVudExpc3RlbmVycyIsImNsZWFyVmFsaWRhdGlvbk1lc3NhZ2VzIiwiaXNWYWxpZCIsInZhbGlkYXRlSW5wdXRzIiwibXNnIiwidmFsaWRhdGVUaXRsZUlucHV0IiwidmFsaWRhdGVEZXNjcmlwdGlvbklucHV0IiwidmFsaWRhdGVEdWVEYXRlSW5wdXQiLCJ2YWx1ZSIsInZhbGlkYXRpb25Nc2dTcGFuIiwiaW5jbHVkZXMiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJnZXRUYXNrIiwiZ2V0UHJpb3JpdHlWYWx1ZSIsIkRpc3BsYXlDb250cm9sbGVyIiwiY29udGVudCIsInRhc2tDb250cm9sbGVyIiwidmlldyIsIm1vZGVsIiwiZm9ybVZhbGlkYXRpb24iLCJkZXBlbmRlbmNpZXMiLCJhdHRhY2hFdmVudExpc3RlbmVycyIsInJlbmRlciIsImNoYW5nZUN1cnJlbnRQcm9qZWN0Iiwic2V0VGltZW91dCIsImFkZE5ld0xpc3RFbGVtZW50c0V2ZW50TGlzdGVuZXJzIiwiYWRkT3ZlcnZpZXdQYWdlRXZlbnRMaXN0ZW5lcnMiLCJhZGRTaG93TmV3VGFza01vZGFsRXZlbnRMaXN0ZW5lciIsImFkZEhpZGVOZXdUYXNrTW9kYWxFdmVudExpc3RlbmVyIiwiYWRkTmV3VGFza1N1Ym1pdExpc3RlbmVyIiwiYWRkVG9nZ2xlRGFya01vZGVDbGlja0xpc3RlbmVyIiwiYWRkVG9nZ2xlQ29tcGxldGVFdmVudExpc3RlbmVyIiwiYWRkVGFza0RldGFpbHNUb2dnbGVFdmVudExpc3RlbmVycyIsImFkZEV4cGFuZEhpZGVBbGxFdmVudExpc3RlbmVyIiwiYWRkVG9nZ2xlTW9yZU1lbnVMaXN0ZW5lciIsImFkZERlbGV0ZVRhc2tDbGlja0xpc3RlbmVyIiwiYWRkRWRpdFRhc2tDbGlja0xpc3RlbmVyIiwiY2hlY2tib3hlcyIsImNoZWNrYm94IiwidGFyZ2V0Iiwic3BsaXQiLCJ0b2dnbGVUYXNrQ29tcGxldGUiLCJjaGVja2VkIiwiYnV0dG9ucyIsImJ1dHRvbiIsInBhcmVudE5vZGUiLCJ0b2dnbGVUYXNrRGV0YWlscyIsInRvZ2dsZSIsImljb24iLCJURVhUX0NPTlRFTlRfVE9fRVhQQU5EIiwiYnRuIiwiU3RyaW5nIiwiaW5uZXJUZXh0IiwidHJpbSIsInNob3dUYXNrRGV0YWlscyIsImhpZGVUYXNrRGV0YWlscyIsInJlbW92ZSIsImNoZXZyb24iLCJtb2RhbFdyYXBwZXIiLCJzaG93TmV3VGFza01vZGFsIiwicmVzZXRNb2RhbEZvcm0iLCJ3aW5kb3ciLCJzY3JvbGxUbyIsInJlc2V0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY29udGFpbnMiLCJhbmltYXRlTW9kYWxDbG9zaW5nIiwid3JhcHBlciIsIm1vZGFsIiwicHJldmVudERlZmF1bHQiLCJzdWJtaXROZXdUYXNrTW9kYWwiLCJidG5zIiwibWVudSIsIm5leHRFbGVtZW50U2libGluZyIsIm1lbnVzIiwiZGVsZXRlQnRucyIsImluZGV4IiwicGFyZW50RWxlbWVudCIsImdldEF0dHJpYnV0ZSIsImhhbmRsZURlbGV0ZVRhc2siLCJiaW5kIiwiZWRpdEJ0bnMiLCJoYW5kbGVFZGl0VGFzayIsImJvZHkiLCJhZGRQcm9qZWN0VGlsZUNsaWNrTGlzdGVuZXIiLCJhZGROZXdQcm9qZWN0QnV0dG9uTGlzdGVuZXIiLCJmb3JFYWNoIiwidGlsZSIsImJnIiwib3Blbk5ld1Byb2plY3RNb2RhbCIsImlzRGF0ZSIsImlzTmFOIiwiTnVtYmVyIiwiZm9ybWF0RGlzdGFuY2VMb2NhbGUiLCJsZXNzVGhhblhTZWNvbmRzIiwib25lIiwib3RoZXIiLCJ4U2Vjb25kcyIsImhhbGZBTWludXRlIiwibGVzc1RoYW5YTWludXRlcyIsInhNaW51dGVzIiwiYWJvdXRYSG91cnMiLCJ4SG91cnMiLCJ4RGF5cyIsImFib3V0WFdlZWtzIiwieFdlZWtzIiwiYWJvdXRYTW9udGhzIiwieE1vbnRocyIsImFib3V0WFllYXJzIiwieFllYXJzIiwib3ZlclhZZWFycyIsImFsbW9zdFhZZWFycyIsImJ1aWxkRm9ybWF0TG9uZ0ZuIiwib3B0aW9ucyIsInVuZGVmaW5lZCIsIndpZHRoIiwiZGVmYXVsdFdpZHRoIiwiZm9ybWF0IiwiZm9ybWF0cyIsImZvcm1hdExvbmciLCJmdWxsIiwibG9uZyIsIm1lZGl1bSIsInNob3J0IiwidGltZSIsImRhdGVUaW1lIiwiZm9ybWF0UmVsYXRpdmVMb2NhbGUiLCJsYXN0V2VlayIsInllc3RlcmRheSIsInRvZGF5IiwidG9tb3Jyb3ciLCJuZXh0V2VlayIsImJ1aWxkTG9jYWxpemVGbiIsImRpcnR5SW5kZXgiLCJkaXJ0eU9wdGlvbnMiLCJ2YWx1ZXNBcnJheSIsImNvbnRleHQiLCJmb3JtYXR0aW5nVmFsdWVzIiwiZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCIsIl9kZWZhdWx0V2lkdGgiLCJfd2lkdGgiLCJ2YWx1ZXMiLCJhcmd1bWVudENhbGxiYWNrIiwiYnVpbGRNYXRjaEZuIiwic3RyaW5nIiwibWF0Y2hQYXR0ZXJuIiwibWF0Y2hQYXR0ZXJucyIsImRlZmF1bHRNYXRjaFdpZHRoIiwibWF0Y2hSZXN1bHQiLCJtYXRjaCIsIm1hdGNoZWRTdHJpbmciLCJwYXJzZVBhdHRlcm5zIiwiZGVmYXVsdFBhcnNlV2lkdGgiLCJrZXkiLCJBcnJheSIsImlzQXJyYXkiLCJmaW5kSW5kZXgiLCJwYXR0ZXJuIiwidGVzdCIsImZpbmRLZXkiLCJ2YWx1ZUNhbGxiYWNrIiwicmVzdCIsInNsaWNlIiwib2JqZWN0IiwicHJlZGljYXRlIiwiaGFzT3duUHJvcGVydHkiLCJhcnJheSIsImNvZGUiLCJmb3JtYXREaXN0YW5jZSIsInRva2VuIiwiY291bnQiLCJyZXN1bHQiLCJ0b2tlblZhbHVlIiwicmVwbGFjZSIsImFkZFN1ZmZpeCIsImNvbXBhcmlzb24iLCJmb3JtYXRSZWxhdGl2ZSIsIl9kYXRlIiwiX2Jhc2VEYXRlIiwiX29wdGlvbnMiLCJsb2NhbGl6ZSIsIm9yZGluYWxOdW1iZXIiLCJkaXJ0eU51bWJlciIsIm51bWJlciIsInJlbTEwMCIsImVyYSIsIm5hcnJvdyIsImFiYnJldmlhdGVkIiwid2lkZSIsInF1YXJ0ZXIiLCJtb250aCIsImRheSIsImRheVBlcmlvZCIsImFtIiwicG0iLCJtaWRuaWdodCIsIm5vb24iLCJtb3JuaW5nIiwiYWZ0ZXJub29uIiwiZXZlbmluZyIsIm5pZ2h0IiwicGFyc2VQYXR0ZXJuIiwicGFyc2VSZXN1bHQiLCJhbnkiLCJ3ZWVrU3RhcnRzT24iLCJmaXJzdFdlZWtDb250YWluc0RhdGUiLCJ0b0ludGVnZXIiLCJNYXRoIiwiY2VpbCIsImZsb29yIiwiYWRkTWlsbGlzZWNvbmRzIiwiZGlydHlBbW91bnQiLCJ0aW1lc3RhbXAiLCJhbW91bnQiLCJzdWJNaWxsaXNlY29uZHMiLCJNSUxMSVNFQ09ORFNfSU5fREFZIiwic3RhcnRPZlVUQ0lTT1dlZWsiLCJnZXRVVENEYXkiLCJkaWZmIiwic2V0VVRDRGF0ZSIsImdldFVUQ0RhdGUiLCJzZXRVVENIb3VycyIsImdldFVUQ0lTT1dlZWtZZWFyIiwieWVhciIsImdldFVUQ0Z1bGxZZWFyIiwiZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhciIsInNldFVUQ0Z1bGxZZWFyIiwic3RhcnRPZk5leHRZZWFyIiwiZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciIsInN0YXJ0T2ZUaGlzWWVhciIsInN0YXJ0T2ZVVENJU09XZWVrWWVhciIsImZvdXJ0aE9mSmFudWFyeSIsIk1JTExJU0VDT05EU19JTl9XRUVLIiwic3RhcnRPZlVUQ1dlZWsiLCJsb2NhbGUiLCJsb2NhbGVXZWVrU3RhcnRzT24iLCJkZWZhdWx0V2Vla1N0YXJ0c09uIiwiUmFuZ2VFcnJvciIsImdldFVUQ1dlZWtZZWFyIiwibG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlIiwiZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsImZpcnN0V2Vla09mTmV4dFllYXIiLCJmaXJzdFdlZWtPZlRoaXNZZWFyIiwic3RhcnRPZlVUQ1dlZWtZZWFyIiwiZmlyc3RXZWVrIiwiYWRkTGVhZGluZ1plcm9zIiwidGFyZ2V0TGVuZ3RoIiwic2lnbiIsIm91dHB1dCIsImFicyIsInNpZ25lZFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJudW1iZXJPZkRpZ2l0cyIsIm1pbGxpc2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsInBvdyIsImZvcm1hdFRpbWV6b25lU2hvcnQiLCJvZmZzZXQiLCJkaXJ0eURlbGltaXRlciIsImFic09mZnNldCIsImhvdXJzIiwibWludXRlcyIsImRlbGltaXRlciIsImZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyIsImZvcm1hdFRpbWV6b25lIiwiRyIsInkiLCJ1bml0IiwibGlnaHRGb3JtYXR0ZXJzIiwiWSIsInNpZ25lZFdlZWtZZWFyIiwid2Vla1llYXIiLCJSIiwidSIsIlEiLCJxIiwiTSIsIkwiLCJ3Iiwid2VlayIsInJvdW5kIiwiZ2V0VVRDV2VlayIsIkkiLCJpc29XZWVrIiwiZ2V0VVRDSVNPV2VlayIsImQiLCJEIiwiZGF5T2ZZZWFyIiwic2V0VVRDTW9udGgiLCJzdGFydE9mWWVhclRpbWVzdGFtcCIsImRpZmZlcmVuY2UiLCJnZXRVVENEYXlPZlllYXIiLCJFIiwiZGF5T2ZXZWVrIiwibG9jYWxEYXlPZldlZWsiLCJjIiwiaSIsImlzb0RheU9mV2VlayIsImEiLCJkYXlQZXJpb2RFbnVtVmFsdWUiLCJ0b0xvd2VyQ2FzZSIsImIiLCJCIiwiaCIsIkgiLCJLIiwiayIsIm0iLCJzIiwiUyIsIlgiLCJfbG9jYWxpemUiLCJ0aW1lem9uZU9mZnNldCIsIl9vcmlnaW5hbERhdGUiLCJnZXRUaW1lem9uZU9mZnNldCIsIngiLCJPIiwieiIsInQiLCJvcmlnaW5hbERhdGUiLCJUIiwiZGF0ZUxvbmdGb3JtYXR0ZXIiLCJ0aW1lTG9uZ0Zvcm1hdHRlciIsImxvbmdGb3JtYXR0ZXJzIiwicCIsIlAiLCJkYXRlVGltZUZvcm1hdCIsImRhdGVQYXR0ZXJuIiwidGltZVBhdHRlcm4iLCJnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIiwidXRjRGF0ZSIsIlVUQyIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsInByb3RlY3RlZERheU9mWWVhclRva2VucyIsInByb3RlY3RlZFdlZWtZZWFyVG9rZW5zIiwiaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbiIsImlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbiIsInRocm93UHJvdGVjdGVkRXJyb3IiLCJpbnB1dCIsImNvbmNhdCIsImZvcm1hdHRpbmdUb2tlbnNSZWdFeHAiLCJsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImVzY2FwZWRTdHJpbmdSZWdFeHAiLCJkb3VibGVRdW90ZVJlZ0V4cCIsInVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwIiwiY2xlYW5Fc2NhcGVkU3RyaW5nIiwiY29tcGFyZUFzYyIsImRpcnR5RGF0ZUxlZnQiLCJkaXJ0eURhdGVSaWdodCIsImRhdGVMZWZ0IiwiZGF0ZVJpZ2h0IiwiZGlmZmVyZW5jZUluQ2FsZW5kYXJNb250aHMiLCJ5ZWFyRGlmZiIsIm1vbnRoRGlmZiIsImVuZE9mRGF5Iiwic2V0SG91cnMiLCJlbmRPZk1vbnRoIiwic2V0RnVsbFllYXIiLCJpc0xhc3REYXlPZk1vbnRoIiwiZGlmZmVyZW5jZUluTW9udGhzIiwic2V0RGF0ZSIsInNldE1vbnRoIiwiaXNMYXN0TW9udGhOb3RGdWxsIiwiZGlmZmVyZW5jZUluTWlsbGlzZWNvbmRzIiwicm91bmRpbmdNYXAiLCJ0cnVuYyIsImdldFJvdW5kaW5nTWV0aG9kIiwibWV0aG9kIiwiZGlmZmVyZW5jZUluU2Vjb25kcyIsInJvdW5kaW5nTWV0aG9kIiwiY2xvbmVPYmplY3QiLCJkaXJ0eU9iamVjdCIsInByb3BlcnR5IiwiTUlOVVRFU19JTl9EQVkiLCJNSU5VVEVTX0lOX01PTlRIIiwiU2luZ2xlUHJvamVjdFZpZXciLCJjb250YWluZXIiLCJjb250cm9sbGVyIiwibWVudVZpZXciLCJzZXRDb250cm9sbGVyIiwic2V0UHJvamVjdCIsInNldE1vZGVsIiwidXBkYXRlUHJvamVjdCIsInJlbmRlck1lbnUiLCJyZW5kZXJPdmVydmlldyIsInJlbmRlclRhc2tzTGlzdCIsImNsZWFyQ29udGFpbmVyIiwiZmxleFJvdyIsInRleHQiLCJwcm9qZWN0R3JpZFdyYXBwZXIiLCJwcm9qZWN0R3JpZCIsImdldFByb2plY3RHcmlkSXRlbSIsImdldE5ld1Byb2plY3RHcmlkQnV0dG9uIiwiZWxlbWVudCIsInRhc2tDb3VudCIsImNyZWF0ZVByb2plY3RUaXRsZUFuZE1lbnUiLCJjcmVhdGVQcm9qZWN0RGVzY3JpcHRpb24iLCJjcmVhdGVUYXNrcyIsInJlbW92ZUNoaWxkIiwiaGVhZGluZyIsIm1lbnUxIiwic2VjdGlvblRvZG8iLCJoZWFkaW5nVG9kbyIsImV4cGFuZEFsbCIsImV4cGFuZEFsbFNwYW4iLCJnZXRUYXNrRE9NRWxlbWVudCIsImhlYWRpbmdEb25lIiwiZG9uZUZvcm0iLCJkb25lVGFzayIsInN0ciIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwiZHVlRGF0ZVN0cmluZyIsImRpcnR5Rm9ybWF0U3RyIiwiZm9ybWF0U3RyIiwiZm9ybWF0dGVyT3B0aW9ucyIsInN1YnN0cmluZyIsImZpcnN0Q2hhcmFjdGVyIiwibG9uZ0Zvcm1hdHRlciIsImpvaW4iLCJmb3JtYXR0ZXIiLCJ1c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnMiLCJ1c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zIiwiZHVlSW4iLCJkaXN0YW5jZSIsImRpcnR5QmFzZURhdGUiLCJsb2NhbGl6ZU9wdGlvbnMiLCJCb29sZWFuIiwibW9udGhzIiwic2Vjb25kcyIsIm9mZnNldEluU2Vjb25kcyIsImluY2x1ZGVTZWNvbmRzIiwiZGF5cyIsIm5lYXJlc3RNb250aCIsIm1vbnRoc1NpbmNlU3RhcnRPZlllYXIiLCJ5ZWFycyIsIk1lbnVWaWV3IiwibWVudUxlZnQiLCJyZXBsYWNlQ2hpbGQiLCJnZXRNZW51RE9NIiwiREVGQVVMVF9MSVNUX0lURU1fSUNPTl9DTEFTU0VTIiwiZ2V0T3ZlcnZpZXdNZW51SXRlbSIsImdldE1lbnVJdGVtIiwibGluZSIsInB1c2hCb3R0b20iLCJsb2dzTGluayIsImhyZWYiLCJsb2dzTGlua0xpIiwibG9nb3V0TGluayIsImxvZ291dExpbmtMaSIsImNhbGN1bGF0ZVByb2plY3RUYXNrc0Ftb3VudCIsImFjY3VtdWxhdG9yIiwiY3VycmVudFZhbHVlIiwibGluayIsImxpIiwibWVudUl0ZW1UZXh0IiwicHJvamVjdHNBbW91bnQiLCJpY29uQ2xhc3Nlc0FycmF5IiwidG9kb1Rhc2tzIl0sInNvdXJjZVJvb3QiOiIifQ==